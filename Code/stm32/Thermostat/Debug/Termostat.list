
Termostat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08006a80  08006a80  00016a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f0c  08006f0c  000202f4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f14  08006f14  000202f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f14  08006f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  08006f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200002f4  08007210  000202f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08007210  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022008  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004542  00000000  00000000  0004232c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014871  00000000  00000000  0004686e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  0005b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002718  00000000  00000000  0005c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002405c  00000000  00000000  0005e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020296  00000000  00000000  0008293c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d38ab  00000000  00000000  000a2bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017647d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047ec  00000000  00000000  001764d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f4 	.word	0x200002f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a64 	.word	0x08006a64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f8 	.word	0x200002f8
 80001cc:	08006a64 	.word	0x08006a64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <DS18B20_Read.part.0>:
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
}

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	4605      	mov	r5, r0
 8000ec6:	4617      	mov	r7, r2
 8000ec8:	9101      	str	r1, [sp, #4]
		/* Conversion is not finished yet */
		return false;
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8000eca:	f000 fc27 	bl	800171c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000ece:	9901      	ldr	r1, [sp, #4]
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	f000 ffd7 	bl	8001e84 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	21be      	movs	r1, #190	; 0xbe
 8000eda:	f000 fc93 	bl	8001804 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8000ede:	f10d 040b 	add.w	r4, sp, #11
 8000ee2:	ae05      	add	r6, sp, #20
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	f000 fced 	bl	80018c4 <OneWire_ReadByte>
 8000eea:	f804 0f01 	strb.w	r0, [r4, #1]!
	for (i = 0; i < 9; i++) 
 8000eee:	42a6      	cmp	r6, r4
 8000ef0:	d1f8      	bne.n	8000ee4 <DS18B20_Read.part.0+0x24>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8000ef2:	2108      	movs	r1, #8
 8000ef4:	a803      	add	r0, sp, #12
 8000ef6:	f000 ffe9 	bl	8001ecc <OneWire_CRC8>
	
	/* Check if CRC is ok */
	if (crc != data[8])
 8000efa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000efe:	4283      	cmp	r3, r0
 8000f00:	d002      	beq.n	8000f08 <DS18B20_Read.part.0+0x48>
		/* CRC invalid */
		return 0;
 8000f02:	2000      	movs	r0, #0
	/* Set to pointer */
	*destination = decimal;
	
	/* Return 1, temperature valid */
	return true;
}
 8000f04:	b007      	add	sp, #28
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	temperature = data[0] | (data[1] << 8);
 8000f08:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000f0c:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8000f10:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	OneWire_Reset(OneWire);
 8000f14:	4628      	mov	r0, r5
	temperature = data[0] | (data[1] << 8);
 8000f16:	b225      	sxth	r5, r4
	OneWire_Reset(OneWire);
 8000f18:	f000 fc00 	bl	800171c <OneWire_Reset>
	if (temperature & 0x8000)
 8000f1c:	2d00      	cmp	r5, #0
		temperature = ~temperature + 1;
 8000f1e:	bfb8      	it	lt
 8000f20:	4264      	neglt	r4, r4
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8000f22:	f89d 1010 	ldrb.w	r1, [sp, #16]
		temperature = ~temperature + 1;
 8000f26:	bfb8      	it	lt
 8000f28:	b2a4      	uxthlt	r4, r4
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000f2a:	ea4f 1314 	mov.w	r3, r4, lsr #4
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8000f2e:	f3c1 1141 	ubfx	r1, r1, #5, #2
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000f32:	f003 0270 	and.w	r2, r3, #112	; 0x70
		minus = 1;
 8000f36:	bfb4      	ite	lt
 8000f38:	2001      	movlt	r0, #1
	int8_t digit, minus = 0;
 8000f3a:	2000      	movge	r0, #0
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000f3c:	f344 1307 	sbfx	r3, r4, #4, #8
	switch (resolution) 
 8000f40:	2902      	cmp	r1, #2
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8000f42:	f101 0509 	add.w	r5, r1, #9
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000f46:	ea43 0302 	orr.w	r3, r3, r2
	switch (resolution) 
 8000f4a:	d029      	beq.n	8000fa0 <DS18B20_Read.part.0+0xe0>
 8000f4c:	2d0c      	cmp	r5, #12
 8000f4e:	d020      	beq.n	8000f92 <DS18B20_Read.part.0+0xd2>
 8000f50:	2d0a      	cmp	r5, #10
 8000f52:	d017      	beq.n	8000f84 <DS18B20_Read.part.0+0xc4>
			decimal = (temperature >> 3) & 0x01;
 8000f54:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8000f58:	ee07 2a90 	vmov	s15, r2
 8000f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000f60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f64:	ee67 7a87 	vmul.f32	s15, s15, s14
	decimal = digit + decimal;
 8000f68:	ee07 3a10 	vmov	s14, r3
 8000f6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f70:	ee77 7a27 	vadd.f32	s15, s14, s15
	if (minus) 
 8000f74:	b108      	cbz	r0, 8000f7a <DS18B20_Read.part.0+0xba>
		decimal = 0 - decimal;
 8000f76:	eef1 7a67 	vneg.f32	s15, s15
	return true;
 8000f7a:	2001      	movs	r0, #1
	*destination = decimal;
 8000f7c:	edc7 7a00 	vstr	s15, [r7]
}
 8000f80:	b007      	add	sp, #28
 8000f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			decimal = (temperature >> 2) & 0x03;
 8000f84:	f3c4 0281 	ubfx	r2, r4, #2, #2
 8000f88:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000f8c:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
		 break;
 8000f90:	e7ea      	b.n	8000f68 <DS18B20_Read.part.0+0xa8>
			decimal = temperature & 0x0F;
 8000f92:	f004 020f 	and.w	r2, r4, #15
 8000f96:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8000f9a:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
		 break;
 8000f9e:	e7e3      	b.n	8000f68 <DS18B20_Read.part.0+0xa8>
			decimal = (temperature >> 1) & 0x07;
 8000fa0:	f3c4 0242 	ubfx	r2, r4, #1, #3
 8000fa4:	ee07 2a90 	vmov	s15, r2
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8000fa8:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
		break;
 8000fac:	e7dc      	b.n	8000f68 <DS18B20_Read.part.0+0xa8>
 8000fae:	bf00      	nop

08000fb0 <DS18B20_SetResolution.part.0>:
	
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
 8000fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	460e      	mov	r6, r1
 8000fb8:	4691      	mov	r9, r2
	if (!DS18B20_Is(ROM)) 
		return 0;
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000fba:	f000 fbaf 	bl	800171c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f000 ff5f 	bl	8001e84 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000fc6:	21be      	movs	r1, #190	; 0xbe
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f000 fc1b 	bl	8001804 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f000 fc78 	bl	80018c4 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f000 fc75 	bl	80018c4 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f000 fc72 	bl	80018c4 <OneWire_ReadByte>
 8000fe0:	4680      	mov	r8, r0
	tl = OneWire_ReadByte(OneWire);
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f000 fc6e 	bl	80018c4 <OneWire_ReadByte>
 8000fe8:	4607      	mov	r7, r0
	conf = OneWire_ReadByte(OneWire);
 8000fea:	4620      	mov	r0, r4
 8000fec:	f000 fc6a 	bl	80018c4 <OneWire_ReadByte>
	
	if (resolution == DS18B20_Resolution_9bits) 
 8000ff0:	f1b9 0f09 	cmp.w	r9, #9
	conf = OneWire_ReadByte(OneWire);
 8000ff4:	4605      	mov	r5, r0
	if (resolution == DS18B20_Resolution_9bits) 
 8000ff6:	d035      	beq.n	8001064 <DS18B20_SetResolution.part.0+0xb4>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8000ff8:	f1b9 0f0a 	cmp.w	r9, #10
 8000ffc:	d02d      	beq.n	800105a <DS18B20_SetResolution.part.0+0xaa>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
		conf |= 1 << DS18B20_RESOLUTION_R0;
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000ffe:	f1b9 0f0b 	cmp.w	r9, #11
 8001002:	d032      	beq.n	800106a <DS18B20_SetResolution.part.0+0xba>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8001004:	f1b9 0f0c 	cmp.w	r9, #12
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001008:	bf04      	itt	eq
 800100a:	f040 0560 	orreq.w	r5, r0, #96	; 0x60
 800100e:	b2ed      	uxtbeq	r5, r5
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001010:	4620      	mov	r0, r4
 8001012:	f000 fb83 	bl	800171c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001016:	4631      	mov	r1, r6
 8001018:	4620      	mov	r0, r4
 800101a:	f000 ff33 	bl	8001e84 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 800101e:	4620      	mov	r0, r4
 8001020:	214e      	movs	r1, #78	; 0x4e
 8001022:	f000 fbef 	bl	8001804 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001026:	4641      	mov	r1, r8
 8001028:	4620      	mov	r0, r4
 800102a:	f000 fbeb 	bl	8001804 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 800102e:	4639      	mov	r1, r7
 8001030:	4620      	mov	r0, r4
 8001032:	f000 fbe7 	bl	8001804 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001036:	4629      	mov	r1, r5
 8001038:	4620      	mov	r0, r4
 800103a:	f000 fbe3 	bl	8001804 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800103e:	4620      	mov	r0, r4
 8001040:	f000 fb6c 	bl	800171c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001044:	4631      	mov	r1, r6
 8001046:	4620      	mov	r0, r4
 8001048:	f000 ff1c 	bl	8001e84 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800104c:	4620      	mov	r0, r4
 800104e:	2148      	movs	r1, #72	; 0x48
 8001050:	f000 fbd8 	bl	8001804 <OneWire_WriteByte>
	
	return 1;
}
 8001054:	2001      	movs	r0, #1
 8001056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800105a:	f000 05bf 	and.w	r5, r0, #191	; 0xbf
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800105e:	f045 0520 	orr.w	r5, r5, #32
 8001062:	e7d5      	b.n	8001010 <DS18B20_SetResolution.part.0+0x60>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001064:	f000 059f 	and.w	r5, r0, #159	; 0x9f
 8001068:	e7d2      	b.n	8001010 <DS18B20_SetResolution.part.0+0x60>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800106a:	f000 05df 	and.w	r5, r0, #223	; 0xdf
 800106e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8001072:	e7cd      	b.n	8001010 <DS18B20_SetResolution.part.0+0x60>

08001074 <DS18B20_DisableAlarmTemperature.part.0>:
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
 8001074:	b570      	push	{r4, r5, r6, lr}
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
		return 0;
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800107a:	f000 fb4f 	bl	800171c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800107e:	4629      	mov	r1, r5
 8001080:	4620      	mov	r0, r4
 8001082:	f000 feff 	bl	8001e84 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001086:	21be      	movs	r1, #190	; 0xbe
 8001088:	4620      	mov	r0, r4
 800108a:	f000 fbbb 	bl	8001804 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800108e:	4620      	mov	r0, r4
 8001090:	f000 fc18 	bl	80018c4 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8001094:	4620      	mov	r0, r4
 8001096:	f000 fc15 	bl	80018c4 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 800109a:	4620      	mov	r0, r4
 800109c:	f000 fc12 	bl	80018c4 <OneWire_ReadByte>
	tl = OneWire_ReadByte(OneWire);
 80010a0:	4620      	mov	r0, r4
 80010a2:	f000 fc0f 	bl	80018c4 <OneWire_ReadByte>
	conf = OneWire_ReadByte(OneWire);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f000 fc0c 	bl	80018c4 <OneWire_ReadByte>
 80010ac:	4606      	mov	r6, r0
	
	th = 125;
	tl = (uint8_t)-55;

	/* Reset line */
	OneWire_Reset(OneWire);
 80010ae:	4620      	mov	r0, r4
 80010b0:	f000 fb34 	bl	800171c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80010b4:	4629      	mov	r1, r5
 80010b6:	4620      	mov	r0, r4
 80010b8:	f000 fee4 	bl	8001e84 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80010bc:	4620      	mov	r0, r4
 80010be:	214e      	movs	r1, #78	; 0x4e
 80010c0:	f000 fba0 	bl	8001804 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80010c4:	4620      	mov	r0, r4
 80010c6:	217d      	movs	r1, #125	; 0x7d
 80010c8:	f000 fb9c 	bl	8001804 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80010cc:	4620      	mov	r0, r4
 80010ce:	21c9      	movs	r1, #201	; 0xc9
 80010d0:	f000 fb98 	bl	8001804 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80010d4:	4631      	mov	r1, r6
 80010d6:	4620      	mov	r0, r4
 80010d8:	f000 fb94 	bl	8001804 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80010dc:	4620      	mov	r0, r4
 80010de:	f000 fb1d 	bl	800171c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80010e2:	4629      	mov	r1, r5
 80010e4:	4620      	mov	r0, r4
 80010e6:	f000 fecd 	bl	8001e84 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80010ea:	4620      	mov	r0, r4
 80010ec:	2148      	movs	r1, #72	; 0x48
 80010ee:	f000 fb89 	bl	8001804 <OneWire_WriteByte>
	
	return 1;
}
 80010f2:	2001      	movs	r0, #1
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
 80010f6:	bf00      	nop

080010f8 <Ds18b20_Init>:
{
 80010f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010fc:	4c34      	ldr	r4, [pc, #208]	; (80011d0 <Ds18b20_Init+0xd8>)
 80010fe:	4e35      	ldr	r6, [pc, #212]	; (80011d4 <Ds18b20_Init+0xdc>)
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8001100:	4d35      	ldr	r5, [pc, #212]	; (80011d8 <Ds18b20_Init+0xe0>)
 8001102:	4f36      	ldr	r7, [pc, #216]	; (80011dc <Ds18b20_Init+0xe4>)
{
 8001104:	f04f 0805 	mov.w	r8, #5
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8001108:	2201      	movs	r2, #1
 800110a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800110e:	4628      	mov	r0, r5
 8001110:	f000 fad4 	bl	80016bc <OneWire_Init>
		TempSensorCount = 0;	
 8001114:	2300      	movs	r3, #0
 8001116:	7023      	strb	r3, [r4, #0]
		while(HAL_GetTick() < 3000)
 8001118:	f640 39b7 	movw	r9, #2999	; 0xbb7
 800111c:	e001      	b.n	8001122 <Ds18b20_Init+0x2a>
			Ds18b20Delay(100);
 800111e:	f001 f945 	bl	80023ac <HAL_Delay>
		while(HAL_GetTick() < 3000)
 8001122:	f001 f93d 	bl	80023a0 <HAL_GetTick>
 8001126:	4548      	cmp	r0, r9
			Ds18b20Delay(100);
 8001128:	f04f 0064 	mov.w	r0, #100	; 0x64
		while(HAL_GetTick() < 3000)
 800112c:	d9f7      	bls.n	800111e <Ds18b20_Init+0x26>
		OneWireDevices = OneWire_First(&OneWire);
 800112e:	4628      	mov	r0, r5
 8001130:	f000 fdc2 	bl	8001cb8 <OneWire_First>
 8001134:	7030      	strb	r0, [r6, #0]
		while (OneWireDevices)
 8001136:	b190      	cbz	r0, 800115e <Ds18b20_Init+0x66>
			Ds18b20Delay(100);
 8001138:	2064      	movs	r0, #100	; 0x64
 800113a:	f001 f937 	bl	80023ac <HAL_Delay>
			TempSensorCount++;
 800113e:	7823      	ldrb	r3, [r4, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	b2db      	uxtb	r3, r3
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8001144:	1e59      	subs	r1, r3, #1
 8001146:	eb07 1101 	add.w	r1, r7, r1, lsl #4
 800114a:	4628      	mov	r0, r5
			TempSensorCount++;
 800114c:	7023      	strb	r3, [r4, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800114e:	f000 fe9b 	bl	8001e88 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8001152:	4628      	mov	r0, r5
 8001154:	f000 fdb6 	bl	8001cc4 <OneWire_Next>
 8001158:	7030      	strb	r0, [r6, #0]
		while (OneWireDevices)
 800115a:	2800      	cmp	r0, #0
 800115c:	d1ec      	bne.n	8001138 <Ds18b20_Init+0x40>
		if(TempSensorCount>0)
 800115e:	7823      	ldrb	r3, [r4, #0]
 8001160:	b93b      	cbnz	r3, 8001172 <Ds18b20_Init+0x7a>
	}while(Ds18b20TryToFind>0);
 8001162:	f108 38ff 	add.w	r8, r8, #4294967295
 8001166:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800116a:	d1cd      	bne.n	8001108 <Ds18b20_Init+0x10>
		return false;
 800116c:	4640      	mov	r0, r8
}
 800116e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001172:	2600      	movs	r6, #0
 8001174:	4f19      	ldr	r7, [pc, #100]	; (80011dc <Ds18b20_Init+0xe4>)
 8001176:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80011d8 <Ds18b20_Init+0xe0>
 800117a:	4635      	mov	r5, r6
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 800117c:	ea4f 1805 	mov.w	r8, r5, lsl #4
		Ds18b20Delay(50);
 8001180:	2032      	movs	r0, #50	; 0x32
 8001182:	f001 f913 	bl	80023ac <HAL_Delay>
	if (*ROM == DS18B20_FAMILY_CODE) 
 8001186:	f817 3008 	ldrb.w	r3, [r7, r8]
 800118a:	2b28      	cmp	r3, #40	; 0x28
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 800118c:	eb07 1505 	add.w	r5, r7, r5, lsl #4
	if (*ROM == DS18B20_FAMILY_CODE) 
 8001190:	d018      	beq.n	80011c4 <Ds18b20_Init+0xcc>
		Ds18b20Delay(50);
 8001192:	2032      	movs	r0, #50	; 0x32
 8001194:	f001 f90a 	bl	80023ac <HAL_Delay>
	if (*ROM == DS18B20_FAMILY_CODE) 
 8001198:	f817 3008 	ldrb.w	r3, [r7, r8]
 800119c:	2b28      	cmp	r3, #40	; 0x28
 800119e:	d007      	beq.n	80011b0 <Ds18b20_Init+0xb8>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80011a0:	7823      	ldrb	r3, [r4, #0]
 80011a2:	3601      	adds	r6, #1
 80011a4:	b2f5      	uxtb	r5, r6
 80011a6:	42ab      	cmp	r3, r5
 80011a8:	d8e8      	bhi.n	800117c <Ds18b20_Init+0x84>
	return true;
 80011aa:	2001      	movs	r0, #1
}
 80011ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011b0:	4629      	mov	r1, r5
 80011b2:	4648      	mov	r0, r9
 80011b4:	f7ff ff5e 	bl	8001074 <DS18B20_DisableAlarmTemperature.part.0>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80011b8:	3601      	adds	r6, #1
 80011ba:	7823      	ldrb	r3, [r4, #0]
 80011bc:	b2f5      	uxtb	r5, r6
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d8dc      	bhi.n	800117c <Ds18b20_Init+0x84>
 80011c2:	e7f2      	b.n	80011aa <Ds18b20_Init+0xb2>
 80011c4:	220c      	movs	r2, #12
 80011c6:	4629      	mov	r1, r5
 80011c8:	4648      	mov	r0, r9
 80011ca:	f7ff fef1 	bl	8000fb0 <DS18B20_SetResolution.part.0>
 80011ce:	e7e0      	b.n	8001192 <Ds18b20_Init+0x9a>
 80011d0:	20000312 	.word	0x20000312
 80011d4:	20000320 	.word	0x20000320
 80011d8:	20000334 	.word	0x20000334
 80011dc:	20000324 	.word	0x20000324

080011e0 <Ds18b20_ManualConvert>:
	OneWire_Reset(OneWire);
 80011e0:	4831      	ldr	r0, [pc, #196]	; (80012a8 <Ds18b20_ManualConvert+0xc8>)
{
 80011e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 80011e6:	4e31      	ldr	r6, [pc, #196]	; (80012ac <Ds18b20_ManualConvert+0xcc>)
 80011e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 80011ec:	4604      	mov	r4, r0
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 80011ee:	8033      	strh	r3, [r6, #0]
	OneWire_Reset(OneWire);
 80011f0:	f000 fa94 	bl	800171c <OneWire_Reset>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 80011f4:	4620      	mov	r0, r4
 80011f6:	21cc      	movs	r1, #204	; 0xcc
 80011f8:	f000 fb04 	bl	8001804 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 80011fc:	4620      	mov	r0, r4
 80011fe:	2144      	movs	r1, #68	; 0x44
 8001200:	f000 fb00 	bl	8001804 <OneWire_WriteByte>
	Ds18b20Delay(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f001 f8d1 	bl	80023ac <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 800120a:	e006      	b.n	800121a <Ds18b20_ManualConvert+0x3a>
		Ds18b20Delay(10);  
 800120c:	f001 f8ce 	bl	80023ac <HAL_Delay>
		Ds18b20Timeout-=1;
 8001210:	8833      	ldrh	r3, [r6, #0]
 8001212:	3b01      	subs	r3, #1
 8001214:	b29b      	uxth	r3, r3
 8001216:	8033      	strh	r3, [r6, #0]
		if(Ds18b20Timeout==0)
 8001218:	b3a3      	cbz	r3, 8001284 <Ds18b20_ManualConvert+0xa4>
	return OneWire_ReadBit(OneWire);
 800121a:	4620      	mov	r0, r4
 800121c:	f000 faba 	bl	8001794 <OneWire_ReadBit>
 8001220:	4603      	mov	r3, r0
		Ds18b20Delay(10);  
 8001222:	200a      	movs	r0, #10
	while (!DS18B20_AllDone(&OneWire))
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f1      	beq.n	800120c <Ds18b20_ManualConvert+0x2c>
	if(Ds18b20Timeout>0)
 8001228:	8830      	ldrh	r0, [r6, #0]
 800122a:	b358      	cbz	r0, 8001284 <Ds18b20_ManualConvert+0xa4>
		for (uint8_t i = 0; i < TempSensorCount; i++)
 800122c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80012b0 <Ds18b20_ManualConvert+0xd0>
 8001230:	f898 3000 	ldrb.w	r3, [r8]
 8001234:	b363      	cbz	r3, 8001290 <Ds18b20_ManualConvert+0xb0>
 8001236:	2700      	movs	r7, #0
 8001238:	f8df a078 	ldr.w	sl, [pc, #120]	; 80012b4 <Ds18b20_ManualConvert+0xd4>
	if (!OneWire_ReadBit(OneWire))
 800123c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80012a8 <Ds18b20_ManualConvert+0xc8>
 8001240:	463c      	mov	r4, r7
 8001242:	e008      	b.n	8001256 <Ds18b20_ManualConvert+0x76>
		return false;
 8001244:	2000      	movs	r0, #0
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8001246:	f898 3000 	ldrb.w	r3, [r8]
 800124a:	3701      	adds	r7, #1
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 800124c:	4455      	add	r5, sl
		for (uint8_t i = 0; i < TempSensorCount; i++)
 800124e:	b2fc      	uxtb	r4, r7
 8001250:	42a3      	cmp	r3, r4
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8001252:	7328      	strb	r0, [r5, #12]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8001254:	d921      	bls.n	800129a <Ds18b20_ManualConvert+0xba>
			Ds18b20Delay(100);
 8001256:	0125      	lsls	r5, r4, #4
 8001258:	2064      	movs	r0, #100	; 0x64
 800125a:	f001 f8a7 	bl	80023ac <HAL_Delay>
	if (*ROM == DS18B20_FAMILY_CODE) 
 800125e:	f81a 3005 	ldrb.w	r3, [sl, r5]
 8001262:	2b28      	cmp	r3, #40	; 0x28
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8001264:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
	if (*ROM == DS18B20_FAMILY_CODE) 
 8001268:	d1ec      	bne.n	8001244 <Ds18b20_ManualConvert+0x64>
	if (!OneWire_ReadBit(OneWire))
 800126a:	4648      	mov	r0, r9
 800126c:	f000 fa92 	bl	8001794 <OneWire_ReadBit>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8001270:	f105 0208 	add.w	r2, r5, #8
	if (!OneWire_ReadBit(OneWire))
 8001274:	2800      	cmp	r0, #0
 8001276:	d0e5      	beq.n	8001244 <Ds18b20_ManualConvert+0x64>
 8001278:	4452      	add	r2, sl
 800127a:	4621      	mov	r1, r4
 800127c:	4648      	mov	r0, r9
 800127e:	f7ff fe1f 	bl	8000ec0 <DS18B20_Read.part.0>
 8001282:	e7e0      	b.n	8001246 <Ds18b20_ManualConvert+0x66>
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <Ds18b20_ManualConvert+0xd0>)
 8001286:	7818      	ldrb	r0, [r3, #0]
 8001288:	b110      	cbz	r0, 8001290 <Ds18b20_ManualConvert+0xb0>
			ds18b20[i].DataIsValid = false;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <Ds18b20_ManualConvert+0xd4>)
 800128c:	2000      	movs	r0, #0
 800128e:	7318      	strb	r0, [r3, #12]
}
 8001290:	3800      	subs	r0, #0
 8001292:	bf18      	it	ne
 8001294:	2001      	movne	r0, #1
 8001296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129a:	8830      	ldrh	r0, [r6, #0]
 800129c:	3800      	subs	r0, #0
 800129e:	bf18      	it	ne
 80012a0:	2001      	movne	r0, #1
 80012a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a6:	bf00      	nop
 80012a8:	20000334 	.word	0x20000334
 80012ac:	20000310 	.word	0x20000310
 80012b0:	20000312 	.word	0x20000312
 80012b4:	20000324 	.word	0x20000324

080012b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	2400      	movs	r4, #0
{
 80012bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80012c2:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_GPIO_Init+0x84>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012cc:	f042 0204 	orr.w	r2, r2, #4
 80012d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d4:	f002 0204 	and.w	r2, r2, #4
 80012d8:	9200      	str	r2, [sp, #0]
 80012da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	9301      	str	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|PDN_Pin|WAKEUP_Pin, GPIO_PIN_RESET);
 80012ec:	4622      	mov	r2, r4
 80012ee:	2161      	movs	r1, #97	; 0x61
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|PDN_Pin|WAKEUP_Pin, GPIO_PIN_RESET);
 80012f6:	f001 f9c9 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DS18B20_Pin|PDN_Pin|WAKEUP_Pin;
 80012fa:	2261      	movs	r2, #97	; 0x61
 80012fc:	2301      	movs	r3, #1
 80012fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = DS18B20_Pin|PDN_Pin|WAKEUP_Pin;
 8001304:	2200      	movs	r2, #0
 8001306:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = DS18B20_Pin|PDN_Pin|WAKEUP_Pin;
 800130c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f001 f8e2 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_GPIO_Init+0x88>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001318:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = INT_Pin;
 800131a:	2210      	movs	r2, #16
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800131c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = INT_Pin;
 8001320:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001324:	f001 f8d8 	bl	80024d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001328:	4622      	mov	r2, r4
 800132a:	4621      	mov	r1, r4
 800132c:	200a      	movs	r0, #10
 800132e:	f001 f873 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001332:	200a      	movs	r0, #10
 8001334:	f001 f8a8 	bl	8002488 <HAL_NVIC_EnableIRQ>

}
 8001338:	b008      	add	sp, #32
 800133a:	bd10      	pop	{r4, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	10310000 	.word	0x10310000

08001344 <BT4502_Init>:
#include "hm_bt4502.h"

uint8_t BT4502_Init(BT4502_t* BT4502)
{
 8001344:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(BT4502->PDN_GPIO, BT4502->PDN_GPIO_Pin, GPIO_PIN_SET);
 8001346:	8981      	ldrh	r1, [r0, #12]
{
 8001348:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(BT4502->PDN_GPIO, BT4502->PDN_GPIO_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	6880      	ldr	r0, [r0, #8]
 800134e:	f001 f99d 	bl	800268c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f001 f829 	bl	80023ac <HAL_Delay>
	HAL_GPIO_WritePin(BT4502->PDN_GPIO, BT4502->PDN_GPIO_Pin, GPIO_PIN_RESET);
 800135a:	89a1      	ldrh	r1, [r4, #12]
 800135c:	68a0      	ldr	r0, [r4, #8]
 800135e:	2200      	movs	r2, #0
 8001360:	f001 f994 	bl	800268c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BT4502->WAKEUP_GPIO, BT4502->WAKEUP_GPIO_Pin, GPIO_PIN_SET);
 8001364:	6920      	ldr	r0, [r4, #16]
 8001366:	8aa1      	ldrh	r1, [r4, #20]
 8001368:	2201      	movs	r2, #1
 800136a:	f001 f98f 	bl	800268c <HAL_GPIO_WritePin>
	BT4502->state = BT4502_State_Advertising;
 800136e:	2000      	movs	r0, #0
 8001370:	7720      	strb	r0, [r4, #28]

	return 0;
}
 8001372:	bd10      	pop	{r4, pc}

08001374 <BT4502_Send_Data>:

uint8_t BT4502_Send_Data(BT4502_t* BT4502, void* data, uint8_t length)
{
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
 800137a:	4616      	mov	r6, r2
	HAL_GPIO_WritePin(BT4502->WAKEUP_GPIO, BT4502->WAKEUP_GPIO_Pin, GPIO_PIN_RESET);
 800137c:	8a81      	ldrh	r1, [r0, #20]
 800137e:	6900      	ldr	r0, [r0, #16]
 8001380:	2200      	movs	r2, #0
 8001382:	f001 f983 	bl	800268c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f001 f810 	bl	80023ac <HAL_Delay>
	if(HAL_UART_Transmit(BT4502->huart, (uint8_t*)data, length, HAL_MAX_DELAY) != 0)
 800138c:	69a0      	ldr	r0, [r4, #24]
 800138e:	4632      	mov	r2, r6
 8001390:	4629      	mov	r1, r5
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	f002 fcdb 	bl	8003d50 <HAL_UART_Transmit>
 800139a:	b110      	cbz	r0, 80013a2 <BT4502_Send_Data+0x2e>
	{
		return 1;
 800139c:	2501      	movs	r5, #1
	}
	HAL_GPIO_WritePin(BT4502->WAKEUP_GPIO, BT4502->WAKEUP_GPIO_Pin, GPIO_PIN_SET);
	BT4502->state = BT4502_State_Data_Sent;
	return 0;
}
 800139e:	4628      	mov	r0, r5
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(BT4502->WAKEUP_GPIO, BT4502->WAKEUP_GPIO_Pin, GPIO_PIN_SET);
 80013a2:	4605      	mov	r5, r0
 80013a4:	8aa1      	ldrh	r1, [r4, #20]
 80013a6:	6920      	ldr	r0, [r4, #16]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f001 f96f 	bl	800268c <HAL_GPIO_WritePin>
	BT4502->state = BT4502_State_Data_Sent;
 80013ae:	2303      	movs	r3, #3
 80013b0:	7723      	strb	r3, [r4, #28]
}
 80013b2:	4628      	mov	r0, r5
 80013b4:	bd70      	pop	{r4, r5, r6, pc}
 80013b6:	bf00      	nop

080013b8 <BT4502_INT_Pin_Callback>:
{
	return BT4502_Send_Data(BT4502, (void *)string, strlen(string));
}

void BT4502_INT_Pin_Callback(BT4502_t* BT4502)
{
 80013b8:	b510      	push	{r4, lr}
 80013ba:	b084      	sub	sp, #16
	uint16_t number = 1;
	if(HAL_GPIO_ReadPin(BT4502->INT_GPIO, BT4502->INT_GPIO_Pin) == GPIO_PIN_SET)
 80013bc:	8881      	ldrh	r1, [r0, #4]
	uint16_t number = 1;
 80013be:	2301      	movs	r3, #1
{
 80013c0:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(BT4502->INT_GPIO, BT4502->INT_GPIO_Pin) == GPIO_PIN_SET)
 80013c2:	6800      	ldr	r0, [r0, #0]
	uint16_t number = 1;
 80013c4:	f8ad 300e 	strh.w	r3, [sp, #14]
	if(HAL_GPIO_ReadPin(BT4502->INT_GPIO, BT4502->INT_GPIO_Pin) == GPIO_PIN_SET)
 80013c8:	f001 f95a 	bl	8002680 <HAL_GPIO_ReadPin>
 80013cc:	2801      	cmp	r0, #1
 80013ce:	d102      	bne.n	80013d6 <BT4502_INT_Pin_Callback+0x1e>
	{
		BT4502->state = BT4502_State_Data_Received;
 80013d0:	7720      	strb	r0, [r4, #28]
	}
	else
	{
		HAL_UARTEx_ReceiveToIdle(BT4502->huart, BT4502->recv_buf, BT4502_MAX_SERIAL_DATA_PACKAGE, &number, HAL_MAX_DELAY);
	}
}
 80013d2:	b004      	add	sp, #16
 80013d4:	bd10      	pop	{r4, pc}
		HAL_UARTEx_ReceiveToIdle(BT4502->huart, BT4502->recv_buf, BT4502_MAX_SERIAL_DATA_PACKAGE, &number, HAL_MAX_DELAY);
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	69a0      	ldr	r0, [r4, #24]
 80013de:	f10d 030e 	add.w	r3, sp, #14
 80013e2:	22f0      	movs	r2, #240	; 0xf0
 80013e4:	f104 011d 	add.w	r1, r4, #29
 80013e8:	f002 fd50 	bl	8003e8c <HAL_UARTEx_ReceiveToIdle>
}
 80013ec:	b004      	add	sp, #16
 80013ee:	bd10      	pop	{r4, pc}

080013f0 <BT4502_Sleep>:

uint8_t BT4502_Sleep(BT4502_t* BT4502)
{
	if(BT4502->state != BT4502_State_Sleep)
 80013f0:	7f03      	ldrb	r3, [r0, #28]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d101      	bne.n	80013fa <BT4502_Sleep+0xa>
		BT4502->state = BT4502_State_Sleep;
		return 0;
	}
	else
	{
		return 1;
 80013f6:	2001      	movs	r0, #1
	}
}
 80013f8:	4770      	bx	lr
{
 80013fa:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(BT4502->PDN_GPIO, BT4502->PDN_GPIO_Pin, GPIO_PIN_SET);
 80013fc:	8981      	ldrh	r1, [r0, #12]
 80013fe:	4604      	mov	r4, r0
 8001400:	2201      	movs	r2, #1
 8001402:	6880      	ldr	r0, [r0, #8]
 8001404:	f001 f942 	bl	800268c <HAL_GPIO_WritePin>
		BT4502->state = BT4502_State_Sleep;
 8001408:	2304      	movs	r3, #4
 800140a:	7723      	strb	r3, [r4, #28]
		return 0;
 800140c:	2000      	movs	r0, #0
}
 800140e:	bd10      	pop	{r4, pc}

08001410 <BT4502_WakeUp>:

uint8_t BT4502_WakeUp(BT4502_t* BT4502)
{
	if(BT4502->state == BT4502_State_Sleep)
 8001410:	7f03      	ldrb	r3, [r0, #28]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d001      	beq.n	800141a <BT4502_WakeUp+0xa>
		BT4502->state = BT4502_State_Advertising;
		return 0;
	}
	else
	{
		return 1;
 8001416:	2001      	movs	r0, #1
	}
}
 8001418:	4770      	bx	lr
{
 800141a:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(BT4502->PDN_GPIO, BT4502->PDN_GPIO_Pin, GPIO_PIN_RESET);
 800141c:	8981      	ldrh	r1, [r0, #12]
 800141e:	4604      	mov	r4, r0
 8001420:	2200      	movs	r2, #0
 8001422:	6880      	ldr	r0, [r0, #8]
 8001424:	f001 f932 	bl	800268c <HAL_GPIO_WritePin>
		BT4502->state = BT4502_State_Advertising;
 8001428:	2000      	movs	r0, #0
 800142a:	7720      	strb	r0, [r4, #28]
}
 800142c:	bd10      	pop	{r4, pc}
 800142e:	bf00      	nop

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001434:	a806      	add	r0, sp, #24
 8001436:	2244      	movs	r2, #68	; 0x44
 8001438:	2100      	movs	r1, #0
 800143a:	f002 fe3b 	bl	80040b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143e:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001440:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	e9cd 3300 	strd	r3, r3, [sp]
 8001448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800144c:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800144e:	f001 f93f 	bl	80026d0 <HAL_PWREx_ControlVoltageScaling>
 8001452:	b108      	cbz	r0, 8001458 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001456:	e7fe      	b.n	8001456 <SystemClock_Config+0x26>
  HAL_PWR_EnableBkUpAccess();
 8001458:	4604      	mov	r4, r0
 800145a:	f001 f929 	bl	80026b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800145e:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <SystemClock_Config+0x84>)
 8001460:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001464:	f023 0318 	bic.w	r3, r3, #24
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800146c:	230e      	movs	r3, #14
 800146e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001470:	2210      	movs	r2, #16
 8001472:	2301      	movs	r3, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001476:	2601      	movs	r6, #1
 8001478:	f44f 7780 	mov.w	r7, #256	; 0x100
 800147c:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8001480:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001484:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001486:	f001 fa29 	bl	80028dc <HAL_RCC_OscConfig>
 800148a:	4601      	mov	r1, r0
 800148c:	b108      	cbz	r0, 8001492 <SystemClock_Config+0x62>
 800148e:	b672      	cpsid	i
  while (1)
 8001490:	e7fe      	b.n	8001490 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	240f      	movs	r4, #15
 8001494:	2501      	movs	r5, #1
 8001496:	2200      	movs	r2, #0
 8001498:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800149a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	e9cd 4500 	strd	r4, r5, [sp]
 80014a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014a6:	f001 fd2b 	bl	8002f00 <HAL_RCC_ClockConfig>
 80014aa:	b108      	cbz	r0, 80014b0 <SystemClock_Config+0x80>
 80014ac:	b672      	cpsid	i
  while (1)
 80014ae:	e7fe      	b.n	80014ae <SystemClock_Config+0x7e>
}
 80014b0:	b019      	add	sp, #100	; 0x64
 80014b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b4:	40021000 	.word	0x40021000

080014b8 <main>:
{
 80014b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_Init();
 80014bc:	f000 ff54 	bl	8002368 <HAL_Init>
  SystemClock_Config();
 80014c0:	f7ff ffb6 	bl	8001430 <SystemClock_Config>
  MX_RTC_Init();
 80014c4:	f000 fd5c 	bl	8001f80 <MX_RTC_Init>
  MX_GPIO_Init();
 80014c8:	f7ff fef6 	bl	80012b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80014cc:	f000 fe94 	bl	80021f8 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80014d0:	f000 fe52 	bl	8002178 <MX_TIM6_Init>
  BT4502_Init(&BT4502);
 80014d4:	483e      	ldr	r0, [pc, #248]	; (80015d0 <main+0x118>)
 80014d6:	f7ff ff35 	bl	8001344 <BT4502_Init>
  if(!Ds18b20_Init())
 80014da:	f7ff fe0d 	bl	80010f8 <Ds18b20_Init>
 80014de:	2800      	cmp	r0, #0
 80014e0:	d071      	beq.n	80015c6 <main+0x10e>
 80014e2:	4c3b      	ldr	r4, [pc, #236]	; (80015d0 <main+0x118>)
 80014e4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80015f0 <main+0x138>
 80014e8:	4e3a      	ldr	r6, [pc, #232]	; (80015d4 <main+0x11c>)
 80014ea:	4d3b      	ldr	r5, [pc, #236]	; (80015d8 <main+0x120>)
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (10000-1), 32000/16); //10000-1 to 5s
 80014ec:	4f3b      	ldr	r7, [pc, #236]	; (80015dc <main+0x124>)
		BT4502_Sleep(&BT4502);
 80014ee:	46a0      	mov	r8, r4
			BT4502_Send_Data(&BT4502, &ds18b20[0].Temperature, sizeof(ds18b20[0].Temperature));
 80014f0:	f109 0a08 	add.w	sl, r9, #8
 80014f4:	e00d      	b.n	8001512 <main+0x5a>
		bt_not_connected_count++;
 80014f6:	7833      	ldrb	r3, [r6, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2db      	uxtb	r3, r3
		if(bt_not_connected_count == 2)
 80014fc:	2b02      	cmp	r3, #2
		bt_not_connected_count++;
 80014fe:	7033      	strb	r3, [r6, #0]
		if(bt_not_connected_count == 2)
 8001500:	d01d      	beq.n	800153e <main+0x86>
	if(rtc_reset == 1)
 8001502:	782b      	ldrb	r3, [r5, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d024      	beq.n	8001552 <main+0x9a>
	HAL_SuspendTick();
 8001508:	f000 ff62 	bl	80023d0 <HAL_SuspendTick>
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800150c:	2001      	movs	r0, #1
 800150e:	f001 f927 	bl	8002760 <HAL_PWREx_EnterSTOP2Mode>
	Ds18b20_ManualConvert();
 8001512:	f7ff fe65 	bl	80011e0 <Ds18b20_ManualConvert>
	if(BT4502.state == BT4502_State_Advertising)
 8001516:	7f23      	ldrb	r3, [r4, #28]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ec      	beq.n	80014f6 <main+0x3e>
	if(BT4502.state == BT4502_State_Data_Received)
 800151c:	2b01      	cmp	r3, #1
 800151e:	d132      	bne.n	8001586 <main+0xce>
		if(strcmp((char *)BT4502.recv_buf, "TTM:CONNECT\r\n") == 0)
 8001520:	492f      	ldr	r1, [pc, #188]	; (80015e0 <main+0x128>)
 8001522:	4830      	ldr	r0, [pc, #192]	; (80015e4 <main+0x12c>)
 8001524:	f7fe fe54 	bl	80001d0 <strcmp>
 8001528:	b9e8      	cbnz	r0, 8001566 <main+0xae>
		memset(BT4502.recv_buf, '\0', sizeof(BT4502.recv_buf));
 800152a:	4601      	mov	r1, r0
			BT4502.state = BT4502_State_Connected;
 800152c:	2302      	movs	r3, #2
		memset(BT4502.recv_buf, '\0', sizeof(BT4502.recv_buf));
 800152e:	482d      	ldr	r0, [pc, #180]	; (80015e4 <main+0x12c>)
			BT4502.state = BT4502_State_Connected;
 8001530:	7723      	strb	r3, [r4, #28]
		memset(BT4502.recv_buf, '\0', sizeof(BT4502.recv_buf));
 8001532:	22f0      	movs	r2, #240	; 0xf0
 8001534:	f002 fdbe 	bl	80040b4 <memset>
		if(ds18b20[0].DataIsValid)
 8001538:	f899 300c 	ldrb.w	r3, [r9, #12]
 800153c:	bba3      	cbnz	r3, 80015a8 <main+0xf0>
			BT4502.state = BT4502_State_Data_Sent;
 800153e:	2303      	movs	r3, #3
 8001540:	7723      	strb	r3, [r4, #28]
		bt_not_connected_count = 0;
 8001542:	2300      	movs	r3, #0
		BT4502_Sleep(&BT4502);
 8001544:	4640      	mov	r0, r8
		bt_not_connected_count = 0;
 8001546:	7033      	strb	r3, [r6, #0]
		BT4502_Sleep(&BT4502);
 8001548:	f7ff ff52 	bl	80013f0 <BT4502_Sleep>
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800154c:	4638      	mov	r0, r7
 800154e:	f002 f87f 	bl	8003650 <HAL_RTCEx_DeactivateWakeUpTimer>
		rtc_reset = 0;
 8001552:	2300      	movs	r3, #0
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (10000-1), 32000/16); //10000-1 to 5s
 8001554:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001558:	f242 710f 	movw	r1, #9999	; 0x270f
 800155c:	4638      	mov	r0, r7
		rtc_reset = 0;
 800155e:	702b      	strb	r3, [r5, #0]
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (10000-1), 32000/16); //10000-1 to 5s
 8001560:	f002 f816 	bl	8003590 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001564:	e7d0      	b.n	8001508 <main+0x50>
		else if(strcmp((char *)BT4502.recv_buf, "TTM:DISCONNECT\r\n") == 0)
 8001566:	4920      	ldr	r1, [pc, #128]	; (80015e8 <main+0x130>)
 8001568:	481e      	ldr	r0, [pc, #120]	; (80015e4 <main+0x12c>)
 800156a:	f7fe fe31 	bl	80001d0 <strcmp>
 800156e:	b1a0      	cbz	r0, 800159a <main+0xe2>
		else if(strcmp((char *)BT4502.recv_buf, "TTM:DISCONNECT FOR TIMEOUT\r\n") == 0)
 8001570:	491e      	ldr	r1, [pc, #120]	; (80015ec <main+0x134>)
 8001572:	481c      	ldr	r0, [pc, #112]	; (80015e4 <main+0x12c>)
 8001574:	f7fe fe2c 	bl	80001d0 <strcmp>
 8001578:	b178      	cbz	r0, 800159a <main+0xe2>
		memset(BT4502.recv_buf, '\0', sizeof(BT4502.recv_buf));
 800157a:	22f0      	movs	r2, #240	; 0xf0
 800157c:	2100      	movs	r1, #0
 800157e:	4819      	ldr	r0, [pc, #100]	; (80015e4 <main+0x12c>)
 8001580:	f002 fd98 	bl	80040b4 <memset>
	else if(BT4502.state == BT4502_State_Sleep)
 8001584:	e7bd      	b.n	8001502 <main+0x4a>
	if(BT4502.state == BT4502_State_Connected)
 8001586:	2b02      	cmp	r3, #2
 8001588:	d0d6      	beq.n	8001538 <main+0x80>
	if(BT4502.state == BT4502_State_Data_Sent)
 800158a:	2b03      	cmp	r3, #3
 800158c:	d0d9      	beq.n	8001542 <main+0x8a>
	else if(BT4502.state == BT4502_State_Sleep)
 800158e:	2b04      	cmp	r3, #4
 8001590:	d1b7      	bne.n	8001502 <main+0x4a>
		BT4502_WakeUp(&BT4502);
 8001592:	4640      	mov	r0, r8
 8001594:	f7ff ff3c 	bl	8001410 <BT4502_WakeUp>
 8001598:	e7b3      	b.n	8001502 <main+0x4a>
				BT4502.state = BT4502_State_Advertising;
 800159a:	2100      	movs	r1, #0
		memset(BT4502.recv_buf, '\0', sizeof(BT4502.recv_buf));
 800159c:	22f0      	movs	r2, #240	; 0xf0
 800159e:	4811      	ldr	r0, [pc, #68]	; (80015e4 <main+0x12c>)
				BT4502.state = BT4502_State_Advertising;
 80015a0:	7721      	strb	r1, [r4, #28]
		memset(BT4502.recv_buf, '\0', sizeof(BT4502.recv_buf));
 80015a2:	f002 fd87 	bl	80040b4 <memset>
	if(BT4502.state == BT4502_State_Data_Sent)
 80015a6:	e7ac      	b.n	8001502 <main+0x4a>
			HAL_Delay(1000);
 80015a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ac:	f000 fefe 	bl	80023ac <HAL_Delay>
			BT4502_Send_Data(&BT4502, &ds18b20[0].Temperature, sizeof(ds18b20[0].Temperature));
 80015b0:	2204      	movs	r2, #4
 80015b2:	4651      	mov	r1, sl
 80015b4:	4640      	mov	r0, r8
 80015b6:	f7ff fedd 	bl	8001374 <BT4502_Send_Data>
			HAL_Delay(1000);
 80015ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015be:	f000 fef5 	bl	80023ac <HAL_Delay>
 80015c2:	7f23      	ldrb	r3, [r4, #28]
 80015c4:	e7e1      	b.n	800158a <main+0xd2>
}
 80015c6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ce:	bf00      	nop
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000313 	.word	0x20000313
 80015d8:	20000114 	.word	0x20000114
 80015dc:	20000348 	.word	0x20000348
 80015e0:	08006a80 	.word	0x08006a80
 80015e4:	2000001d 	.word	0x2000001d
 80015e8:	08006a90 	.word	0x08006a90
 80015ec:	08006aa4 	.word	0x08006aa4
 80015f0:	20000324 	.word	0x20000324

080015f4 <HAL_GPIO_EXTI_Callback>:
{
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	b099      	sub	sp, #100	; 0x64
 80015f8:	4605      	mov	r5, r0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	2244      	movs	r2, #68	; 0x44
 80015fc:	a806      	add	r0, sp, #24
 80015fe:	2100      	movs	r1, #0
 8001600:	f002 fd58 	bl	80040b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001606:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160a:	e9cd 3300 	strd	r3, r3, [sp]
 800160e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001612:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001614:	f001 f85c 	bl	80026d0 <HAL_PWREx_ControlVoltageScaling>
 8001618:	b108      	cbz	r0, 800161e <HAL_GPIO_EXTI_Callback+0x2a>
 800161a:	b672      	cpsid	i
  while (1)
 800161c:	e7fe      	b.n	800161c <HAL_GPIO_EXTI_Callback+0x28>
  HAL_PWR_EnableBkUpAccess();
 800161e:	4604      	mov	r4, r0
 8001620:	f001 f846 	bl	80026b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001624:	4a19      	ldr	r2, [pc, #100]	; (800168c <HAL_GPIO_EXTI_Callback+0x98>)
 8001626:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800162a:	f023 0318 	bic.w	r3, r3, #24
 800162e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001632:	230e      	movs	r3, #14
 8001634:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001636:	2210      	movs	r2, #16
 8001638:	2301      	movs	r3, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800163c:	2601      	movs	r6, #1
 800163e:	f44f 7780 	mov.w	r7, #256	; 0x100
 8001642:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8001646:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800164a:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f001 f946 	bl	80028dc <HAL_RCC_OscConfig>
 8001650:	4601      	mov	r1, r0
 8001652:	b108      	cbz	r0, 8001658 <HAL_GPIO_EXTI_Callback+0x64>
 8001654:	b672      	cpsid	i
  while (1)
 8001656:	e7fe      	b.n	8001656 <HAL_GPIO_EXTI_Callback+0x62>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	220f      	movs	r2, #15
 800165a:	2301      	movs	r3, #1
 800165c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001660:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	2200      	movs	r2, #0
 8001664:	2300      	movs	r3, #0
 8001666:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800166c:	f001 fc48 	bl	8002f00 <HAL_RCC_ClockConfig>
 8001670:	b108      	cbz	r0, 8001676 <HAL_GPIO_EXTI_Callback+0x82>
 8001672:	b672      	cpsid	i
  while (1)
 8001674:	e7fe      	b.n	8001674 <HAL_GPIO_EXTI_Callback+0x80>
	HAL_ResumeTick();
 8001676:	f000 feb3 	bl	80023e0 <HAL_ResumeTick>
	if(GPIO_Pin == BT4502.INT_GPIO_Pin)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_GPIO_EXTI_Callback+0x9c>)
 800167c:	8883      	ldrh	r3, [r0, #4]
 800167e:	42ab      	cmp	r3, r5
 8001680:	d001      	beq.n	8001686 <HAL_GPIO_EXTI_Callback+0x92>
}
 8001682:	b019      	add	sp, #100	; 0x64
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT4502_INT_Pin_Callback(&BT4502);
 8001686:	f7ff fe97 	bl	80013b8 <BT4502_INT_Pin_Callback>
}
 800168a:	e7fa      	b.n	8001682 <HAL_GPIO_EXTI_Callback+0x8e>
 800168c:	40021000 	.word	0x40021000
 8001690:	20000000 	.word	0x20000000

08001694 <HAL_RTCEx_WakeUpTimerEventCallback>:
{
 8001694:	b500      	push	{lr}
 8001696:	b083      	sub	sp, #12
 8001698:	9001      	str	r0, [sp, #4]
	SystemClock_Config();
 800169a:	f7ff fec9 	bl	8001430 <SystemClock_Config>
	HAL_ResumeTick();
 800169e:	f000 fe9f 	bl	80023e0 <HAL_ResumeTick>
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 80016a2:	9801      	ldr	r0, [sp, #4]
 80016a4:	f001 ffd4 	bl	8003650 <HAL_RTCEx_DeactivateWakeUpTimer>
	rtc_reset = 1;
 80016a8:	4b02      	ldr	r3, [pc, #8]	; (80016b4 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	b003      	add	sp, #12
 80016b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80016b4:	20000114 	.word	0x20000114

080016b8 <Error_Handler>:
 80016b8:	b672      	cpsid	i
  while (1)
 80016ba:	e7fe      	b.n	80016ba <Error_Handler+0x2>

080016bc <OneWire_Init>:
	gpinit.Pin = gp->GPIO_Pin;
	HAL_GPIO_Init(gp->GPIOx,&gpinit);

}
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	4604      	mov	r4, r0
 80016c0:	b086      	sub	sp, #24
 80016c2:	460e      	mov	r6, r1
 80016c4:	4615      	mov	r5, r2
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 80016c6:	4814      	ldr	r0, [pc, #80]	; (8001718 <OneWire_Init+0x5c>)
 80016c8:	f002 f890 	bl	80037ec <HAL_TIM_Base_Start>
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80016cc:	a901      	add	r1, sp, #4

	OneWireStruct->GPIOx = GPIOx;
 80016ce:	6026      	str	r6, [r4, #0]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80016d0:	4630      	mov	r0, r6
	gpinit.Pull = GPIO_NOPULL;
 80016d2:	2200      	movs	r2, #0
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d4:	2302      	movs	r3, #2
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80016d6:	80a5      	strh	r5, [r4, #4]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80016d8:	2611      	movs	r6, #17
	gpinit.Pull = GPIO_NOPULL;
 80016da:	e9cd 6202 	strd	r6, r2, [sp, #8]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	9304      	str	r3, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;
 80016e0:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80016e2:	f000 fef9 	bl	80024d8 <HAL_GPIO_Init>
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	88a2      	ldrh	r2, [r4, #4]
 80016ea:	619a      	str	r2, [r3, #24]
	ONEWIRE_OUTPUT(OneWireStruct);
	ONEWIRE_HIGH(OneWireStruct);
	OneWireDelay(1000);
 80016ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f0:	f000 fe5c 	bl	80023ac <HAL_Delay>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80016f4:	88a3      	ldrh	r3, [r4, #4]
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	041b      	lsls	r3, r3, #16
 80016fa:	6193      	str	r3, [r2, #24]
	ONEWIRE_LOW(OneWireStruct);
	OneWireDelay(1000);
 80016fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001700:	f000 fe54 	bl	80023ac <HAL_Delay>
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	88a2      	ldrh	r2, [r4, #4]
 8001708:	619a      	str	r2, [r3, #24]
	ONEWIRE_HIGH(OneWireStruct);
	OneWireDelay(2000);
 800170a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800170e:	f000 fe4d 	bl	80023ac <HAL_Delay>
}
 8001712:	b006      	add	sp, #24
 8001714:	bd70      	pop	{r4, r5, r6, pc}
 8001716:	bf00      	nop
 8001718:	2000036c 	.word	0x2000036c

0800171c <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 800171c:	b570      	push	{r4, r5, r6, lr}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 800171e:	8883      	ldrh	r3, [r0, #4]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001720:	4d1b      	ldr	r5, [pc, #108]	; (8001790 <OneWire_Reset+0x74>)
{
 8001722:	b086      	sub	sp, #24
 8001724:	4604      	mov	r4, r0
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001726:	6800      	ldr	r0, [r0, #0]
 8001728:	041a      	lsls	r2, r3, #16
 800172a:	6182      	str	r2, [r0, #24]
	gpinit.Pull = GPIO_NOPULL;
 800172c:	2600      	movs	r6, #0
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800172e:	2211      	movs	r2, #17
	gpinit.Pin = gp->GPIO_Pin;
 8001730:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001732:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001734:	2302      	movs	r3, #2
 8001736:	e9cd 6303 	strd	r6, r3, [sp, #12]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800173a:	9202      	str	r2, [sp, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800173c:	f000 fecc 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	625e      	str	r6, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001746:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 800174a:	d9fb      	bls.n	8001744 <OneWire_Reset+0x28>
	_DS18B20_TIMER.Instance->CNT = 0;
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001752:	2a14      	cmp	r2, #20
 8001754:	d9fc      	bls.n	8001750 <OneWire_Reset+0x34>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2202      	movs	r2, #2
	gpinit.Pin = gp->GPIO_Pin;	
 8001758:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800175a:	6820      	ldr	r0, [r4, #0]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800175c:	9204      	str	r2, [sp, #16]
	gpinit.Mode = GPIO_MODE_INPUT;
 800175e:	2600      	movs	r6, #0
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001760:	a901      	add	r1, sp, #4
	gpinit.Pull = GPIO_NOPULL;
 8001762:	e9cd 6602 	strd	r6, r6, [sp, #8]
	gpinit.Pin = gp->GPIO_Pin;	
 8001766:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001768:	f000 feb6 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800176c:	682a      	ldr	r2, [r5, #0]
 800176e:	6256      	str	r6, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001770:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001772:	2b46      	cmp	r3, #70	; 0x46
 8001774:	d9fc      	bls.n	8001770 <OneWire_Reset+0x54>
	ONEWIRE_DELAY(20);
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
	ONEWIRE_DELAY(70);
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001776:	88a1      	ldrh	r1, [r4, #4]
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	f000 ff81 	bl	8002680 <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 800177e:	682a      	ldr	r2, [r5, #0]
 8001780:	2300      	movs	r3, #0
 8001782:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001784:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001786:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800178a:	d9fb      	bls.n	8001784 <OneWire_Reset+0x68>
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
}
 800178c:	b006      	add	sp, #24
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	2000036c 	.word	0x2000036c

08001794 <OneWire_ReadBit>:
	}

}

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8001794:	b570      	push	{r4, r5, r6, lr}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001796:	8883      	ldrh	r3, [r0, #4]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001798:	4d19      	ldr	r5, [pc, #100]	; (8001800 <OneWire_ReadBit+0x6c>)
{
 800179a:	b086      	sub	sp, #24
 800179c:	4604      	mov	r4, r0
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 800179e:	6800      	ldr	r0, [r0, #0]
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	6182      	str	r2, [r0, #24]
	gpinit.Pull = GPIO_NOPULL;
 80017a4:	2600      	movs	r6, #0
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80017a6:	2211      	movs	r2, #17
	gpinit.Pin = gp->GPIO_Pin;
 80017a8:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80017aa:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ac:	2302      	movs	r3, #2
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80017ae:	9202      	str	r2, [sp, #8]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b0:	e9cd 6303 	strd	r6, r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80017b4:	f000 fe90 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80017b8:	682a      	ldr	r2, [r5, #0]
 80017ba:	6256      	str	r6, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80017bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d9fc      	bls.n	80017bc <OneWire_ReadBit+0x28>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c2:	2202      	movs	r2, #2
	gpinit.Pin = gp->GPIO_Pin;	
 80017c4:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80017c6:	6820      	ldr	r0, [r4, #0]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c8:	9204      	str	r2, [sp, #16]
	gpinit.Mode = GPIO_MODE_INPUT;
 80017ca:	2600      	movs	r6, #0
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80017cc:	a901      	add	r1, sp, #4
	gpinit.Pull = GPIO_NOPULL;
 80017ce:	e9cd 6602 	strd	r6, r6, [sp, #8]
	gpinit.Pin = gp->GPIO_Pin;	
 80017d2:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80017d4:	f000 fe80 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80017d8:	682a      	ldr	r2, [r5, #0]
 80017da:	6256      	str	r6, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80017dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d9fc      	bls.n	80017dc <OneWire_ReadBit+0x48>
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
	ONEWIRE_DELAY(10);
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80017e2:	88a1      	ldrh	r1, [r4, #4]
 80017e4:	6820      	ldr	r0, [r4, #0]
 80017e6:	f000 ff4b 	bl	8002680 <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	682a      	ldr	r2, [r5, #0]
	uint8_t bit = 0;
 80017ee:	1ac0      	subs	r0, r0, r3
 80017f0:	bf18      	it	ne
 80017f2:	2001      	movne	r0, #1
	_DS18B20_TIMER.Instance->CNT = 0;
 80017f4:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80017f6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017f8:	2b32      	cmp	r3, #50	; 0x32
 80017fa:	d9fc      	bls.n	80017f6 <OneWire_ReadBit+0x62>
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
	
	/* Return bit value */
	return bit;
}
 80017fc:	b006      	add	sp, #24
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
 8001800:	2000036c 	.word	0x2000036c

08001804 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8001804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001808:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80018c0 <OneWire_WriteByte+0xbc>
 800180c:	b087      	sub	sp, #28
 800180e:	4604      	mov	r4, r0
 8001810:	460f      	mov	r7, r1
 8001812:	2608      	movs	r6, #8
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001814:	f04f 0a11 	mov.w	sl, #17
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001818:	f04f 0802 	mov.w	r8, #2
	gpinit.Mode = GPIO_MODE_INPUT;
 800181c:	2500      	movs	r5, #0
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 800181e:	88a3      	ldrh	r3, [r4, #4]
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	041a      	lsls	r2, r3, #16
	if (bit) 
 8001824:	f017 0b01 	ands.w	fp, r7, #1
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001828:	6182      	str	r2, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800182a:	a901      	add	r1, sp, #4
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800182c:	e9cd 3a01 	strd	r3, sl, [sp, #4]
	if (bit) 
 8001830:	d02a      	beq.n	8001888 <OneWire_WriteByte+0x84>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	e9cd 5803 	strd	r5, r8, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001836:	f000 fe4f 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800183a:	f8d9 2000 	ldr.w	r2, [r9]
 800183e:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001840:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d9fc      	bls.n	8001840 <OneWire_WriteByte+0x3c>
	gpinit.Pin = gp->GPIO_Pin;	
 8001846:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001848:	6820      	ldr	r0, [r4, #0]
	gpinit.Mode = GPIO_MODE_INPUT;
 800184a:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800184c:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	e9cd 5803 	strd	r5, r8, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;	
 8001852:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001854:	f000 fe40 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001858:	f8d9 2000 	ldr.w	r2, [r9]
 800185c:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800185e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001860:	2b37      	cmp	r3, #55	; 0x37
 8001862:	d9fc      	bls.n	800185e <OneWire_WriteByte+0x5a>
	gpinit.Pin = gp->GPIO_Pin;	
 8001864:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001866:	6820      	ldr	r0, [r4, #0]
	gpinit.Pin = gp->GPIO_Pin;	
 8001868:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800186a:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800186c:	e9cd 5803 	strd	r5, r8, [sp, #12]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001870:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001872:	f000 fe31 	bl	80024d8 <HAL_GPIO_Init>
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
 8001876:	1e73      	subs	r3, r6, #1
	while (i--) {
 8001878:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
		byte >>= 1;
 800187c:	ea4f 0757 	mov.w	r7, r7, lsr #1
	while (i--) {
 8001880:	d1cd      	bne.n	800181e <OneWire_WriteByte+0x1a>
	}
}
 8001882:	b007      	add	sp, #28
 8001884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001888:	e9cd b803 	strd	fp, r8, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800188c:	f000 fe24 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001890:	f8d9 2000 	ldr.w	r2, [r9]
 8001894:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001898:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800189a:	2b41      	cmp	r3, #65	; 0x41
 800189c:	d9fc      	bls.n	8001898 <OneWire_WriteByte+0x94>
	gpinit.Pin = gp->GPIO_Pin;	
 800189e:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80018a0:	6820      	ldr	r0, [r4, #0]
	gpinit.Mode = GPIO_MODE_INPUT;
 80018a2:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80018a4:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a6:	e9cd 5803 	strd	r5, r8, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;	
 80018aa:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80018ac:	f000 fe14 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80018b0:	f8d9 2000 	ldr.w	r2, [r9]
 80018b4:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80018b6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d9fc      	bls.n	80018b6 <OneWire_WriteByte+0xb2>
 80018bc:	e7d2      	b.n	8001864 <OneWire_WriteByte+0x60>
 80018be:	bf00      	nop
 80018c0:	2000036c 	.word	0x2000036c

080018c4 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80018c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t i = 8, byte = 0;
 80018c8:	2700      	movs	r7, #0
 80018ca:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001950 <OneWire_ReadByte+0x8c>
uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80018ce:	b086      	sub	sp, #24
 80018d0:	4604      	mov	r4, r0
	gpinit.Pull = GPIO_NOPULL;
 80018d2:	463d      	mov	r5, r7
uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80018d4:	2608      	movs	r6, #8
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80018d6:	f04f 0a11 	mov.w	sl, #17
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80018da:	f04f 0902 	mov.w	r9, #2
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80018de:	88a2      	ldrh	r2, [r4, #4]
 80018e0:	6820      	ldr	r0, [r4, #0]
 80018e2:	0411      	lsls	r1, r2, #16
 80018e4:	6181      	str	r1, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80018e6:	a901      	add	r1, sp, #4
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80018e8:	e9cd 2a01 	strd	r2, sl, [sp, #4]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ec:	e9cd 5903 	strd	r5, r9, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80018f0:	f000 fdf2 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80018f4:	f8d8 3000 	ldr.w	r3, [r8]
	while (i--) {
		byte >>= 1;
 80018f8:	087f      	lsrs	r7, r7, #1
	_DS18B20_TIMER.Instance->CNT = 0;
 80018fa:	625d      	str	r5, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80018fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fe:	2a02      	cmp	r2, #2
 8001900:	d9fc      	bls.n	80018fc <OneWire_ReadByte+0x38>
	gpinit.Pin = gp->GPIO_Pin;	
 8001902:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001904:	6820      	ldr	r0, [r4, #0]
	gpinit.Pin = gp->GPIO_Pin;	
 8001906:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001908:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800190a:	e9cd 5903 	strd	r5, r9, [sp, #12]
	gpinit.Mode = GPIO_MODE_INPUT;
 800190e:	9502      	str	r5, [sp, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001910:	f000 fde2 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001914:	f8d8 3000 	ldr.w	r3, [r8]
 8001918:	625d      	str	r5, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800191a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191c:	2a0a      	cmp	r2, #10
 800191e:	d9fc      	bls.n	800191a <OneWire_ReadByte+0x56>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001920:	88a1      	ldrh	r1, [r4, #4]
 8001922:	6820      	ldr	r0, [r4, #0]
 8001924:	f000 feac 	bl	8002680 <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001928:	f8d8 3000 	ldr.w	r3, [r8]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800192c:	3800      	subs	r0, #0
 800192e:	bf18      	it	ne
 8001930:	2001      	movne	r0, #1
	_DS18B20_TIMER.Instance->CNT = 0;
 8001932:	625d      	str	r5, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001936:	2a32      	cmp	r2, #50	; 0x32
 8001938:	d9fc      	bls.n	8001934 <OneWire_ReadByte+0x70>
	return bit;
 800193a:	3e01      	subs	r6, #1
	while (i--) {
 800193c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001940:	ea47 17c0 	orr.w	r7, r7, r0, lsl #7
	while (i--) {
 8001944:	d1cb      	bne.n	80018de <OneWire_ReadByte+0x1a>
	}
	
	return byte;
}
 8001946:	4638      	mov	r0, r7
 8001948:	b006      	add	sp, #24
 800194a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800194e:	bf00      	nop
 8001950:	2000036c 	.word	0x2000036c

08001954 <OneWire_Search>:
	OneWireStruct->LastDiscrepancy = 0;
	OneWireStruct->LastDeviceFlag = 0;
	OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8001954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8001958:	7a05      	ldrb	r5, [r0, #8]
uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	4683      	mov	fp, r0
	if (!OneWireStruct->LastDeviceFlag)
 800195e:	b13d      	cbz	r5, 8001970 <OneWire_Search+0x1c>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8001960:	2000      	movs	r0, #0
 8001962:	f8ab 0006 	strh.w	r0, [fp, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8001966:	f88b 0008 	strb.w	r0, [fp, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 800196a:	b009      	add	sp, #36	; 0x24
 800196c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001970:	8882      	ldrh	r2, [r0, #4]
 8001972:	6800      	ldr	r0, [r0, #0]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001974:	4cb2      	ldr	r4, [pc, #712]	; (8001c40 <OneWire_Search+0x2ec>)
 8001976:	460e      	mov	r6, r1
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001978:	0411      	lsls	r1, r2, #16
 800197a:	6181      	str	r1, [r0, #24]
	gpinit.Pin = gp->GPIO_Pin;
 800197c:	9203      	str	r2, [sp, #12]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800197e:	2211      	movs	r2, #17
 8001980:	e9cd 2504 	strd	r2, r5, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001984:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001986:	2202      	movs	r2, #2
 8001988:	9206      	str	r2, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800198a:	f000 fda5 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800198e:	6822      	ldr	r2, [r4, #0]
 8001990:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001992:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001994:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8001998:	d9fb      	bls.n	8001992 <OneWire_Search+0x3e>
	_DS18B20_TIMER.Instance->CNT = 0;
 800199a:	2100      	movs	r1, #0
 800199c:	6251      	str	r1, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800199e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80019a0:	2914      	cmp	r1, #20
 80019a2:	d9fc      	bls.n	800199e <OneWire_Search+0x4a>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	2102      	movs	r1, #2
	gpinit.Pin = gp->GPIO_Pin;	
 80019a6:	f8bb 2004 	ldrh.w	r2, [fp, #4]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80019aa:	9106      	str	r1, [sp, #24]
	gpinit.Mode = GPIO_MODE_INPUT;
 80019ac:	2500      	movs	r5, #0
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80019ae:	a903      	add	r1, sp, #12
 80019b0:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Pin = gp->GPIO_Pin;	
 80019b4:	9203      	str	r2, [sp, #12]
	gpinit.Pull = GPIO_NOPULL;
 80019b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80019ba:	f000 fd8d 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80019be:	6821      	ldr	r1, [r4, #0]
 80019c0:	624d      	str	r5, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80019c2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80019c4:	2a46      	cmp	r2, #70	; 0x46
 80019c6:	d9fc      	bls.n	80019c2 <OneWire_Search+0x6e>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 80019c8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80019cc:	f8db 0000 	ldr.w	r0, [fp]
 80019d0:	f000 fe56 	bl	8002680 <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 80019d4:	6821      	ldr	r1, [r4, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	624a      	str	r2, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80019da:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80019dc:	f5b2 7fcd 	cmp.w	r2, #410	; 0x19a
 80019e0:	d9fb      	bls.n	80019da <OneWire_Search+0x86>
		if (OneWire_Reset(OneWireStruct)) 
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d1bc      	bne.n	8001960 <OneWire_Search+0xc>
 80019e6:	2308      	movs	r3, #8
	gpinit.Mode = GPIO_MODE_INPUT;
 80019e8:	4605      	mov	r5, r0
 80019ea:	9301      	str	r3, [sp, #4]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80019ec:	f04f 0811 	mov.w	r8, #17
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f0:	2702      	movs	r7, #2
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80019f2:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 80019f6:	f8db 0000 	ldr.w	r0, [fp]
 80019fa:	0411      	lsls	r1, r2, #16
	if (bit) 
 80019fc:	f016 0901 	ands.w	r9, r6, #1
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001a00:	6181      	str	r1, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001a02:	e9cd 2803 	strd	r2, r8, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a06:	a903      	add	r1, sp, #12
	if (bit) 
 8001a08:	f000 80ff 	beq.w	8001c0a <OneWire_Search+0x2b6>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0c:	e9cd 5705 	strd	r5, r7, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a10:	f000 fd62 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001a14:	6821      	ldr	r1, [r4, #0]
 8001a16:	624d      	str	r5, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001a18:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001a1a:	2a0a      	cmp	r2, #10
 8001a1c:	d9fc      	bls.n	8001a18 <OneWire_Search+0xc4>
	gpinit.Pin = gp->GPIO_Pin;	
 8001a1e:	f8bb 2004 	ldrh.w	r2, [fp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a22:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001a26:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a28:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2a:	e9cd 5705 	strd	r5, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001a2e:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a30:	f000 fd52 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001a34:	6821      	ldr	r1, [r4, #0]
 8001a36:	624d      	str	r5, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001a38:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001a3a:	2a37      	cmp	r2, #55	; 0x37
 8001a3c:	d9fc      	bls.n	8001a38 <OneWire_Search+0xe4>
	gpinit.Pin = gp->GPIO_Pin;	
 8001a3e:	f8bb 2004 	ldrh.w	r2, [fp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a42:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001a46:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a48:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4a:	e9cd 5705 	strd	r5, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001a4e:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a50:	f000 fd42 	bl	80024d8 <HAL_GPIO_Init>
		byte >>= 1;
 8001a54:	9b01      	ldr	r3, [sp, #4]
 8001a56:	f103 3aff 	add.w	sl, r3, #4294967295
	while (i--) {
 8001a5a:	f01a 03ff 	ands.w	r3, sl, #255	; 0xff
		byte >>= 1;
 8001a5e:	ea4f 0656 	mov.w	r6, r6, lsr #1
	while (i--) {
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	d1c5      	bne.n	80019f2 <OneWire_Search+0x9e>
	rom_byte_mask = 1;
 8001a66:	2601      	movs	r6, #1
	id_bit_number = 1;
 8001a68:	9600      	str	r6, [sp, #0]
	rom_byte_number = 0;
 8001a6a:	461f      	mov	r7, r3
 8001a6c:	4698      	mov	r8, r3
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001a6e:	f04f 0a11 	mov.w	sl, #17
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a72:	2502      	movs	r5, #2
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001a74:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8001a78:	f8db 0000 	ldr.w	r0, [fp]
 8001a7c:	0419      	lsls	r1, r3, #16
 8001a7e:	6181      	str	r1, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a80:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001a82:	e9cd 3a03 	strd	r3, sl, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a86:	e9cd 7505 	strd	r7, r5, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a8a:	f000 fd25 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001a8e:	6821      	ldr	r1, [r4, #0]
 8001a90:	624f      	str	r7, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001a92:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001a94:	2802      	cmp	r0, #2
 8001a96:	d9fc      	bls.n	8001a92 <OneWire_Search+0x13e>
	gpinit.Pin = gp->GPIO_Pin;	
 8001a98:	f8bb 3004 	ldrh.w	r3, [fp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001a9c:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001aa0:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001aa2:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	e9cd 7505 	strd	r7, r5, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001aa8:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001aaa:	f000 fd15 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001aae:	6821      	ldr	r1, [r4, #0]
 8001ab0:	624f      	str	r7, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001ab2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001ab4:	280a      	cmp	r0, #10
 8001ab6:	d9fc      	bls.n	8001ab2 <OneWire_Search+0x15e>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001ab8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8001abc:	f8db 0000 	ldr.w	r0, [fp]
 8001ac0:	f000 fdde 	bl	8002680 <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001ac4:	6821      	ldr	r1, [r4, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001ac6:	4681      	mov	r9, r0
	_DS18B20_TIMER.Instance->CNT = 0;
 8001ac8:	624f      	str	r7, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001aca:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001acc:	2832      	cmp	r0, #50	; 0x32
 8001ace:	d9fc      	bls.n	8001aca <OneWire_Search+0x176>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001ad0:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8001ad4:	f8db 0000 	ldr.w	r0, [fp]
 8001ad8:	0419      	lsls	r1, r3, #16
 8001ada:	6181      	str	r1, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001adc:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001ade:	e9cd 3a03 	strd	r3, sl, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae2:	e9cd 7505 	strd	r7, r5, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001ae6:	f000 fcf7 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001aea:	6821      	ldr	r1, [r4, #0]
 8001aec:	624f      	str	r7, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001aee:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001af0:	2802      	cmp	r0, #2
 8001af2:	d9fc      	bls.n	8001aee <OneWire_Search+0x19a>
	gpinit.Pin = gp->GPIO_Pin;	
 8001af4:	f8bb 3004 	ldrh.w	r3, [fp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001af8:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001afc:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001afe:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b00:	e9cd 7505 	strd	r7, r5, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001b04:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001b06:	f000 fce7 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001b0a:	6821      	ldr	r1, [r4, #0]
 8001b0c:	624f      	str	r7, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001b0e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001b10:	280a      	cmp	r0, #10
 8001b12:	d9fc      	bls.n	8001b0e <OneWire_Search+0x1ba>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001b14:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8001b18:	f8db 0000 	ldr.w	r0, [fp]
 8001b1c:	f000 fdb0 	bl	8002680 <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001b20:	6821      	ldr	r1, [r4, #0]
 8001b22:	624f      	str	r7, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001b24:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001b26:	2b32      	cmp	r3, #50	; 0x32
 8001b28:	d9fc      	bls.n	8001b24 <OneWire_Search+0x1d0>
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8001b2a:	f1b9 0f00 	cmp.w	r9, #0
 8001b2e:	f040 8089 	bne.w	8001c44 <OneWire_Search+0x2f0>
				if (id_bit != cmp_id_bit) {
 8001b32:	2800      	cmp	r0, #0
 8001b34:	f040 80b0 	bne.w	8001c98 <OneWire_Search+0x344>
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8001b38:	f89b 1006 	ldrb.w	r1, [fp, #6]
 8001b3c:	9b00      	ldr	r3, [sp, #0]
 8001b3e:	4299      	cmp	r1, r3
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001b40:	eb0b 0008 	add.w	r0, fp, r8
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8001b44:	f240 80af 	bls.w	8001ca6 <OneWire_Search+0x352>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001b48:	7a41      	ldrb	r1, [r0, #9]
 8001b4a:	4231      	tst	r1, r6
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
					if (search_direction == 0) {
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d17b      	bne.n	8001c4e <OneWire_Search+0x2fa>
						if (last_zero < 9) {
 8001b56:	9b00      	ldr	r3, [sp, #0]
 8001b58:	2b08      	cmp	r3, #8
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8001b5a:	ea21 0106 	bic.w	r1, r1, r6
						if (last_zero < 9) {
 8001b5e:	f200 80a7 	bhi.w	8001cb0 <OneWire_Search+0x35c>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8001b62:	f88b 3007 	strb.w	r3, [fp, #7]
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	7241      	strb	r1, [r0, #9]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001b6a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8001b6e:	f8db 0000 	ldr.w	r0, [fp]
 8001b72:	0419      	lsls	r1, r3, #16
 8001b74:	6181      	str	r1, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001b76:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001b78:	e9cd 3a03 	strd	r3, sl, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7c:	e9cd 7505 	strd	r7, r5, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001b80:	f000 fcaa 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001b84:	6820      	ldr	r0, [r4, #0]
 8001b86:	6247      	str	r7, [r0, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001b88:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001b8a:	2941      	cmp	r1, #65	; 0x41
 8001b8c:	d9fc      	bls.n	8001b88 <OneWire_Search+0x234>
	gpinit.Pin = gp->GPIO_Pin;	
 8001b8e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001b92:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001b96:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001b98:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9a:	e9cd 7505 	strd	r7, r5, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001b9e:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001ba0:	f000 fc9a 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001ba4:	6820      	ldr	r0, [r4, #0]
 8001ba6:	6247      	str	r7, [r0, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001ba8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001baa:	2905      	cmp	r1, #5
 8001bac:	d9fc      	bls.n	8001ba8 <OneWire_Search+0x254>
	gpinit.Pin = gp->GPIO_Pin;	
 8001bae:	f8bb 3004 	ldrh.w	r3, [fp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001bb2:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Pin = gp->GPIO_Pin;	
 8001bb6:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001bb8:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bba:	e9cd 7505 	strd	r7, r5, [sp, #20]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001bbe:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001bc0:	f000 fc8a 	bl	80024d8 <HAL_GPIO_Init>
				id_bit_number++;
 8001bc4:	9b00      	ldr	r3, [sp, #0]
				rom_byte_mask <<= 1;
 8001bc6:	0076      	lsls	r6, r6, #1
				id_bit_number++;
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2db      	uxtb	r3, r3
				if (rom_byte_mask == 0) {
 8001bcc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
				id_bit_number++;
 8001bd0:	9300      	str	r3, [sp, #0]
				if (rom_byte_mask == 0) {
 8001bd2:	d104      	bne.n	8001bde <OneWire_Search+0x28a>
					rom_byte_number++;
 8001bd4:	f108 0801 	add.w	r8, r8, #1
 8001bd8:	fa5f f888 	uxtb.w	r8, r8
					rom_byte_mask = 1;
 8001bdc:	2601      	movs	r6, #1
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8001bde:	f1b8 0f07 	cmp.w	r8, #7
 8001be2:	f67f af47 	bls.w	8001a74 <OneWire_Search+0x120>
		if (!(id_bit_number < 65)) {
 8001be6:	9b00      	ldr	r3, [sp, #0]
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	f67f aeb9 	bls.w	8001960 <OneWire_Search+0xc>
			OneWireStruct->LastDiscrepancy = last_zero;
 8001bee:	9b01      	ldr	r3, [sp, #4]
 8001bf0:	f88b 3006 	strb.w	r3, [fp, #6]
			if (OneWireStruct->LastDiscrepancy == 0) {
 8001bf4:	b913      	cbnz	r3, 8001bfc <OneWire_Search+0x2a8>
				OneWireStruct->LastDeviceFlag = 1;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f88b 2008 	strb.w	r2, [fp, #8]
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8001bfc:	f89b 2009 	ldrb.w	r2, [fp, #9]
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	f43f aead 	beq.w	8001960 <OneWire_Search+0xc>
			search_result = 1;
 8001c06:	2001      	movs	r0, #1
 8001c08:	e6af      	b.n	800196a <OneWire_Search+0x16>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0a:	e9cd 9705 	strd	r9, r7, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c0e:	f000 fc63 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001c12:	6821      	ldr	r1, [r4, #0]
 8001c14:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001c18:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001c1a:	2a41      	cmp	r2, #65	; 0x41
 8001c1c:	d9fc      	bls.n	8001c18 <OneWire_Search+0x2c4>
	gpinit.Pin = gp->GPIO_Pin;	
 8001c1e:	f8bb 2004 	ldrh.w	r2, [fp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c22:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001c26:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c28:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2a:	e9cd 5705 	strd	r5, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001c2e:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c30:	f000 fc52 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001c34:	6821      	ldr	r1, [r4, #0]
 8001c36:	624d      	str	r5, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001c38:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001c3a:	2a05      	cmp	r2, #5
 8001c3c:	d9fc      	bls.n	8001c38 <OneWire_Search+0x2e4>
 8001c3e:	e6fe      	b.n	8001a3e <OneWire_Search+0xea>
 8001c40:	2000036c 	.word	0x2000036c
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d1ce      	bne.n	8001be6 <OneWire_Search+0x292>
 8001c48:	eb0b 0008 	add.w	r0, fp, r8
 8001c4c:	7a41      	ldrb	r1, [r0, #9]
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8001c4e:	4331      	orrs	r1, r6
 8001c50:	7241      	strb	r1, [r0, #9]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001c52:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8001c56:	f8db 0000 	ldr.w	r0, [fp]
 8001c5a:	0419      	lsls	r1, r3, #16
 8001c5c:	6181      	str	r1, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c5e:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001c60:	e9cd 3a03 	strd	r3, sl, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c64:	e9cd 7505 	strd	r7, r5, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c68:	f000 fc36 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	6247      	str	r7, [r0, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001c70:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001c72:	290a      	cmp	r1, #10
 8001c74:	d9fc      	bls.n	8001c70 <OneWire_Search+0x31c>
	gpinit.Pin = gp->GPIO_Pin;	
 8001c76:	f8bb 3004 	ldrh.w	r3, [fp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c7a:	f8db 0000 	ldr.w	r0, [fp]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001c7e:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c80:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c82:	e9cd 7505 	strd	r7, r5, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001c86:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001c88:	f000 fc26 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001c8c:	6820      	ldr	r0, [r4, #0]
 8001c8e:	6247      	str	r7, [r0, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001c90:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001c92:	2937      	cmp	r1, #55	; 0x37
 8001c94:	d9fc      	bls.n	8001c90 <OneWire_Search+0x33c>
 8001c96:	e78a      	b.n	8001bae <OneWire_Search+0x25a>
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8001c98:	eb0b 0008 	add.w	r0, fp, r8
 8001c9c:	7a41      	ldrb	r1, [r0, #9]
 8001c9e:	ea21 0106 	bic.w	r1, r1, r6
 8001ca2:	7241      	strb	r1, [r0, #9]
	if (bit) 
 8001ca4:	e761      	b.n	8001b6a <OneWire_Search+0x216>
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8001ca6:	7a41      	ldrb	r1, [r0, #9]
 8001ca8:	bf0c      	ite	eq
 8001caa:	2301      	moveq	r3, #1
 8001cac:	2300      	movne	r3, #0
 8001cae:	e750      	b.n	8001b52 <OneWire_Search+0x1fe>
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8001cb0:	7241      	strb	r1, [r0, #9]
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	e759      	b.n	8001b6a <OneWire_Search+0x216>
 8001cb6:	bf00      	nop

08001cb8 <OneWire_First>:
	OneWireStruct->LastDiscrepancy = 0;
 8001cb8:	2200      	movs	r2, #0
 8001cba:	80c2      	strh	r2, [r0, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8001cbc:	7202      	strb	r2, [r0, #8]
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8001cbe:	21f0      	movs	r1, #240	; 0xf0
 8001cc0:	f7ff be48 	b.w	8001954 <OneWire_Search>

08001cc4 <OneWire_Next>:
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8001cc4:	21f0      	movs	r1, #240	; 0xf0
 8001cc6:	f7ff be45 	b.w	8001954 <OneWire_Search>
 8001cca:	bf00      	nop

08001ccc <OneWire_Select>:

uint8_t OneWire_GetROM(OneWire_t* OneWireStruct, uint8_t index) {
	return OneWireStruct->ROM_NO[index];
}

void OneWire_Select(OneWire_t* OneWireStruct, uint8_t* addr) {
 8001ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd0:	b089      	sub	sp, #36	; 0x24
 8001cd2:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001e80 <OneWire_Select+0x1b4>
 8001cd6:	9100      	str	r1, [sp, #0]
 8001cd8:	4604      	mov	r4, r0
 8001cda:	2508      	movs	r5, #8
 8001cdc:	2655      	movs	r6, #85	; 0x55
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001cde:	f04f 0911 	mov.w	r9, #17
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce2:	2702      	movs	r7, #2
	gpinit.Mode = GPIO_MODE_INPUT;
 8001ce4:	f04f 0a00 	mov.w	sl, #0
	if (bit) 
 8001ce8:	f016 0b01 	ands.w	fp, r6, #1
 8001cec:	f000 80a3 	beq.w	8001e36 <OneWire_Select+0x16a>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001cf0:	88a3      	ldrh	r3, [r4, #4]
 8001cf2:	6820      	ldr	r0, [r4, #0]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	6182      	str	r2, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001cf8:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001cfa:	e9cd 3903 	strd	r3, r9, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfe:	e9cd a705 	strd	sl, r7, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d02:	f000 fbe9 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001d06:	f8d8 2000 	ldr.w	r2, [r8]
 8001d0a:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001d0e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001d10:	2b0a      	cmp	r3, #10
 8001d12:	d9fc      	bls.n	8001d0e <OneWire_Select+0x42>
	gpinit.Pin = gp->GPIO_Pin;	
 8001d14:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d16:	6820      	ldr	r0, [r4, #0]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001d18:	f8cd a010 	str.w	sl, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d1c:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1e:	e9cd a705 	strd	sl, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001d22:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d24:	f000 fbd8 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001d28:	f8d8 2000 	ldr.w	r2, [r8]
 8001d2c:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001d30:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001d32:	2b37      	cmp	r3, #55	; 0x37
 8001d34:	d9fc      	bls.n	8001d30 <OneWire_Select+0x64>
	gpinit.Pin = gp->GPIO_Pin;	
 8001d36:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d38:	6820      	ldr	r0, [r4, #0]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001d3a:	f8cd a010 	str.w	sl, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d3e:	a903      	add	r1, sp, #12
 8001d40:	3d01      	subs	r5, #1
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d42:	e9cd a705 	strd	sl, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001d46:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d48:	f000 fbc6 	bl	80024d8 <HAL_GPIO_Init>
	while (i--) {
 8001d4c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte >>= 1;
 8001d50:	ea4f 0656 	mov.w	r6, r6, lsr #1
	while (i--) {
 8001d54:	d1c8      	bne.n	8001ce8 <OneWire_Select+0x1c>
 8001d56:	9b00      	ldr	r3, [sp, #0]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	3307      	adds	r3, #7
 8001d5c:	9200      	str	r2, [sp, #0]
 8001d5e:	9301      	str	r3, [sp, #4]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001d60:	f04f 0911 	mov.w	r9, #17
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
	
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
 8001d64:	9b00      	ldr	r3, [sp, #0]
 8001d66:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2508      	movs	r5, #8
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	2702      	movs	r7, #2
	gpinit.Mode = GPIO_MODE_INPUT;
 8001d70:	f04f 0b00 	mov.w	fp, #0
	if (bit) 
 8001d74:	f016 0a01 	ands.w	sl, r6, #1
 8001d78:	d039      	beq.n	8001dee <OneWire_Select+0x122>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001d7a:	88a2      	ldrh	r2, [r4, #4]
 8001d7c:	6820      	ldr	r0, [r4, #0]
 8001d7e:	0411      	lsls	r1, r2, #16
 8001d80:	6181      	str	r1, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d82:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001d84:	e9cd 2903 	strd	r2, r9, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	e9cd b705 	strd	fp, r7, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001d8c:	f000 fba4 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001d90:	f8d8 1000 	ldr.w	r1, [r8]
 8001d94:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001d98:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001d9a:	2a0a      	cmp	r2, #10
 8001d9c:	d9fc      	bls.n	8001d98 <OneWire_Select+0xcc>
	gpinit.Pin = gp->GPIO_Pin;	
 8001d9e:	88a2      	ldrh	r2, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001da0:	6820      	ldr	r0, [r4, #0]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001da2:	f8cd b010 	str.w	fp, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001da6:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da8:	e9cd b705 	strd	fp, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001dac:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001dae:	f000 fb93 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001db2:	f8d8 1000 	ldr.w	r1, [r8]
 8001db6:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001dba:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001dbc:	2a37      	cmp	r2, #55	; 0x37
 8001dbe:	d9fc      	bls.n	8001dba <OneWire_Select+0xee>
	gpinit.Pin = gp->GPIO_Pin;	
 8001dc0:	88a2      	ldrh	r2, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001dc2:	6820      	ldr	r0, [r4, #0]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001dc4:	f8cd b010 	str.w	fp, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001dc8:	a903      	add	r1, sp, #12
 8001dca:	3d01      	subs	r5, #1
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dcc:	e9cd b705 	strd	fp, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001dd0:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001dd2:	f000 fb81 	bl	80024d8 <HAL_GPIO_Init>
	while (i--) {
 8001dd6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte >>= 1;
 8001dda:	ea4f 0656 	mov.w	r6, r6, lsr #1
	while (i--) {
 8001dde:	d1c9      	bne.n	8001d74 <OneWire_Select+0xa8>
	for (i = 0; i < 8; i++) {
 8001de0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d1bd      	bne.n	8001d64 <OneWire_Select+0x98>
	}
}
 8001de8:	b009      	add	sp, #36	; 0x24
 8001dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001dee:	88a3      	ldrh	r3, [r4, #4]
 8001df0:	6820      	ldr	r0, [r4, #0]
 8001df2:	0419      	lsls	r1, r3, #16
 8001df4:	6181      	str	r1, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001df6:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001df8:	e9cd 3903 	strd	r3, r9, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfc:	e9cd a705 	strd	sl, r7, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e00:	f000 fb6a 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001e04:	f8d8 1000 	ldr.w	r1, [r8]
 8001e08:	f8c1 a024 	str.w	sl, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001e0c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001e0e:	2a41      	cmp	r2, #65	; 0x41
 8001e10:	d9fc      	bls.n	8001e0c <OneWire_Select+0x140>
	gpinit.Pin = gp->GPIO_Pin;	
 8001e12:	88a2      	ldrh	r2, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e14:	6820      	ldr	r0, [r4, #0]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001e16:	f8cd b010 	str.w	fp, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e1a:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1c:	e9cd b705 	strd	fp, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001e20:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e22:	f000 fb59 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001e26:	f8d8 1000 	ldr.w	r1, [r8]
 8001e2a:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001e2e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001e30:	2a05      	cmp	r2, #5
 8001e32:	d9fc      	bls.n	8001e2e <OneWire_Select+0x162>
 8001e34:	e7c4      	b.n	8001dc0 <OneWire_Select+0xf4>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001e36:	88a2      	ldrh	r2, [r4, #4]
 8001e38:	6820      	ldr	r0, [r4, #0]
 8001e3a:	0411      	lsls	r1, r2, #16
 8001e3c:	6181      	str	r1, [r0, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e3e:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001e40:	e9cd 2903 	strd	r2, r9, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e44:	e9cd b705 	strd	fp, r7, [sp, #20]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e48:	f000 fb46 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001e4c:	f8d8 2000 	ldr.w	r2, [r8]
 8001e50:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001e54:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001e56:	2b41      	cmp	r3, #65	; 0x41
 8001e58:	d9fc      	bls.n	8001e54 <OneWire_Select+0x188>
	gpinit.Pin = gp->GPIO_Pin;	
 8001e5a:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e5c:	6820      	ldr	r0, [r4, #0]
	gpinit.Mode = GPIO_MODE_INPUT;
 8001e5e:	f8cd a010 	str.w	sl, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e62:	a903      	add	r1, sp, #12
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	e9cd a705 	strd	sl, r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001e68:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e6a:	f000 fb35 	bl	80024d8 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001e6e:	f8d8 2000 	ldr.w	r2, [r8]
 8001e72:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001e76:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d9fc      	bls.n	8001e76 <OneWire_Select+0x1aa>
 8001e7c:	e75b      	b.n	8001d36 <OneWire_Select+0x6a>
 8001e7e:	bf00      	nop
 8001e80:	2000036c 	.word	0x2000036c

08001e84 <OneWire_SelectWithPointer>:
 8001e84:	f7ff bf22 	b.w	8001ccc <OneWire_Select>

08001e88 <OneWire_GetFullROM>:
	}	
}

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001e88:	f100 0209 	add.w	r2, r0, #9
 8001e8c:	1d0b      	adds	r3, r1, #4
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d203      	bcs.n	8001e9a <OneWire_GetFullROM+0x12>
 8001e92:	f100 030d 	add.w	r3, r0, #13
 8001e96:	4299      	cmp	r1, r3
 8001e98:	d306      	bcc.n	8001ea8 <OneWire_GetFullROM+0x20>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001e9a:	f8d0 3009 	ldr.w	r3, [r0, #9]
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	f8d0 300d 	ldr.w	r3, [r0, #13]
 8001ea4:	604b      	str	r3, [r1, #4]
	for (i = 0; i < 8; i++) {
 8001ea6:	4770      	bx	lr
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001ea8:	7a43      	ldrb	r3, [r0, #9]
 8001eaa:	700b      	strb	r3, [r1, #0]
 8001eac:	7a83      	ldrb	r3, [r0, #10]
 8001eae:	704b      	strb	r3, [r1, #1]
 8001eb0:	7ac3      	ldrb	r3, [r0, #11]
 8001eb2:	708b      	strb	r3, [r1, #2]
 8001eb4:	7b03      	ldrb	r3, [r0, #12]
 8001eb6:	70cb      	strb	r3, [r1, #3]
 8001eb8:	7b43      	ldrb	r3, [r0, #13]
 8001eba:	710b      	strb	r3, [r1, #4]
 8001ebc:	7b83      	ldrb	r3, [r0, #14]
 8001ebe:	714b      	strb	r3, [r1, #5]
 8001ec0:	7bc3      	ldrb	r3, [r0, #15]
 8001ec2:	718b      	strb	r3, [r1, #6]
 8001ec4:	7c03      	ldrb	r3, [r0, #16]
 8001ec6:	71cb      	strb	r3, [r1, #7]
	}
}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
	uint8_t crc = 0, inbyte, i, mix;
	
	while (len--) {
 8001ecc:	2900      	cmp	r1, #0
 8001ece:	d054      	beq.n	8001f7a <OneWire_CRC8+0xae>
uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8001ed0:	b430      	push	{r4, r5}
 8001ed2:	1e4b      	subs	r3, r1, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	18c1      	adds	r1, r0, r3
 8001eda:	4602      	mov	r2, r0
	uint8_t crc = 0, inbyte, i, mix;
 8001edc:	2300      	movs	r3, #0
		inbyte = *addr++;
 8001ede:	f812 4b01 	ldrb.w	r4, [r2], #1
		for (i = 8; i; i--) {
			mix = (crc ^ inbyte) & 0x01;
 8001ee2:	ea84 0503 	eor.w	r5, r4, r3
			crc >>= 1;
			if (mix) {
 8001ee6:	07ed      	lsls	r5, r5, #31
			crc >>= 1;
 8001ee8:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8001eec:	bf48      	it	mi
 8001eee:	f083 038c 	eormi.w	r3, r3, #140	; 0x8c
			mix = (crc ^ inbyte) & 0x01;
 8001ef2:	ea83 0054 	eor.w	r0, r3, r4, lsr #1
			if (mix) {
 8001ef6:	07c0      	lsls	r0, r0, #31
			crc >>= 1;
 8001ef8:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8001efc:	bf44      	itt	mi
 8001efe:	f083 038c 	eormi.w	r3, r3, #140	; 0x8c
 8001f02:	b2db      	uxtbmi	r3, r3
			mix = (crc ^ inbyte) & 0x01;
 8001f04:	ea83 0094 	eor.w	r0, r3, r4, lsr #2
			if (mix) {
 8001f08:	07c5      	lsls	r5, r0, #31
			crc >>= 1;
 8001f0a:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8001f0e:	bf44      	itt	mi
 8001f10:	f083 038c 	eormi.w	r3, r3, #140	; 0x8c
 8001f14:	b2db      	uxtbmi	r3, r3
			mix = (crc ^ inbyte) & 0x01;
 8001f16:	ea83 00d4 	eor.w	r0, r3, r4, lsr #3
			if (mix) {
 8001f1a:	07c0      	lsls	r0, r0, #31
			crc >>= 1;
 8001f1c:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8001f20:	bf44      	itt	mi
 8001f22:	f083 038c 	eormi.w	r3, r3, #140	; 0x8c
 8001f26:	b2db      	uxtbmi	r3, r3
			mix = (crc ^ inbyte) & 0x01;
 8001f28:	ea83 1014 	eor.w	r0, r3, r4, lsr #4
			if (mix) {
 8001f2c:	07c5      	lsls	r5, r0, #31
			crc >>= 1;
 8001f2e:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8001f32:	bf44      	itt	mi
 8001f34:	f083 038c 	eormi.w	r3, r3, #140	; 0x8c
 8001f38:	b2db      	uxtbmi	r3, r3
			mix = (crc ^ inbyte) & 0x01;
 8001f3a:	ea83 1054 	eor.w	r0, r3, r4, lsr #5
			if (mix) {
 8001f3e:	07c0      	lsls	r0, r0, #31
			crc >>= 1;
 8001f40:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8001f44:	bf44      	itt	mi
 8001f46:	f083 038c 	eormi.w	r3, r3, #140	; 0x8c
 8001f4a:	b2db      	uxtbmi	r3, r3
			mix = (crc ^ inbyte) & 0x01;
 8001f4c:	ea83 1094 	eor.w	r0, r3, r4, lsr #6
			if (mix) {
 8001f50:	07c5      	lsls	r5, r0, #31
			crc >>= 1;
 8001f52:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8001f56:	bf44      	itt	mi
 8001f58:	f083 038c 	eormi.w	r3, r3, #140	; 0x8c
 8001f5c:	b2db      	uxtbmi	r3, r3
			mix = (crc ^ inbyte) & 0x01;
 8001f5e:	ea83 14d4 	eor.w	r4, r3, r4, lsr #7
			if (mix) {
 8001f62:	07e0      	lsls	r0, r4, #31
			crc >>= 1;
 8001f64:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0x8C;
 8001f68:	bf44      	itt	mi
 8001f6a:	f083 038c 	eormi.w	r3, r3, #140	; 0x8c
 8001f6e:	b2db      	uxtbmi	r3, r3
	while (len--) {
 8001f70:	4291      	cmp	r1, r2
 8001f72:	d1b4      	bne.n	8001ede <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bc30      	pop	{r4, r5}
 8001f78:	4770      	bx	lr
 8001f7a:	4608      	mov	r0, r1
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <MX_RTC_Init>:
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <MX_RTC_Init+0x2c>)
{
 8001f82:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <MX_RTC_Init+0x30>)
 8001f86:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8001f88:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f8a:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 8001f8c:	22ff      	movs	r2, #255	; 0xff
 8001f8e:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f96:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f9a:	6043      	str	r3, [r0, #4]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f9c:	f001 fa9a 	bl	80034d4 <HAL_RTC_Init>
 8001fa0:	b900      	cbnz	r0, 8001fa4 <MX_RTC_Init+0x24>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fa2:	bd08      	pop	{r3, pc}
 8001fa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001fa8:	f7ff bb86 	b.w	80016b8 <Error_Handler>
 8001fac:	20000348 	.word	0x20000348
 8001fb0:	40002800 	.word	0x40002800

08001fb4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	b096      	sub	sp, #88	; 0x58

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fba:	2254      	movs	r2, #84	; 0x54
 8001fbc:	a801      	add	r0, sp, #4
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	f002 f878 	bl	80040b4 <memset>
  if(rtcHandle->Instance==RTC)
 8001fc4:	6822      	ldr	r2, [r4, #0]
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_RTC_MspInit+0x58>)
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fcc:	b016      	add	sp, #88	; 0x58
 8001fce:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd8:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fda:	9201      	str	r2, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fdc:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fde:	f001 f8dd 	bl	800319c <HAL_RCCEx_PeriphCLKConfig>
 8001fe2:	b980      	cbnz	r0, 8002006 <HAL_RTC_MspInit+0x52>
    __HAL_RCC_RTC_ENABLE();
 8001fe4:	490a      	ldr	r1, [pc, #40]	; (8002010 <HAL_RTC_MspInit+0x5c>)
 8001fe6:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
    __HAL_RCC_RTC_ENABLE();
 8001fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	f000 fa0e 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 fa43 	bl	8002488 <HAL_NVIC_EnableIRQ>
}
 8002002:	b016      	add	sp, #88	; 0x58
 8002004:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002006:	f7ff fb57 	bl	80016b8 <Error_Handler>
 800200a:	e7eb      	b.n	8001fe4 <HAL_RTC_MspInit+0x30>
 800200c:	40002800 	.word	0x40002800
 8002010:	40021000 	.word	0x40021000

08002014 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_MspInit+0x2c>)
 8002016:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	661a      	str	r2, [r3, #96]	; 0x60
 800201e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002020:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	f002 0201 	and.w	r2, r2, #1
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800202c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002030:	659a      	str	r2, [r3, #88]	; 0x58
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203c:	b002      	add	sp, #8
 800203e:	4770      	bx	lr
 8002040:	40021000 	.word	0x40021000

08002044 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <NMI_Handler>
 8002046:	bf00      	nop

08002048 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <HardFault_Handler>
 800204a:	bf00      	nop

0800204c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler>
 800204e:	bf00      	nop

08002050 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <BusFault_Handler>
 8002052:	bf00      	nop

08002054 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler>
 8002056:	bf00      	nop

08002058 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop

0800205c <DebugMon_Handler>:
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop

08002060 <PendSV_Handler>:
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002064:	f000 b990 	b.w	8002388 <HAL_IncTick>

08002068 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <RTC_WKUP_IRQHandler+0x8>)
 800206a:	f001 bb2f 	b.w	80036cc <HAL_RTCEx_WakeUpTimerIRQHandler>
 800206e:	bf00      	nop
 8002070:	20000348 	.word	0x20000348

08002074 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002074:	2010      	movs	r0, #16
 8002076:	f000 bb0f 	b.w	8002698 <HAL_GPIO_EXTI_IRQHandler>
 800207a:	bf00      	nop

0800207c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800207c:	2001      	movs	r0, #1
 800207e:	4770      	bx	lr

08002080 <_kill>:

int _kill(int pid, int sig)
{
 8002080:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002082:	f001 ffed 	bl	8004060 <__errno>
 8002086:	2316      	movs	r3, #22
 8002088:	6003      	str	r3, [r0, #0]
	return -1;
}
 800208a:	f04f 30ff 	mov.w	r0, #4294967295
 800208e:	bd08      	pop	{r3, pc}

08002090 <_exit>:

void _exit (int status)
{
 8002090:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002092:	f001 ffe5 	bl	8004060 <__errno>
 8002096:	2316      	movs	r3, #22
 8002098:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800209a:	e7fe      	b.n	800209a <_exit+0xa>

0800209c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800209c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	1e16      	subs	r6, r2, #0
 80020a0:	dd07      	ble.n	80020b2 <_read+0x16>
 80020a2:	460c      	mov	r4, r1
 80020a4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80020a6:	f3af 8000 	nop.w
 80020aa:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	42a5      	cmp	r5, r4
 80020b0:	d1f9      	bne.n	80020a6 <_read+0xa>
	}

return len;
}
 80020b2:	4630      	mov	r0, r6
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
 80020b6:	bf00      	nop

080020b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	1e16      	subs	r6, r2, #0
 80020bc:	dd07      	ble.n	80020ce <_write+0x16>
 80020be:	460c      	mov	r4, r1
 80020c0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80020c2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80020c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	42ac      	cmp	r4, r5
 80020cc:	d1f9      	bne.n	80020c2 <_write+0xa>
	}
	return len;
}
 80020ce:	4630      	mov	r0, r6
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	bf00      	nop

080020d4 <_close>:

int _close(int file)
{
	return -1;
}
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop

080020dc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80020dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e0:	604b      	str	r3, [r1, #4]
	return 0;
}
 80020e2:	2000      	movs	r0, #0
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop

080020e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80020e8:	2001      	movs	r0, #1
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80020ec:	2000      	movs	r0, #0
 80020ee:	4770      	bx	lr

080020f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f2:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80020f4:	680b      	ldr	r3, [r1, #0]
{
 80020f6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4c0c      	ldr	r4, [pc, #48]	; (800212c <_sbrk+0x3c>)
 80020fa:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80020fc:	b12b      	cbz	r3, 800210a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4418      	add	r0, r3
 8002100:	4290      	cmp	r0, r2
 8002102:	d807      	bhi.n	8002114 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002104:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <_sbrk+0x40>)
 800210c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4418      	add	r0, r3
 8002110:	4290      	cmp	r0, r2
 8002112:	d9f7      	bls.n	8002104 <_sbrk+0x14>
    errno = ENOMEM;
 8002114:	f001 ffa4 	bl	8004060 <__errno>
 8002118:	230c      	movs	r3, #12
 800211a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd10      	pop	{r4, pc}
 8002124:	20000314 	.word	0x20000314
 8002128:	2000c000 	.word	0x2000c000
 800212c:	00000400 	.word	0x00000400
 8002130:	20000450 	.word	0x20000450

08002134 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002138:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800213c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002140:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8002144:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002146:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800214e:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002156:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800215a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 800215e:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8002160:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002168:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800216a:	6199      	str	r1, [r3, #24]
}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00
 8002174:	40021000 	.word	0x40021000

08002178 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002178:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800217a:	4812      	ldr	r0, [pc, #72]	; (80021c4 <MX_TIM6_Init+0x4c>)
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <MX_TIM6_Init+0x50>)
 800217e:	6003      	str	r3, [r0, #0]
{
 8002180:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002182:	2300      	movs	r3, #0
  htim6.Init.Prescaler = (16-1);
 8002184:	210f      	movs	r1, #15
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 8002186:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim6.Init.Prescaler = (16-1);
 8002192:	6041      	str	r1, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	9301      	str	r3, [sp, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002196:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002198:	f001 fab4 	bl	8003704 <HAL_TIM_Base_Init>
 800219c:	b950      	cbnz	r0, 80021b4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021a0:	4808      	ldr	r0, [pc, #32]	; (80021c4 <MX_TIM6_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021a4:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021a8:	f001 fb48 	bl	800383c <HAL_TIMEx_MasterConfigSynchronization>
 80021ac:	b928      	cbnz	r0, 80021ba <MX_TIM6_Init+0x42>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021ae:	b005      	add	sp, #20
 80021b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80021b4:	f7ff fa80 	bl	80016b8 <Error_Handler>
 80021b8:	e7f1      	b.n	800219e <MX_TIM6_Init+0x26>
    Error_Handler();
 80021ba:	f7ff fa7d 	bl	80016b8 <Error_Handler>
}
 80021be:	b005      	add	sp, #20
 80021c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80021c4:	2000036c 	.word	0x2000036c
 80021c8:	40001000 	.word	0x40001000

080021cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_TIM_Base_MspInit+0x28>)
 80021ce:	6802      	ldr	r2, [r0, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d000      	beq.n	80021d6 <HAL_TIM_Base_MspInit+0xa>
 80021d4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021d6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 80021da:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021de:	f042 0210 	orr.w	r2, r2, #16
 80021e2:	659a      	str	r2, [r3, #88]	; 0x58
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021ee:	b002      	add	sp, #8
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40001000 	.word	0x40001000

080021f8 <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <MX_LPUART1_UART_Init+0x38>)
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_LPUART1_UART_Init+0x3c>)
{
 80021fc:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 80021fe:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002200:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002204:	240c      	movs	r4, #12
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002206:	2108      	movs	r1, #8
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002208:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  hlpuart1.Init.BaudRate = 9600;
 800220c:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	2300      	movs	r3, #0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002210:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002214:	6144      	str	r4, [r0, #20]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002216:	6241      	str	r1, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002218:	6342      	str	r2, [r0, #52]	; 0x34
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800221a:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221c:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221e:	6203      	str	r3, [r0, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002220:	f001 fbfa 	bl	8003a18 <HAL_UART_Init>
 8002224:	b900      	cbnz	r0, 8002228 <MX_LPUART1_UART_Init+0x30>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002226:	bd10      	pop	{r4, pc}
 8002228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800222c:	f7ff ba44 	b.w	80016b8 <Error_Handler>
 8002230:	200003b8 	.word	0x200003b8
 8002234:	40008000 	.word	0x40008000

08002238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	4604      	mov	r4, r0
 800223c:	b09c      	sub	sp, #112	; 0x70

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002240:	2254      	movs	r2, #84	; 0x54
 8002242:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002248:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800224c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800224e:	f001 ff31 	bl	80040b4 <memset>
  if(uartHandle->Instance==LPUART1)
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_UART_MspInit+0x88>)
 8002256:	429a      	cmp	r2, r3
 8002258:	d001      	beq.n	800225e <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800225a:	b01c      	add	sp, #112	; 0x70
 800225c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800225e:	2220      	movs	r2, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8002260:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002264:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002266:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8002268:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800226a:	f000 ff97 	bl	800319c <HAL_RCCEx_PeriphCLKConfig>
 800226e:	bb18      	cbnz	r0, 80022b8 <HAL_UART_MspInit+0x80>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_UART_MspInit+0x8c>)
 8002272:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	65da      	str	r2, [r3, #92]	; 0x5c
 800227a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800227c:	f002 0201 	and.w	r2, r2, #1
 8002280:	9200      	str	r2, [sp, #0]
 8002282:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	64da      	str	r2, [r3, #76]	; 0x4c
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800228e:	2008      	movs	r0, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002296:	2200      	movs	r2, #0
 8002298:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800229a:	9006      	str	r0, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800229e:	240c      	movs	r4, #12
 80022a0:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80022aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f000 f912 	bl	80024d8 <HAL_GPIO_Init>
}
 80022b4:	b01c      	add	sp, #112	; 0x70
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80022b8:	f7ff f9fe 	bl	80016b8 <Error_Handler>
 80022bc:	e7d8      	b.n	8002270 <HAL_UART_MspInit+0x38>
 80022be:	bf00      	nop
 80022c0:	40008000 	.word	0x40008000
 80022c4:	40021000 	.word	0x40021000

080022c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002300 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022cc:	f7ff ff32 	bl	8002134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022d2:	e003      	b.n	80022dc <LoopCopyDataInit>

080022d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022da:	3104      	adds	r1, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <LoopForever+0xa>)
	ldr	r3, =_edata
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <LoopForever+0xe>)
	adds	r2, r0, r1
 80022e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022e4:	d3f6      	bcc.n	80022d4 <CopyDataInit>
	ldr	r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022e8:	e002      	b.n	80022f0 <LoopFillZerobss>

080022ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022ec:	f842 3b04 	str.w	r3, [r2], #4

080022f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <LoopForever+0x16>)
	cmp	r2, r3
 80022f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022f4:	d3f9      	bcc.n	80022ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f6:	f001 feb9 	bl	800406c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022fa:	f7ff f8dd 	bl	80014b8 <main>

080022fe <LoopForever>:

LoopForever:
    b LoopForever
 80022fe:	e7fe      	b.n	80022fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002300:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8002304:	08006f1c 	.word	0x08006f1c
	ldr	r0, =_sdata
 8002308:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800230c:	200002f4 	.word	0x200002f4
	ldr	r2, =_sbss
 8002310:	200002f4 	.word	0x200002f4
	ldr	r3, = _ebss
 8002314:	20000450 	.word	0x20000450

08002318 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC1_IRQHandler>
	...

0800231c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_InitTick+0x40>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b90b      	cbnz	r3, 8002328 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002324:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002326:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002328:	490d      	ldr	r1, [pc, #52]	; (8002360 <HAL_InitTick+0x44>)
 800232a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800232e:	4605      	mov	r5, r0
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	6808      	ldr	r0, [r1, #0]
 8002336:	fbb0 f0f3 	udiv	r0, r0, r3
 800233a:	f000 f8b3 	bl	80024a4 <HAL_SYSTICK_Config>
 800233e:	4604      	mov	r4, r0
 8002340:	2800      	cmp	r0, #0
 8002342:	d1ef      	bne.n	8002324 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002344:	2d0f      	cmp	r5, #15
 8002346:	d8ed      	bhi.n	8002324 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002348:	4602      	mov	r2, r0
 800234a:	4629      	mov	r1, r5
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f000 f862 	bl	8002418 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_InitTick+0x48>)
 8002356:	4620      	mov	r0, r4
 8002358:	601d      	str	r5, [r3, #0]
}
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	2000011c 	.word	0x2000011c
 8002360:	20000118 	.word	0x20000118
 8002364:	20000120 	.word	0x20000120

08002368 <HAL_Init>:
{
 8002368:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236a:	2003      	movs	r0, #3
 800236c:	f000 f840 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff ffd3 	bl	800231c <HAL_InitTick>
 8002376:	b110      	cbz	r0, 800237e <HAL_Init+0x16>
    status = HAL_ERROR;
 8002378:	2401      	movs	r4, #1
}
 800237a:	4620      	mov	r0, r4
 800237c:	bd10      	pop	{r4, pc}
 800237e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002380:	f7ff fe48 	bl	8002014 <HAL_MspInit>
}
 8002384:	4620      	mov	r0, r4
 8002386:	bd10      	pop	{r4, pc}

08002388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_IncTick+0x10>)
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_IncTick+0x14>)
 800238c:	6811      	ldr	r1, [r2, #0]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	440b      	add	r3, r1
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	2000043c 	.word	0x2000043c
 800239c:	2000011c 	.word	0x2000011c

080023a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023a0:	4b01      	ldr	r3, [pc, #4]	; (80023a8 <HAL_GetTick+0x8>)
 80023a2:	6818      	ldr	r0, [r3, #0]
}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	2000043c 	.word	0x2000043c

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff fff6 	bl	80023a0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80023b6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80023b8:	d002      	beq.n	80023c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_Delay+0x20>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c0:	f7ff ffee 	bl	80023a0 <HAL_GetTick>
 80023c4:	1b43      	subs	r3, r0, r5
 80023c6:	42a3      	cmp	r3, r4
 80023c8:	d3fa      	bcc.n	80023c0 <HAL_Delay+0x14>
  {
  }
}
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	2000011c 	.word	0x2000011c

080023d0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80023d0:	4a02      	ldr	r2, [pc, #8]	; (80023dc <HAL_SuspendTick+0xc>)
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	f023 0302 	bic.w	r3, r3, #2
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	4770      	bx	lr
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80023e0:	4a02      	ldr	r2, [pc, #8]	; (80023ec <HAL_ResumeTick+0xc>)
 80023e2:	6813      	ldr	r3, [r2, #0]
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	6013      	str	r3, [r2, #0]
}
 80023ea:	4770      	bx	lr
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4908      	ldr	r1, [pc, #32]	; (8002414 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80023f2:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f6:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80023fc:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fe:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800240c:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8002410:	60cb      	str	r3, [r1, #12]
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_NVIC_SetPriority+0x68>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002422:	f1c3 0507 	rsb	r5, r3, #7
 8002426:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002428:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	bf28      	it	cs
 800242e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002430:	2c06      	cmp	r4, #6
 8002432:	d919      	bls.n	8002468 <HAL_NVIC_SetPriority+0x50>
 8002434:	3b03      	subs	r3, #3
 8002436:	f04f 34ff 	mov.w	r4, #4294967295
 800243a:	409c      	lsls	r4, r3
 800243c:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 34ff 	mov.w	r4, #4294967295
 8002444:	40ac      	lsls	r4, r5
 8002446:	ea21 0104 	bic.w	r1, r1, r4
 800244a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800244c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002452:	db0c      	blt.n	800246e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002458:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800245c:	0109      	lsls	r1, r1, #4
 800245e:	b2c9      	uxtb	r1, r1
 8002460:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002464:	bc30      	pop	{r4, r5}
 8002466:	4770      	bx	lr
 8002468:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	4613      	mov	r3, r2
 800246c:	e7e8      	b.n	8002440 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_NVIC_SetPriority+0x6c>)
 8002470:	f000 000f 	and.w	r0, r0, #15
 8002474:	0109      	lsls	r1, r1, #4
 8002476:	4403      	add	r3, r0
 8002478:	b2c9      	uxtb	r1, r1
 800247a:	7619      	strb	r1, [r3, #24]
 800247c:	bc30      	pop	{r4, r5}
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00
 8002484:	e000ecfc 	.word	0xe000ecfc

08002488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002488:	2800      	cmp	r0, #0
 800248a:	db07      	blt.n	800249c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_NVIC_EnableIRQ+0x18>)
 800248e:	f000 011f 	and.w	r1, r0, #31
 8002492:	2301      	movs	r3, #1
 8002494:	0940      	lsrs	r0, r0, #5
 8002496:	408b      	lsls	r3, r1
 8002498:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	3801      	subs	r0, #1
 80024a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024aa:	d20e      	bcs.n	80024ca <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	4c08      	ldr	r4, [pc, #32]	; (80024d4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	20f0      	movs	r0, #240	; 0xf0
 80024b6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ba:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024bc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024be:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80024c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	6019      	str	r1, [r3, #0]
 80024c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024ca:	2001      	movs	r0, #1
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024dc:	680e      	ldr	r6, [r1, #0]
{
 80024de:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e0:	2e00      	cmp	r6, #0
 80024e2:	f000 80bd 	beq.w	8002660 <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024e6:	f8df e194 	ldr.w	lr, [pc, #404]	; 800267c <HAL_GPIO_Init+0x1a4>
  uint32_t position = 0x00u;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e06a      	b.n	80025c4 <HAL_GPIO_Init+0xec>
      temp = GPIOx->PUPDR;
 80024ee:	68c2      	ldr	r2, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024f0:	688d      	ldr	r5, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024f2:	2403      	movs	r4, #3
 80024f4:	fa04 f408 	lsl.w	r4, r4, r8
 80024f8:	ea22 0904 	bic.w	r9, r2, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024fc:	fa05 f508 	lsl.w	r5, r5, r8
 8002500:	ea45 0509 	orr.w	r5, r5, r9
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002504:	43e4      	mvns	r4, r4
      GPIOx->PUPDR = temp;
 8002506:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8002508:	6805      	ldr	r5, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800250a:	f007 0203 	and.w	r2, r7, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800250e:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002510:	fa02 f208 	lsl.w	r2, r2, r8
 8002514:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002516:	00fc      	lsls	r4, r7, #3
      GPIOx->MODER = temp;
 8002518:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251a:	d54f      	bpl.n	80025bc <HAL_GPIO_Init+0xe4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251c:	4c54      	ldr	r4, [pc, #336]	; (8002670 <HAL_GPIO_Init+0x198>)
 800251e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	6622      	str	r2, [r4, #96]	; 0x60
 8002526:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002528:	f023 0403 	bic.w	r4, r3, #3
 800252c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002530:	f002 0201 	and.w	r2, r2, #1
 8002534:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8002538:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002544:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800254c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002550:	ea25 0508 	bic.w	r5, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002554:	d00b      	beq.n	800256e <HAL_GPIO_Init+0x96>
 8002556:	4a47      	ldr	r2, [pc, #284]	; (8002674 <HAL_GPIO_Init+0x19c>)
 8002558:	4290      	cmp	r0, r2
 800255a:	f000 8084 	beq.w	8002666 <HAL_GPIO_Init+0x18e>
 800255e:	4a46      	ldr	r2, [pc, #280]	; (8002678 <HAL_GPIO_Init+0x1a0>)
 8002560:	4290      	cmp	r0, r2
 8002562:	bf0c      	ite	eq
 8002564:	2202      	moveq	r2, #2
 8002566:	2207      	movne	r2, #7
 8002568:	fa02 f209 	lsl.w	r2, r2, r9
 800256c:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 800256e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->IMR1;
 8002570:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8002574:	ea6f 050c 	mvn.w	r5, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002578:	03fa      	lsls	r2, r7, #15
        temp &= ~(iocurrent);
 800257a:	bf54      	ite	pl
 800257c:	402c      	andpl	r4, r5
        {
          temp |= iocurrent;
 800257e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8002582:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8002586:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800258a:	03ba      	lsls	r2, r7, #14
        temp &= ~(iocurrent);
 800258c:	bf54      	ite	pl
 800258e:	402c      	andpl	r4, r5
        {
          temp |= iocurrent;
 8002590:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 8002594:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002598:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800259c:	02fa      	lsls	r2, r7, #11
        temp &= ~(iocurrent);
 800259e:	bf54      	ite	pl
 80025a0:	402c      	andpl	r4, r5
        {
          temp |= iocurrent;
 80025a2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 80025a6:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80025aa:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ae:	02bc      	lsls	r4, r7, #10
        temp &= ~(iocurrent);
 80025b0:	bf54      	ite	pl
 80025b2:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80025b4:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 80025b8:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 80025bc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025be:	fa36 f203 	lsrs.w	r2, r6, r3
 80025c2:	d04d      	beq.n	8002660 <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025c4:	2201      	movs	r2, #1
 80025c6:	fa02 f503 	lsl.w	r5, r2, r3
    if (iocurrent != 0x00u)
 80025ca:	ea15 0c06 	ands.w	ip, r5, r6
 80025ce:	d0f5      	beq.n	80025bc <HAL_GPIO_Init+0xe4>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025d0:	684f      	ldr	r7, [r1, #4]
 80025d2:	f027 0910 	bic.w	r9, r7, #16
 80025d6:	f109 32ff 	add.w	r2, r9, #4294967295
 80025da:	2a01      	cmp	r2, #1
 80025dc:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80025e0:	d885      	bhi.n	80024ee <HAL_GPIO_Init+0x16>
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025e2:	688a      	ldr	r2, [r1, #8]
 80025e4:	9201      	str	r2, [sp, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025e6:	2203      	movs	r2, #3
        temp = GPIOx->OSPEEDR;
 80025e8:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ec:	fa02 f408 	lsl.w	r4, r2, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025f0:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025f2:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025f6:	fa02 fb08 	lsl.w	fp, r2, r8
 80025fa:	ea4b 0a0a 	orr.w	sl, fp, sl
        GPIOx->OSPEEDR = temp;
 80025fe:	f8c0 a008 	str.w	sl, [r0, #8]
        temp = GPIOx->OTYPER;
 8002602:	f8d0 a004 	ldr.w	sl, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002606:	9a01      	ldr	r2, [sp, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002608:	f3c7 1b00 	ubfx	fp, r7, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800260c:	ea2a 0a05 	bic.w	sl, sl, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002610:	465d      	mov	r5, fp
 8002612:	409d      	lsls	r5, r3
 8002614:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8002618:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800261a:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800261c:	fa02 f208 	lsl.w	r2, r2, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002620:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002624:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002626:	f1b9 0f02 	cmp.w	r9, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800262a:	ea6f 0404 	mvn.w	r4, r4
      GPIOx->PUPDR = temp;
 800262e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002630:	f47f af6a 	bne.w	8002508 <HAL_GPIO_Init+0x30>
        temp = GPIOx->AFR[position >> 3u];
 8002634:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002638:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800263c:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002640:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002644:	0092      	lsls	r2, r2, #2
 8002646:	f04f 0a0f 	mov.w	sl, #15
 800264a:	fa0a fb02 	lsl.w	fp, sl, r2
 800264e:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002652:	690d      	ldr	r5, [r1, #16]
 8002654:	4095      	lsls	r5, r2
 8002656:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3u] = temp;
 800265a:	f8c9 5020 	str.w	r5, [r9, #32]
 800265e:	e753      	b.n	8002508 <HAL_GPIO_Init+0x30>
  }
}
 8002660:	b005      	add	sp, #20
 8002662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002666:	2201      	movs	r2, #1
 8002668:	fa02 f209 	lsl.w	r2, r2, r9
 800266c:	4315      	orrs	r5, r2
 800266e:	e77e      	b.n	800256e <HAL_GPIO_Init+0x96>
 8002670:	40021000 	.word	0x40021000
 8002674:	48000400 	.word	0x48000400
 8002678:	48000800 	.word	0x48000800
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002680:	6903      	ldr	r3, [r0, #16]
 8002682:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002684:	bf14      	ite	ne
 8002686:	2001      	movne	r0, #1
 8002688:	2000      	moveq	r0, #0
 800268a:	4770      	bx	lr

0800268c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	b10a      	cbz	r2, 8002692 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268e:	6181      	str	r1, [r0, #24]
 8002690:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002692:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800269a:	6951      	ldr	r1, [r2, #20]
 800269c:	4201      	tst	r1, r0
 800269e:	d100      	bne.n	80026a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80026a0:	4770      	bx	lr
{
 80026a2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026a4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a6:	f7fe ffa5 	bl	80015f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026aa:	bd08      	pop	{r3, pc}
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b0:	4a02      	ldr	r2, [pc, #8]	; (80026bc <HAL_PWR_EnableBkUpAccess+0xc>)
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]
}
 80026ba:	4770      	bx	lr
 80026bc:	40007000 	.word	0x40007000

080026c0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_PWREx_GetVoltageRange+0xc>)
 80026c2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80026c4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40007000 	.word	0x40007000

080026d0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80026d4:	d00e      	beq.n	80026f4 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d032      	beq.n	800274a <HAL_PWREx_ControlVoltageScaling+0x7a>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026f0:	2000      	movs	r0, #0
 80026f2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f4:	4917      	ldr	r1, [pc, #92]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80026f6:	680b      	ldr	r3, [r1, #0]
 80026f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002700:	d023      	beq.n	800274a <HAL_PWREx_ControlVoltageScaling+0x7a>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002702:	680a      	ldr	r2, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002706:	4815      	ldr	r0, [pc, #84]	; (800275c <HAL_PWREx_ControlVoltageScaling+0x8c>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002708:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800270c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 8002710:	b410      	push	{r4}
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002712:	600a      	str	r2, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002714:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002716:	694a      	ldr	r2, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002718:	2332      	movs	r3, #50	; 0x32
 800271a:	fb03 f304 	mul.w	r3, r3, r4
 800271e:	fba0 0303 	umull	r0, r3, r0, r3
 8002722:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002724:	0550      	lsls	r0, r2, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002726:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800272a:	d506      	bpl.n	800273a <HAL_PWREx_ControlVoltageScaling+0x6a>
 800272c:	e000      	b.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x60>
 800272e:	b123      	cbz	r3, 800273a <HAL_PWREx_ControlVoltageScaling+0x6a>
 8002730:	694a      	ldr	r2, [r1, #20]
 8002732:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002734:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002738:	d4f9      	bmi.n	800272e <HAL_PWREx_ControlVoltageScaling+0x5e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	055b      	lsls	r3, r3, #21
 8002740:	d405      	bmi.n	800274e <HAL_PWREx_ControlVoltageScaling+0x7e>
  return HAL_OK;
 8002742:	2000      	movs	r0, #0
}
 8002744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002748:	4770      	bx	lr
  return HAL_OK;
 800274a:	2000      	movs	r0, #0
}
 800274c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
 8002750:	e7f8      	b.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x74>
 8002752:	bf00      	nop
 8002754:	40007000 	.word	0x40007000
 8002758:	20000118 	.word	0x20000118
 800275c:	431bde83 	.word	0x431bde83

08002760 <HAL_PWREx_EnterSTOP2Mode>:
{
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <HAL_PWREx_EnterSTOP2Mode+0x34>)

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002762:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <HAL_PWREx_EnterSTOP2Mode+0x38>)
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002764:	680b      	ldr	r3, [r1, #0]
 8002766:	f023 0307 	bic.w	r3, r3, #7
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	600b      	str	r3, [r1, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002770:	6913      	ldr	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002772:	2801      	cmp	r0, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800277a:	d008      	beq.n	800278e <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800277c:	bf40      	sev
    __WFE();
 800277e:	bf20      	wfe
    __WFE();
 8002780:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002782:	4a05      	ldr	r2, [pc, #20]	; (8002798 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8002784:	6913      	ldr	r3, [r2, #16]
 8002786:	f023 0304 	bic.w	r3, r3, #4
 800278a:	6113      	str	r3, [r2, #16]
}
 800278c:	4770      	bx	lr
    __WFI();
 800278e:	bf30      	wfi
 8002790:	e7f7      	b.n	8002782 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8002792:	bf00      	nop
 8002794:	40007000 	.word	0x40007000
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800279c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800279e:	4d20      	ldr	r5, [pc, #128]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 80027a0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80027a2:	00db      	lsls	r3, r3, #3
{
 80027a4:	b083      	sub	sp, #12
 80027a6:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027a8:	d51c      	bpl.n	80027e4 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027aa:	f7ff ff89 	bl	80026c0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80027b2:	d029      	beq.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027b4:	2c80      	cmp	r4, #128	; 0x80
 80027b6:	d813      	bhi.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027b8:	d02f      	beq.n	800281a <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027ba:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 80027be:	fab4 f484 	clz	r4, r4
 80027c2:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027c4:	4917      	ldr	r1, [pc, #92]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80027c6:	680b      	ldr	r3, [r1, #0]
 80027c8:	f023 0307 	bic.w	r3, r3, #7
 80027cc:	4323      	orrs	r3, r4
 80027ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027d0:	6808      	ldr	r0, [r1, #0]
 80027d2:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80027d6:	1b00      	subs	r0, r0, r4
 80027d8:	bf18      	it	ne
 80027da:	2001      	movne	r0, #1
 80027dc:	b003      	add	sp, #12
 80027de:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 80027e0:	2403      	movs	r4, #3
 80027e2:	e7ef      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80027ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80027f6:	f7ff ff63 	bl	80026c0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80027fa:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002804:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002806:	d1d5      	bne.n	80027b4 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002808:	2c80      	cmp	r4, #128	; 0x80
 800280a:	d904      	bls.n	8002816 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      if(msirange > RCC_MSIRANGE_10)
 800280c:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_1; /* 1WS */
 800280e:	bf8c      	ite	hi
 8002810:	2402      	movhi	r4, #2
 8002812:	2401      	movls	r4, #1
 8002814:	e7d6      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002816:	2400      	movs	r4, #0
 8002818:	e7d4      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800281a:	2402      	movs	r4, #2
 800281c:	e7d2      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x28>
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	40022000 	.word	0x40022000

08002828 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002828:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800282a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800282e:	f013 030c 	ands.w	r3, r3, #12
 8002832:	d008      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x1e>
 8002834:	2b0c      	cmp	r3, #12
 8002836:	d038      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002838:	2b04      	cmp	r3, #4
 800283a:	d034      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800283c:	2b08      	cmp	r3, #8
 800283e:	4824      	ldr	r0, [pc, #144]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002840:	bf18      	it	ne
 8002842:	2000      	movne	r0, #0
 8002844:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002848:	6811      	ldr	r1, [r2, #0]
 800284a:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800284c:	bf54      	ite	pl
 800284e:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002852:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002854:	491f      	ldr	r1, [pc, #124]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002856:	bf54      	ite	pl
 8002858:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800285c:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002860:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002864:	b303      	cbz	r3, 80028a8 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d12d      	bne.n	80028c6 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002872:	2b02      	cmp	r3, #2
 8002874:	d025      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x9a>
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002878:	2b03      	cmp	r3, #3
 800287a:	bf08      	it	eq
 800287c:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002880:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002882:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800288a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800288e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002892:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002894:	3101      	adds	r1, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002896:	fb00 f002 	mul.w	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800289a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800289c:	fbb0 f0f1 	udiv	r0, r0, r1
    sysclockfreq = pllvco / pllr;
 80028a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80028a4:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80028a6:	480c      	ldr	r0, [pc, #48]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 80028a8:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028aa:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ae:	2a01      	cmp	r2, #1
 80028b0:	d0c9      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_GetSysClockFreq+0xa4>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80028ba:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028bc:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 80028c0:	d1d9      	bne.n	8002876 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028c4:	e7db      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x56>
 80028c6:	2000      	movs	r0, #0
  return sysclockfreq;
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	007a1200 	.word	0x007a1200
 80028d4:	08006ae4 	.word	0x08006ae4
 80028d8:	00f42400 	.word	0x00f42400

080028dc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80028dc:	2800      	cmp	r0, #0
 80028de:	f000 8239 	beq.w	8002d54 <HAL_RCC_OscConfig+0x478>
{
 80028e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e6:	4a99      	ldr	r2, [pc, #612]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ea:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ec:	68d6      	ldr	r6, [r2, #12]
 80028ee:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f0:	06d8      	lsls	r0, r3, #27
{
 80028f2:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028fc:	d52e      	bpl.n	800295c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028fe:	2d00      	cmp	r5, #0
 8002900:	f000 812b 	beq.w	8002b5a <HAL_RCC_OscConfig+0x27e>
 8002904:	2d0c      	cmp	r5, #12
 8002906:	f000 8125 	beq.w	8002b54 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800290a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800290c:	4f8f      	ldr	r7, [pc, #572]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 819b 	beq.w	8002c4a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_MSI_ENABLE();
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800291c:	f7ff fd40 	bl	80023a0 <HAL_GetTick>
 8002920:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002922:	e006      	b.n	8002932 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002924:	f7ff fd3c 	bl	80023a0 <HAL_GetTick>
 8002928:	eba0 0008 	sub.w	r0, r0, r8
 800292c:	2802      	cmp	r0, #2
 800292e:	f200 819c 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	079b      	lsls	r3, r3, #30
 8002936:	d5f5      	bpl.n	8002924 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6a22      	ldr	r2, [r4, #32]
 8002944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002948:	4313      	orrs	r3, r2
 800294a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69e2      	ldr	r2, [r4, #28]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295c:	07d9      	lsls	r1, r3, #31
 800295e:	f100 80cb 	bmi.w	8002af8 <HAL_RCC_OscConfig+0x21c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	0799      	lsls	r1, r3, #30
 8002964:	d523      	bpl.n	80029ae <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002966:	2d04      	cmp	r5, #4
 8002968:	f000 815f 	beq.w	8002c2a <HAL_RCC_OscConfig+0x34e>
 800296c:	2d0c      	cmp	r5, #12
 800296e:	f000 8159 	beq.w	8002c24 <HAL_RCC_OscConfig+0x348>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002972:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002974:	4e75      	ldr	r6, [pc, #468]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8192 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_ENABLE();
 800297c:	6833      	ldr	r3, [r6, #0]
 800297e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002982:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002984:	f7ff fd0c 	bl	80023a0 <HAL_GetTick>
 8002988:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298a:	e005      	b.n	8002998 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298c:	f7ff fd08 	bl	80023a0 <HAL_GetTick>
 8002990:	1bc0      	subs	r0, r0, r7
 8002992:	2802      	cmp	r0, #2
 8002994:	f200 8169 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002998:	6833      	ldr	r3, [r6, #0]
 800299a:	055b      	lsls	r3, r3, #21
 800299c:	d5f6      	bpl.n	800298c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	6873      	ldr	r3, [r6, #4]
 80029a0:	6922      	ldr	r2, [r4, #16]
 80029a2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80029a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029aa:	6073      	str	r3, [r6, #4]
 80029ac:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	0719      	lsls	r1, r3, #28
 80029b0:	d519      	bpl.n	80029e6 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80029b4:	4e65      	ldr	r6, [pc, #404]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8120 	beq.w	8002bfc <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_LSI_ENABLE();
 80029bc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80029c8:	f7ff fcea 	bl	80023a0 <HAL_GetTick>
 80029cc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ce:	e005      	b.n	80029dc <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7ff fce6 	bl	80023a0 <HAL_GetTick>
 80029d4:	1bc0      	subs	r0, r0, r7
 80029d6:	2802      	cmp	r0, #2
 80029d8:	f200 8147 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029dc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80029e0:	079a      	lsls	r2, r3, #30
 80029e2:	d5f5      	bpl.n	80029d0 <HAL_RCC_OscConfig+0xf4>
 80029e4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e6:	075f      	lsls	r7, r3, #29
 80029e8:	d53f      	bpl.n	8002a6a <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029ea:	4b58      	ldr	r3, [pc, #352]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
 80029ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029ee:	00d6      	lsls	r6, r2, #3
 80029f0:	f100 8154 	bmi.w	8002c9c <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029fa:	659a      	str	r2, [r3, #88]	; 0x58
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a06:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a08:	4f51      	ldr	r7, [pc, #324]	; (8002b50 <HAL_RCC_OscConfig+0x274>)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	05d8      	lsls	r0, r3, #23
 8002a0e:	f140 81a3 	bpl.w	8002d58 <HAL_RCC_OscConfig+0x47c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a12:	68a3      	ldr	r3, [r4, #8]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	f000 8155 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x3e8>
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	f000 81c7 	beq.w	8002dae <HAL_RCC_OscConfig+0x4d2>
 8002a20:	4f4a      	ldr	r7, [pc, #296]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a22:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002a2e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a32:	f022 0204 	bic.w	r2, r2, #4
 8002a36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 8149 	bne.w	8002cd2 <HAL_RCC_OscConfig+0x3f6>
      tickstart = HAL_GetTick();
 8002a40:	f7ff fcae 	bl	80023a0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a48:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4a:	e006      	b.n	8002a5a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7ff fca8 	bl	80023a0 <HAL_GetTick>
 8002a50:	eba0 0008 	sub.w	r0, r0, r8
 8002a54:	4548      	cmp	r0, r9
 8002a56:	f200 8108 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a5e:	079b      	lsls	r3, r3, #30
 8002a60:	d4f4      	bmi.n	8002a4c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8002a62:	2e00      	cmp	r6, #0
 8002a64:	f040 818a 	bne.w	8002d7c <HAL_RCC_OscConfig+0x4a0>
 8002a68:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a6a:	0698      	lsls	r0, r3, #26
 8002a6c:	d518      	bpl.n	8002aa0 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8002a70:	4e36      	ldr	r6, [pc, #216]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 815a 	beq.w	8002d2c <HAL_RCC_OscConfig+0x450>
      __HAL_RCC_HSI48_ENABLE();
 8002a78:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002a84:	f7ff fc8c 	bl	80023a0 <HAL_GetTick>
 8002a88:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8c:	f7ff fc88 	bl	80023a0 <HAL_GetTick>
 8002a90:	1bc0      	subs	r0, r0, r7
 8002a92:	2802      	cmp	r0, #2
 8002a94:	f200 80e9 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a98:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002a9c:	0799      	lsls	r1, r3, #30
 8002a9e:	d5f5      	bpl.n	8002a8c <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aa2:	b32b      	cbz	r3, 8002af0 <HAL_RCC_OscConfig+0x214>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	f000 8190 	beq.w	8002dca <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aaa:	2d0c      	cmp	r5, #12
 8002aac:	f000 8096 	beq.w	8002bdc <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002ab8:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	d403      	bmi.n	8002ac8 <HAL_RCC_OscConfig+0x1ec>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	f022 0203 	bic.w	r2, r2, #3
 8002ac6:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ac8:	4c20      	ldr	r4, [pc, #128]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002aca:	68e3      	ldr	r3, [r4, #12]
 8002acc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fc63 	bl	80023a0 <HAL_GetTick>
 8002ada:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002adc:	e005      	b.n	8002aea <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7ff fc5f 	bl	80023a0 <HAL_GetTick>
 8002ae2:	1b40      	subs	r0, r0, r5
 8002ae4:	2802      	cmp	r0, #2
 8002ae6:	f200 80c0 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	d4f6      	bmi.n	8002ade <HAL_RCC_OscConfig+0x202>
  return HAL_OK;
 8002af0:	2000      	movs	r0, #0
}
 8002af2:	b003      	add	sp, #12
 8002af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002af8:	2d08      	cmp	r5, #8
 8002afa:	d075      	beq.n	8002be8 <HAL_RCC_OscConfig+0x30c>
 8002afc:	2d0c      	cmp	r5, #12
 8002afe:	d071      	beq.n	8002be4 <HAL_RCC_OscConfig+0x308>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b00:	6863      	ldr	r3, [r4, #4]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	f000 80b4 	beq.w	8002c72 <HAL_RCC_OscConfig+0x396>
 8002b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0e:	f000 8141 	beq.w	8002d94 <HAL_RCC_OscConfig+0x4b8>
 8002b12:	4f0e      	ldr	r7, [pc, #56]	; (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b1a:	603a      	str	r2, [r7, #0]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b22:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f040 80a9 	bne.w	8002c7c <HAL_RCC_OscConfig+0x3a0>
        tickstart = HAL_GetTick();
 8002b2a:	f7ff fc39 	bl	80023a0 <HAL_GetTick>
 8002b2e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b30:	e006      	b.n	8002b40 <HAL_RCC_OscConfig+0x264>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b32:	f7ff fc35 	bl	80023a0 <HAL_GetTick>
 8002b36:	eba0 0008 	sub.w	r0, r0, r8
 8002b3a:	2864      	cmp	r0, #100	; 0x64
 8002b3c:	f200 8095 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	0398      	lsls	r0, r3, #14
 8002b44:	d4f5      	bmi.n	8002b32 <HAL_RCC_OscConfig+0x256>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	e70b      	b.n	8002962 <HAL_RCC_OscConfig+0x86>
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b54:	2e01      	cmp	r6, #1
 8002b56:	f47f aed8 	bne.w	800290a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b5a:	4ba7      	ldr	r3, [pc, #668]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0799      	lsls	r1, r3, #30
 8002b60:	d439      	bmi.n	8002bd6 <HAL_RCC_OscConfig+0x2fa>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b62:	4ba5      	ldr	r3, [pc, #660]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002b64:	6a20      	ldr	r0, [r4, #32]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	0712      	lsls	r2, r2, #28
 8002b6a:	bf56      	itet	pl
 8002b6c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8002b70:	681b      	ldrmi	r3, [r3, #0]
 8002b72:	091b      	lsrpl	r3, r3, #4
 8002b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b78:	4298      	cmp	r0, r3
 8002b7a:	f200 80bf 	bhi.w	8002cfc <HAL_RCC_OscConfig+0x420>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7e:	4b9e      	ldr	r3, [pc, #632]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f042 0208 	orr.w	r2, r2, #8
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b8e:	4302      	orrs	r2, r0
 8002b90:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	69e1      	ldr	r1, [r4, #28]
 8002b96:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b9e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba0:	2d00      	cmp	r5, #0
 8002ba2:	f000 80f1 	beq.w	8002d88 <HAL_RCC_OscConfig+0x4ac>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ba6:	f7ff fe3f 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8002baa:	4a93      	ldr	r2, [pc, #588]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002bac:	4993      	ldr	r1, [pc, #588]	; (8002dfc <HAL_RCC_OscConfig+0x520>)
 8002bae:	6892      	ldr	r2, [r2, #8]
 8002bb0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	5c8a      	ldrb	r2, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 8002bb8:	4891      	ldr	r0, [pc, #580]	; (8002e00 <HAL_RCC_OscConfig+0x524>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bba:	4992      	ldr	r1, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x528>)
        status = HAL_InitTick(uwTickPrio);
 8002bbc:	6800      	ldr	r0, [r0, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bbe:	f002 021f 	and.w	r2, r2, #31
 8002bc2:	40d3      	lsrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
        status = HAL_InitTick(uwTickPrio);
 8002bc6:	f7ff fba9 	bl	800231c <HAL_InitTick>
        if(status != HAL_OK)
 8002bca:	b940      	cbnz	r0, 8002bde <HAL_RCC_OscConfig+0x302>
 8002bcc:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	07d9      	lsls	r1, r3, #31
 8002bd0:	f57f aec7 	bpl.w	8002962 <HAL_RCC_OscConfig+0x86>
 8002bd4:	e790      	b.n	8002af8 <HAL_RCC_OscConfig+0x21c>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd6:	69a3      	ldr	r3, [r4, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1c2      	bne.n	8002b62 <HAL_RCC_OscConfig+0x286>
          return HAL_ERROR;
 8002bdc:	2001      	movs	r0, #1
}
 8002bde:	b003      	add	sp, #12
 8002be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be4:	2e03      	cmp	r6, #3
 8002be6:	d18b      	bne.n	8002b00 <HAL_RCC_OscConfig+0x224>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	4a83      	ldr	r2, [pc, #524]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	0392      	lsls	r2, r2, #14
 8002bee:	f57f aeb8 	bpl.w	8002962 <HAL_RCC_OscConfig+0x86>
 8002bf2:	6862      	ldr	r2, [r4, #4]
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	f47f aeb4 	bne.w	8002962 <HAL_RCC_OscConfig+0x86>
 8002bfa:	e7ef      	b.n	8002bdc <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_LSI_DISABLE();
 8002bfc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c08:	f7ff fbca 	bl	80023a0 <HAL_GetTick>
 8002c0c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c0e:	e004      	b.n	8002c1a <HAL_RCC_OscConfig+0x33e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c10:	f7ff fbc6 	bl	80023a0 <HAL_GetTick>
 8002c14:	1bc0      	subs	r0, r0, r7
 8002c16:	2802      	cmp	r0, #2
 8002c18:	d827      	bhi.n	8002c6a <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c1a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002c1e:	079b      	lsls	r3, r3, #30
 8002c20:	d4f6      	bmi.n	8002c10 <HAL_RCC_OscConfig+0x334>
 8002c22:	e6df      	b.n	80029e4 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c24:	2e02      	cmp	r6, #2
 8002c26:	f47f aea4 	bne.w	8002972 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c2a:	4a73      	ldr	r2, [pc, #460]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	0552      	lsls	r2, r2, #21
 8002c30:	d502      	bpl.n	8002c38 <HAL_RCC_OscConfig+0x35c>
 8002c32:	68e2      	ldr	r2, [r4, #12]
 8002c34:	2a00      	cmp	r2, #0
 8002c36:	d0d1      	beq.n	8002bdc <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	496f      	ldr	r1, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002c3a:	6920      	ldr	r0, [r4, #16]
 8002c3c:	684a      	ldr	r2, [r1, #4]
 8002c3e:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8002c42:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002c46:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c48:	e6b1      	b.n	80029ae <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002c52:	f7ff fba5 	bl	80023a0 <HAL_GetTick>
 8002c56:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	0798      	lsls	r0, r3, #30
 8002c5c:	d5b6      	bpl.n	8002bcc <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c5e:	f7ff fb9f 	bl	80023a0 <HAL_GetTick>
 8002c62:	eba0 0008 	sub.w	r0, r0, r8
 8002c66:	2802      	cmp	r0, #2
 8002c68:	d9f6      	bls.n	8002c58 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8002c6a:	2003      	movs	r0, #3
}
 8002c6c:	b003      	add	sp, #12
 8002c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c72:	4a61      	ldr	r2, [pc, #388]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002c74:	6813      	ldr	r3, [r2, #0]
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c7c:	f7ff fb90 	bl	80023a0 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c80:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002df8 <HAL_RCC_OscConfig+0x51c>
        tickstart = HAL_GetTick();
 8002c84:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	e004      	b.n	8002c92 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff fb8a 	bl	80023a0 <HAL_GetTick>
 8002c8c:	1bc0      	subs	r0, r0, r7
 8002c8e:	2864      	cmp	r0, #100	; 0x64
 8002c90:	d8eb      	bhi.n	8002c6a <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	f8d8 3000 	ldr.w	r3, [r8]
 8002c96:	039b      	lsls	r3, r3, #14
 8002c98:	d5f6      	bpl.n	8002c88 <HAL_RCC_OscConfig+0x3ac>
 8002c9a:	e754      	b.n	8002b46 <HAL_RCC_OscConfig+0x26a>
    FlagStatus       pwrclkchanged = RESET;
 8002c9c:	2600      	movs	r6, #0
 8002c9e:	e6b3      	b.n	8002a08 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8002ca0:	6833      	ldr	r3, [r6, #0]
 8002ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fb7a 	bl	80023a0 <HAL_GetTick>
 8002cac:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cae:	e004      	b.n	8002cba <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7ff fb76 	bl	80023a0 <HAL_GetTick>
 8002cb4:	1bc0      	subs	r0, r0, r7
 8002cb6:	2802      	cmp	r0, #2
 8002cb8:	d8d7      	bhi.n	8002c6a <HAL_RCC_OscConfig+0x38e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cba:	6833      	ldr	r3, [r6, #0]
 8002cbc:	0558      	lsls	r0, r3, #21
 8002cbe:	d4f7      	bmi.n	8002cb0 <HAL_RCC_OscConfig+0x3d4>
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	e674      	b.n	80029ae <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002cc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002cd2:	f7ff fb65 	bl	80023a0 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8002df8 <HAL_RCC_OscConfig+0x51c>
      tickstart = HAL_GetTick();
 8002cda:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce0:	e004      	b.n	8002cec <HAL_RCC_OscConfig+0x410>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7ff fb5d 	bl	80023a0 <HAL_GetTick>
 8002ce6:	1bc0      	subs	r0, r0, r7
 8002ce8:	4548      	cmp	r0, r9
 8002cea:	d8be      	bhi.n	8002c6a <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cec:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8002cf0:	079a      	lsls	r2, r3, #30
 8002cf2:	d5f6      	bpl.n	8002ce2 <HAL_RCC_OscConfig+0x406>
    if(pwrclkchanged == SET)
 8002cf4:	2e00      	cmp	r6, #0
 8002cf6:	f43f aeb7 	beq.w	8002a68 <HAL_RCC_OscConfig+0x18c>
 8002cfa:	e03f      	b.n	8002d7c <HAL_RCC_OscConfig+0x4a0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cfc:	f7ff fd4e 	bl	800279c <RCC_SetFlashLatencyFromMSIRange>
 8002d00:	2800      	cmp	r0, #0
 8002d02:	f47f af6b 	bne.w	8002bdc <HAL_RCC_OscConfig+0x300>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d06:	4b3c      	ldr	r3, [pc, #240]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	f042 0208 	orr.w	r2, r2, #8
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	6a21      	ldr	r1, [r4, #32]
 8002d14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	69e1      	ldr	r1, [r4, #28]
 8002d20:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002d24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	e73c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSI48_DISABLE();
 8002d2c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002d38:	f7ff fb32 	bl	80023a0 <HAL_GetTick>
 8002d3c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d3e:	e004      	b.n	8002d4a <HAL_RCC_OscConfig+0x46e>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d40:	f7ff fb2e 	bl	80023a0 <HAL_GetTick>
 8002d44:	1bc0      	subs	r0, r0, r7
 8002d46:	2802      	cmp	r0, #2
 8002d48:	d88f      	bhi.n	8002c6a <HAL_RCC_OscConfig+0x38e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d4a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8002d4e:	079a      	lsls	r2, r3, #30
 8002d50:	d4f6      	bmi.n	8002d40 <HAL_RCC_OscConfig+0x464>
 8002d52:	e6a5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8002d54:	2001      	movs	r0, #1
}
 8002d56:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002d60:	f7ff fb1e 	bl	80023a0 <HAL_GetTick>
 8002d64:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	05d9      	lsls	r1, r3, #23
 8002d6a:	f53f ae52 	bmi.w	8002a12 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6e:	f7ff fb17 	bl	80023a0 <HAL_GetTick>
 8002d72:	eba0 0008 	sub.w	r0, r0, r8
 8002d76:	2802      	cmp	r0, #2
 8002d78:	d9f5      	bls.n	8002d66 <HAL_RCC_OscConfig+0x48a>
 8002d7a:	e776      	b.n	8002c6a <HAL_RCC_OscConfig+0x38e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002d7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
 8002d86:	e66f      	b.n	8002a68 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d88:	f7ff fd08 	bl	800279c <RCC_SetFlashLatencyFromMSIRange>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	f43f af0a 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x2ca>
 8002d92:	e723      	b.n	8002bdc <HAL_RCC_OscConfig+0x300>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d98:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002daa:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dac:	e766      	b.n	8002c7c <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002db0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002db4:	f042 0204 	orr.w	r2, r2, #4
 8002db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002dbc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc8:	e783      	b.n	8002cd2 <HAL_RCC_OscConfig+0x3f6>
      pll_config = RCC->PLLCFGR;
 8002dca:	4e0b      	ldr	r6, [pc, #44]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8002dce:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd0:	f003 0103 	and.w	r1, r3, #3
 8002dd4:	4291      	cmp	r1, r2
 8002dd6:	d051      	beq.n	8002e7c <HAL_RCC_OscConfig+0x5a0>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd8:	2d0c      	cmp	r5, #12
 8002dda:	f43f aeff 	beq.w	8002bdc <HAL_RCC_OscConfig+0x300>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dde:	4d06      	ldr	r5, [pc, #24]	; (8002df8 <HAL_RCC_OscConfig+0x51c>)
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	015b      	lsls	r3, r3, #5
 8002de4:	f53f aefa 	bmi.w	8002bdc <HAL_RCC_OscConfig+0x300>
            __HAL_RCC_PLL_DISABLE();
 8002de8:	682b      	ldr	r3, [r5, #0]
 8002dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dee:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002df0:	f7ff fad6 	bl	80023a0 <HAL_GetTick>
 8002df4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df6:	e00d      	b.n	8002e14 <HAL_RCC_OscConfig+0x538>
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	08006acc 	.word	0x08006acc
 8002e00:	20000120 	.word	0x20000120
 8002e04:	20000118 	.word	0x20000118
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7ff faca 	bl	80023a0 <HAL_GetTick>
 8002e0c:	1b80      	subs	r0, r0, r6
 8002e0e:	2802      	cmp	r0, #2
 8002e10:	f63f af2b 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	019f      	lsls	r7, r3, #6
 8002e18:	d4f6      	bmi.n	8002e08 <HAL_RCC_OscConfig+0x52c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1a:	68e9      	ldr	r1, [r5, #12]
 8002e1c:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_RCC_OscConfig+0x61c>)
 8002e1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e20:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8002e22:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002e24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e26:	400b      	ands	r3, r1
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8002e2e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002e32:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8002e36:	3801      	subs	r0, #1
 8002e38:	0849      	lsrs	r1, r1, #1
 8002e3a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002e3e:	3901      	subs	r1, #1
 8002e40:	0852      	lsrs	r2, r2, #1
 8002e42:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002e46:	3a01      	subs	r2, #1
 8002e48:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002e4c:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8002e4e:	682b      	ldr	r3, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e50:	4e2a      	ldr	r6, [pc, #168]	; (8002efc <HAL_RCC_OscConfig+0x620>)
            __HAL_RCC_PLL_ENABLE();
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e56:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e58:	68eb      	ldr	r3, [r5, #12]
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002e60:	f7ff fa9e 	bl	80023a0 <HAL_GetTick>
 8002e64:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	e005      	b.n	8002e74 <HAL_RCC_OscConfig+0x598>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7ff fa9a 	bl	80023a0 <HAL_GetTick>
 8002e6c:	1b00      	subs	r0, r0, r4
 8002e6e:	2802      	cmp	r0, #2
 8002e70:	f63f aefb 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e74:	6833      	ldr	r3, [r6, #0]
 8002e76:	019d      	lsls	r5, r3, #6
 8002e78:	d5f6      	bpl.n	8002e68 <HAL_RCC_OscConfig+0x58c>
 8002e7a:	e639      	b.n	8002af0 <HAL_RCC_OscConfig+0x214>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002e7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e82:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e84:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002e88:	d1a6      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e90:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002e94:	d1a0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002e98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e9c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002ea0:	d19a      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ea4:	0852      	lsrs	r2, r2, #1
 8002ea6:	3a01      	subs	r2, #1
 8002ea8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eac:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002eb0:	d192      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eb4:	0852      	lsrs	r2, r2, #1
 8002eb6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002eba:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002ec0:	d18a      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec2:	6833      	ldr	r3, [r6, #0]
 8002ec4:	0198      	lsls	r0, r3, #6
 8002ec6:	f53f ae13 	bmi.w	8002af0 <HAL_RCC_OscConfig+0x214>
          __HAL_RCC_PLL_ENABLE();
 8002eca:	6833      	ldr	r3, [r6, #0]
 8002ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed2:	68f3      	ldr	r3, [r6, #12]
 8002ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed8:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8002eda:	f7ff fa61 	bl	80023a0 <HAL_GetTick>
 8002ede:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee0:	e005      	b.n	8002eee <HAL_RCC_OscConfig+0x612>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7ff fa5d 	bl	80023a0 <HAL_GetTick>
 8002ee6:	1b00      	subs	r0, r0, r4
 8002ee8:	2802      	cmp	r0, #2
 8002eea:	f63f aebe 	bhi.w	8002c6a <HAL_RCC_OscConfig+0x38e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	6833      	ldr	r3, [r6, #0]
 8002ef0:	0199      	lsls	r1, r3, #6
 8002ef2:	d5f6      	bpl.n	8002ee2 <HAL_RCC_OscConfig+0x606>
 8002ef4:	e5fc      	b.n	8002af0 <HAL_RCC_OscConfig+0x214>
 8002ef6:	bf00      	nop
 8002ef8:	019d808c 	.word	0x019d808c
 8002efc:	40021000 	.word	0x40021000

08002f00 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002f00:	2800      	cmp	r0, #0
 8002f02:	f000 8081 	beq.w	8003008 <HAL_RCC_ClockConfig+0x108>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f06:	4a45      	ldr	r2, [pc, #276]	; (800301c <HAL_RCC_ClockConfig+0x11c>)
 8002f08:	6813      	ldr	r3, [r2, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	428b      	cmp	r3, r1
{
 8002f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f14:	460d      	mov	r5, r1
 8002f16:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	d20c      	bcs.n	8002f34 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f24:	6813      	ldr	r3, [r2, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	428b      	cmp	r3, r1
 8002f2c:	d002      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002f2e:	2001      	movs	r0, #1
}
 8002f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	07da      	lsls	r2, r3, #31
 8002f38:	d43f      	bmi.n	8002fba <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3a:	0799      	lsls	r1, r3, #30
 8002f3c:	d506      	bpl.n	8002f4c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3e:	4938      	ldr	r1, [pc, #224]	; (8003020 <HAL_RCC_ClockConfig+0x120>)
 8002f40:	68a0      	ldr	r0, [r4, #8]
 8002f42:	688a      	ldr	r2, [r1, #8]
 8002f44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f48:	4302      	orrs	r2, r0
 8002f4a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4933      	ldr	r1, [pc, #204]	; (800301c <HAL_RCC_ClockConfig+0x11c>)
 8002f4e:	680a      	ldr	r2, [r1, #0]
 8002f50:	f002 0207 	and.w	r2, r2, #7
 8002f54:	42aa      	cmp	r2, r5
 8002f56:	d909      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x6c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f58:	680a      	ldr	r2, [r1, #0]
 8002f5a:	f022 0207 	bic.w	r2, r2, #7
 8002f5e:	432a      	orrs	r2, r5
 8002f60:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	680a      	ldr	r2, [r1, #0]
 8002f64:	f002 0207 	and.w	r2, r2, #7
 8002f68:	42aa      	cmp	r2, r5
 8002f6a:	d1e0      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	075a      	lsls	r2, r3, #29
 8002f6e:	d506      	bpl.n	8002f7e <HAL_RCC_ClockConfig+0x7e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f70:	492b      	ldr	r1, [pc, #172]	; (8003020 <HAL_RCC_ClockConfig+0x120>)
 8002f72:	68e0      	ldr	r0, [r4, #12]
 8002f74:	688a      	ldr	r2, [r1, #8]
 8002f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f7a:	4302      	orrs	r2, r0
 8002f7c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7e:	071b      	lsls	r3, r3, #28
 8002f80:	d507      	bpl.n	8002f92 <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f82:	4a27      	ldr	r2, [pc, #156]	; (8003020 <HAL_RCC_ClockConfig+0x120>)
 8002f84:	6921      	ldr	r1, [r4, #16]
 8002f86:	6893      	ldr	r3, [r2, #8]
 8002f88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002f8c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f90:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f92:	f7ff fc49 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8002f96:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x120>)
 8002f98:	4c22      	ldr	r4, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x124>)
 8002f9a:	6892      	ldr	r2, [r2, #8]
 8002f9c:	4922      	ldr	r1, [pc, #136]	; (8003028 <HAL_RCC_ClockConfig+0x128>)
 8002f9e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8002fa6:	4821      	ldr	r0, [pc, #132]	; (800302c <HAL_RCC_ClockConfig+0x12c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa8:	f002 021f 	and.w	r2, r2, #31
 8002fac:	40d3      	lsrs	r3, r2
}
 8002fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8002fb2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb4:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8002fb6:	f7ff b9b1 	b.w	800231c <HAL_InitTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fba:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbc:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbe:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc0:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	d023      	beq.n	800300c <HAL_RCC_ClockConfig+0x10c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc4:	2a02      	cmp	r2, #2
 8002fc6:	d01c      	beq.n	8003002 <HAL_RCC_ClockConfig+0x102>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fc8:	bb2a      	cbnz	r2, 8003016 <HAL_RCC_ClockConfig+0x116>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fca:	079e      	lsls	r6, r3, #30
 8002fcc:	d5af      	bpl.n	8002f2e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fce:	4e14      	ldr	r6, [pc, #80]	; (8003020 <HAL_RCC_ClockConfig+0x120>)
 8002fd0:	68b3      	ldr	r3, [r6, #8]
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002fda:	f7ff f9e1 	bl	80023a0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fde:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002fe2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCC_ClockConfig+0xf0>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe6:	f7ff f9db 	bl	80023a0 <HAL_GetTick>
 8002fea:	1bc0      	subs	r0, r0, r7
 8002fec:	4540      	cmp	r0, r8
 8002fee:	d810      	bhi.n	8003012 <HAL_RCC_ClockConfig+0x112>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff0:	68b3      	ldr	r3, [r6, #8]
 8002ff2:	6862      	ldr	r2, [r4, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ffc:	d1f3      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xe6>
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	e79b      	b.n	8002f3a <HAL_RCC_ClockConfig+0x3a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003002:	039f      	lsls	r7, r3, #14
 8003004:	d4e3      	bmi.n	8002fce <HAL_RCC_ClockConfig+0xce>
 8003006:	e792      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003008:	2001      	movs	r0, #1
}
 800300a:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	d4de      	bmi.n	8002fce <HAL_RCC_ClockConfig+0xce>
 8003010:	e78d      	b.n	8002f2e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003012:	2003      	movs	r0, #3
 8003014:	e78c      	b.n	8002f30 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003016:	0558      	lsls	r0, r3, #21
 8003018:	d589      	bpl.n	8002f2e <HAL_RCC_ClockConfig+0x2e>
 800301a:	e7d8      	b.n	8002fce <HAL_RCC_ClockConfig+0xce>
 800301c:	40022000 	.word	0x40022000
 8003020:	40021000 	.word	0x40021000
 8003024:	08006acc 	.word	0x08006acc
 8003028:	20000118 	.word	0x20000118
 800302c:	20000120 	.word	0x20000120

08003030 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003032:	4a06      	ldr	r2, [pc, #24]	; (800304c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003034:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003036:	4906      	ldr	r1, [pc, #24]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003038:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800303c:	6808      	ldr	r0, [r1, #0]
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	f003 031f 	and.w	r3, r3, #31
}
 8003044:	40d8      	lsrs	r0, r3
 8003046:	4770      	bx	lr
 8003048:	40021000 	.word	0x40021000
 800304c:	08006adc 	.word	0x08006adc
 8003050:	20000118 	.word	0x20000118

08003054 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003056:	4a06      	ldr	r2, [pc, #24]	; (8003070 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003058:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800305a:	4906      	ldr	r1, [pc, #24]	; (8003074 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800305c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003060:	6808      	ldr	r0, [r1, #0]
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
}
 8003068:	40d8      	lsrs	r0, r3
 800306a:	4770      	bx	lr
 800306c:	40021000 	.word	0x40021000
 8003070:	08006adc 	.word	0x08006adc
 8003074:	20000118 	.word	0x20000118

08003078 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <RCCEx_PLLSAI1_Config+0x120>)
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	0792      	lsls	r2, r2, #30
{
 8003080:	4604      	mov	r4, r0
 8003082:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003084:	d007      	beq.n	8003096 <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	6801      	ldr	r1, [r0, #0]
 800308a:	f002 0203 	and.w	r2, r2, #3
 800308e:	428a      	cmp	r2, r1
 8003090:	d04b      	beq.n	800312a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003092:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003096:	6800      	ldr	r0, [r0, #0]
 8003098:	2802      	cmp	r0, #2
 800309a:	d057      	beq.n	800314c <RCCEx_PLLSAI1_Config+0xd4>
 800309c:	2803      	cmp	r0, #3
 800309e:	d04e      	beq.n	800313e <RCCEx_PLLSAI1_Config+0xc6>
 80030a0:	2801      	cmp	r0, #1
 80030a2:	d1f6      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	079b      	lsls	r3, r3, #30
 80030a8:	d5f4      	bpl.n	8003094 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030aa:	493b      	ldr	r1, [pc, #236]	; (8003198 <RCCEx_PLLSAI1_Config+0x120>)
 80030ac:	6862      	ldr	r2, [r4, #4]
 80030ae:	68cb      	ldr	r3, [r1, #12]
 80030b0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80030b4:	4318      	orrs	r0, r3
 80030b6:	3a01      	subs	r2, #1
 80030b8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80030bc:	60c8      	str	r0, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80030be:	4d36      	ldr	r5, [pc, #216]	; (8003198 <RCCEx_PLLSAI1_Config+0x120>)
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030c6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80030c8:	f7ff f96a 	bl	80023a0 <HAL_GetTick>
 80030cc:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ce:	e004      	b.n	80030da <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030d0:	f7ff f966 	bl	80023a0 <HAL_GetTick>
 80030d4:	1b83      	subs	r3, r0, r6
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d83c      	bhi.n	8003154 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030da:	682b      	ldr	r3, [r5, #0]
 80030dc:	011a      	lsls	r2, r3, #4
 80030de:	d4f7      	bmi.n	80030d0 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 80030e0:	2f00      	cmp	r7, #0
 80030e2:	d139      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80030e8:	692a      	ldr	r2, [r5, #16]
 80030ea:	06db      	lsls	r3, r3, #27
 80030ec:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80030f0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80030f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030f8:	4313      	orrs	r3, r2
 80030fa:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80030fc:	4d26      	ldr	r5, [pc, #152]	; (8003198 <RCCEx_PLLSAI1_Config+0x120>)
 80030fe:	682b      	ldr	r3, [r5, #0]
 8003100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003104:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003106:	f7ff f94b 	bl	80023a0 <HAL_GetTick>
 800310a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800310c:	e004      	b.n	8003118 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800310e:	f7ff f947 	bl	80023a0 <HAL_GetTick>
 8003112:	1b83      	subs	r3, r0, r6
 8003114:	2b02      	cmp	r3, #2
 8003116:	d81d      	bhi.n	8003154 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	d5f7      	bpl.n	800310e <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800311e:	69a2      	ldr	r2, [r4, #24]
 8003120:	692b      	ldr	r3, [r5, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	612b      	str	r3, [r5, #16]
 8003126:	2000      	movs	r0, #0
}
 8003128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800312a:	2a00      	cmp	r2, #0
 800312c:	d0b1      	beq.n	8003092 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800312e:	68db      	ldr	r3, [r3, #12]
       ||
 8003130:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003132:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003136:	3301      	adds	r3, #1
       ||
 8003138:	4293      	cmp	r3, r2
 800313a:	d1aa      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0x1a>
 800313c:	e7bf      	b.n	80030be <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	0395      	lsls	r5, r2, #14
 8003142:	d4b2      	bmi.n	80030aa <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0359      	lsls	r1, r3, #13
 8003148:	d5a3      	bpl.n	8003092 <RCCEx_PLLSAI1_Config+0x1a>
 800314a:	e7ae      	b.n	80030aa <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	055e      	lsls	r6, r3, #21
 8003150:	d59f      	bpl.n	8003092 <RCCEx_PLLSAI1_Config+0x1a>
 8003152:	e7aa      	b.n	80030aa <RCCEx_PLLSAI1_Config+0x32>
        status = HAL_TIMEOUT;
 8003154:	2003      	movs	r0, #3
}
 8003156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8003158:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800315a:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800315c:	d00d      	beq.n	800317a <RCCEx_PLLSAI1_Config+0x102>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800315e:	6962      	ldr	r2, [r4, #20]
 8003160:	68a1      	ldr	r1, [r4, #8]
 8003162:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003166:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800316a:	0852      	lsrs	r2, r2, #1
 800316c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003170:	3a01      	subs	r2, #1
 8003172:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003176:	612b      	str	r3, [r5, #16]
 8003178:	e7c0      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800317a:	6922      	ldr	r2, [r4, #16]
 800317c:	68a1      	ldr	r1, [r4, #8]
 800317e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003182:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003186:	0852      	lsrs	r2, r2, #1
 8003188:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800318c:	3a01      	subs	r2, #1
 800318e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003192:	612b      	str	r3, [r5, #16]
 8003194:	e7b2      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x84>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_RCCEx_PeriphCLKConfig>:
{
 800319c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031a0:	6803      	ldr	r3, [r0, #0]
 80031a2:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
{
 80031a6:	b083      	sub	sp, #12
 80031a8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031aa:	d00c      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80031ac:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80031ae:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80031b2:	f000 811c 	beq.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x252>
 80031b6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80031ba:	f000 80fa 	beq.w	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 80031be:	2900      	cmp	r1, #0
 80031c0:	f000 810d 	beq.w	80033de <HAL_RCCEx_PeriphCLKConfig+0x242>
 80031c4:	2701      	movs	r7, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c6:	039e      	lsls	r6, r3, #14
 80031c8:	d559      	bpl.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ca:	4b9c      	ldr	r3, [pc, #624]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80031cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031ce:	00d5      	lsls	r5, r2, #3
 80031d0:	f140 80e1 	bpl.w	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    FlagStatus       pwrclkchanged = RESET;
 80031d4:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d8:	4d99      	ldr	r5, [pc, #612]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80031e2:	f7ff f8dd 	bl	80023a0 <HAL_GetTick>
 80031e6:	4606      	mov	r6, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031e8:	e005      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7ff f8d9 	bl	80023a0 <HAL_GetTick>
 80031ee:	1b83      	subs	r3, r0, r6
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	f200 80e8 	bhi.w	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	05d8      	lsls	r0, r3, #23
 80031fa:	d5f6      	bpl.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    if(ret == HAL_OK)
 80031fc:	bbb7      	cbnz	r7, 800326c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031fe:	4d8f      	ldr	r5, [pc, #572]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003200:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003204:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003208:	d027      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800320a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800320c:	429a      	cmp	r2, r3
 800320e:	d025      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003210:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003214:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003220:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003224:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800322c:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800322e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003232:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003236:	f140 80fe 	bpl.w	8003436 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        tickstart = HAL_GetTick();
 800323a:	f7ff f8b1 	bl	80023a0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003242:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003244:	e005      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xb6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7ff f8ab 	bl	80023a0 <HAL_GetTick>
 800324a:	1b80      	subs	r0, r0, r6
 800324c:	4548      	cmp	r0, r9
 800324e:	f200 80ba 	bhi.w	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003252:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003256:	079b      	lsls	r3, r3, #30
 8003258:	d5f5      	bpl.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800325a:	6d23      	ldr	r3, [r4, #80]	; 0x50
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800325c:	4977      	ldr	r1, [pc, #476]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800325e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003262:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 800326c:	f1b8 0f00 	cmp.w	r8, #0
 8003270:	d004      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003272:	4a72      	ldr	r2, [pc, #456]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003274:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327a:	6593      	str	r3, [r2, #88]	; 0x58
 800327c:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800327e:	07de      	lsls	r6, r3, #31
 8003280:	d508      	bpl.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003282:	496e      	ldr	r1, [pc, #440]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003284:	6a20      	ldr	r0, [r4, #32]
 8003286:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800328a:	f022 0203 	bic.w	r2, r2, #3
 800328e:	4302      	orrs	r2, r0
 8003290:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003294:	079d      	lsls	r5, r3, #30
 8003296:	d508      	bpl.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003298:	4968      	ldr	r1, [pc, #416]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800329a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800329c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032a0:	f022 020c 	bic.w	r2, r2, #12
 80032a4:	4302      	orrs	r2, r0
 80032a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032aa:	0698      	lsls	r0, r3, #26
 80032ac:	d508      	bpl.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032ae:	4963      	ldr	r1, [pc, #396]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80032b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032ba:	4302      	orrs	r2, r0
 80032bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032c0:	0599      	lsls	r1, r3, #22
 80032c2:	d508      	bpl.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032c4:	495d      	ldr	r1, [pc, #372]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80032c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032cc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80032d0:	4302      	orrs	r2, r0
 80032d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032d6:	055a      	lsls	r2, r3, #21
 80032d8:	d508      	bpl.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032da:	4958      	ldr	r1, [pc, #352]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80032de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032e2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80032e6:	4302      	orrs	r2, r0
 80032e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ec:	065e      	lsls	r6, r3, #25
 80032ee:	d508      	bpl.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f0:	4952      	ldr	r1, [pc, #328]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80032f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80032fc:	4302      	orrs	r2, r0
 80032fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003302:	05dd      	lsls	r5, r3, #23
 8003304:	d508      	bpl.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003306:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003308:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800330a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800330e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003312:	4302      	orrs	r2, r0
 8003314:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003318:	0498      	lsls	r0, r3, #18
 800331a:	d50e      	bpl.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800331c:	4947      	ldr	r1, [pc, #284]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800331e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003320:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003324:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003328:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800332a:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800332e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003332:	d04a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x22e>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003334:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003338:	d067      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800333a:	0359      	lsls	r1, r3, #13
 800333c:	d50e      	bpl.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800333e:	493f      	ldr	r1, [pc, #252]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003340:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003342:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003346:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800334a:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800334c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003350:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003354:	d03e      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003356:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800335a:	d05e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800335c:	045a      	lsls	r2, r3, #17
 800335e:	d50b      	bpl.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003360:	4836      	ldr	r0, [pc, #216]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003362:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003364:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800336c:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800336e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003372:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003376:	d040      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	d508      	bpl.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800337c:	4a2f      	ldr	r2, [pc, #188]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800337e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003380:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003384:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003388:	430b      	orrs	r3, r1
 800338a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800338e:	4638      	mov	r0, r7
 8003390:	b003      	add	sp, #12
 8003392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003398:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800339c:	659a      	str	r2, [r3, #88]	; 0x58
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80033a8:	f04f 0801 	mov.w	r8, #1
 80033ac:	e714      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80033ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80033b0:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b2:	4822      	ldr	r0, [pc, #136]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033b4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80033b8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80033bc:	4311      	orrs	r1, r2
 80033be:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80033c2:	2700      	movs	r7, #0
 80033c4:	e6ff      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = HAL_TIMEOUT;
 80033c6:	2703      	movs	r7, #3
 80033c8:	e750      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ca:	68ca      	ldr	r2, [r1, #12]
 80033cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033d0:	60ca      	str	r2, [r1, #12]
 80033d2:	e7b2      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d4:	68ca      	ldr	r2, [r1, #12]
 80033d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033da:	60ca      	str	r2, [r1, #12]
 80033dc:	e7be      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033de:	3004      	adds	r0, #4
 80033e0:	f7ff fe4a 	bl	8003078 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80033e4:	4607      	mov	r7, r0
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d0e1      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x212>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	e6eb      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80033ee:	4813      	ldr	r0, [pc, #76]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80033f0:	68c2      	ldr	r2, [r0, #12]
 80033f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033f6:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 80033f8:	e7db      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033fa:	2102      	movs	r1, #2
 80033fc:	1d20      	adds	r0, r4, #4
 80033fe:	f7ff fe3b 	bl	8003078 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003402:	b190      	cbz	r0, 800342a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	4607      	mov	r7, r0
 8003408:	e7b6      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800340a:	2101      	movs	r1, #1
 800340c:	1d20      	adds	r0, r4, #4
 800340e:	f7ff fe33 	bl	8003078 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003412:	b170      	cbz	r0, 8003432 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	4607      	mov	r7, r0
 8003418:	e78f      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800341a:	2101      	movs	r1, #1
 800341c:	1d20      	adds	r0, r4, #4
 800341e:	f7ff fe2b 	bl	8003078 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003422:	b120      	cbz	r0, 800342e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	4607      	mov	r7, r0
 8003428:	e798      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	e7a4      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	e794      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	e781      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003436:	4613      	mov	r3, r2
 8003438:	e710      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000

08003444 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003444:	b538      	push	{r3, r4, r5, lr}
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <RTC_ExitInitMode+0x8c>)
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800344e:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	0691      	lsls	r1, r2, #26
{
 8003454:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003456:	d414      	bmi.n	8003482 <RTC_ExitInitMode+0x3e>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003458:	6802      	ldr	r2, [r0, #0]
 800345a:	68d3      	ldr	r3, [r2, #12]
 800345c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003460:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8003462:	f7fe ff9d 	bl	80023a0 <HAL_GetTick>
 8003466:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003468:	e005      	b.n	8003476 <RTC_ExitInitMode+0x32>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800346a:	f7fe ff99 	bl	80023a0 <HAL_GetTick>
 800346e:	1b43      	subs	r3, r0, r5
 8003470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003474:	d827      	bhi.n	80034c6 <RTC_ExitInitMode+0x82>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	069a      	lsls	r2, r3, #26
 800347c:	d5f5      	bpl.n	800346a <RTC_ExitInitMode+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2000      	movs	r0, #0
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8003480:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003482:	689a      	ldr	r2, [r3, #8]
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003484:	6801      	ldr	r1, [r0, #0]
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003486:	f022 0220 	bic.w	r2, r2, #32
 800348a:	609a      	str	r2, [r3, #8]
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800348c:	68cb      	ldr	r3, [r1, #12]
 800348e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003492:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8003494:	f7fe ff84 	bl	80023a0 <HAL_GetTick>
 8003498:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800349a:	e005      	b.n	80034a8 <RTC_ExitInitMode+0x64>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800349c:	f7fe ff80 	bl	80023a0 <HAL_GetTick>
 80034a0:	1b43      	subs	r3, r0, r5
 80034a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a6:	d80a      	bhi.n	80034be <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	069b      	lsls	r3, r3, #26
 80034ae:	d5f5      	bpl.n	800349c <RTC_ExitInitMode+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <RTC_ExitInitMode+0x8c>)
 80034b4:	6893      	ldr	r3, [r2, #8]
 80034b6:	f043 0320 	orr.w	r3, r3, #32
 80034ba:	6093      	str	r3, [r2, #8]
}
 80034bc:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034be:	2003      	movs	r0, #3
 80034c0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
 80034c4:	e7f5      	b.n	80034b2 <RTC_ExitInitMode+0x6e>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034c6:	2003      	movs	r0, #3
 80034c8:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
}
 80034cc:	bd38      	pop	{r3, r4, r5, pc}
 80034ce:	bf00      	nop
 80034d0:	40002800 	.word	0x40002800

080034d4 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d053      	beq.n	8003580 <HAL_RTC_Init+0xac>
{
 80034d8:	b538      	push	{r3, r4, r5, lr}
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80034da:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80034de:	4604      	mov	r4, r0
 80034e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d046      	beq.n	8003576 <HAL_RTC_Init+0xa2>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	21ca      	movs	r1, #202	; 0xca
 80034ec:	2253      	movs	r2, #83	; 0x53
    hrtc->State = HAL_RTC_STATE_BUSY;
 80034ee:	2002      	movs	r0, #2
 80034f0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034f4:	6259      	str	r1, [r3, #36]	; 0x24
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	0651      	lsls	r1, r2, #25
 80034fc:	d529      	bpl.n	8003552 <HAL_RTC_Init+0x7e>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80034fe:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003500:	6862      	ldr	r2, [r4, #4]
 8003502:	6925      	ldr	r5, [r4, #16]
 8003504:	69a0      	ldr	r0, [r4, #24]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003506:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800350a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800350e:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003510:	6899      	ldr	r1, [r3, #8]
 8003512:	432a      	orrs	r2, r5
 8003514:	4302      	orrs	r2, r0
 8003516:	430a      	orrs	r2, r1
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003518:	68e1      	ldr	r1, [r4, #12]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800351a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800351c:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68a1      	ldr	r1, [r4, #8]
 8003522:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003526:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff ff8b 	bl	8003444 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800352e:	b978      	cbnz	r0, 8003550 <HAL_RTC_Init+0x7c>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003530:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003532:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003534:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003536:	69e2      	ldr	r2, [r4, #28]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003538:	f021 0103 	bic.w	r1, r1, #3
 800353c:	64d9      	str	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800353e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003540:	432a      	orrs	r2, r5
 8003542:	430a      	orrs	r2, r1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003544:	25ff      	movs	r5, #255	; 0xff
          hrtc->State = HAL_RTC_STATE_READY;
 8003546:	2101      	movs	r1, #1
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003548:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800354a:	625d      	str	r5, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 800354c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
}
 8003550:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003552:	f04f 32ff 	mov.w	r2, #4294967295
 8003556:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003558:	f7fe ff22 	bl	80023a0 <HAL_GetTick>
 800355c:	4605      	mov	r5, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800355e:	e005      	b.n	800356c <HAL_RTC_Init+0x98>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003560:	f7fe ff1e 	bl	80023a0 <HAL_GetTick>
 8003564:	1b43      	subs	r3, r0, r5
 8003566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800356a:	d80b      	bhi.n	8003584 <HAL_RTC_Init+0xb0>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	0652      	lsls	r2, r2, #25
 8003572:	d4c4      	bmi.n	80034fe <HAL_RTC_Init+0x2a>
 8003574:	e7f4      	b.n	8003560 <HAL_RTC_Init+0x8c>
      hrtc->Lock = HAL_UNLOCKED;
 8003576:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800357a:	f7fe fd1b 	bl	8001fb4 <HAL_RTC_MspInit>
 800357e:	e7b3      	b.n	80034e8 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003580:	2001      	movs	r0, #1
}
 8003582:	4770      	bx	lr
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003584:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003586:	2003      	movs	r0, #3
 8003588:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800358c:	68db      	ldr	r3, [r3, #12]
}
 800358e:	bd38      	pop	{r3, r4, r5, pc}

08003590 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003590:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d057      	beq.n	8003648 <HAL_RTCEx_SetWakeUpTimer_IT+0xb8>
{
 8003598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800359c:	6803      	ldr	r3, [r0, #0]
 800359e:	460f      	mov	r7, r1
 80035a0:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 80035a2:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035a4:	2202      	movs	r2, #2
  __HAL_LOCK(hrtc);
 80035a6:	f880 1020 	strb.w	r1, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035aa:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035ae:	21ca      	movs	r1, #202	; 0xca
 80035b0:	2253      	movs	r2, #83	; 0x53
 80035b2:	6259      	str	r1, [r3, #36]	; 0x24
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035bc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035c6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	0652      	lsls	r2, r2, #25
 80035cc:	4604      	mov	r4, r0
 80035ce:	d521      	bpl.n	8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0x84>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80035d0:	615f      	str	r7, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80035d2:	689a      	ldr	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80035d4:	491d      	ldr	r1, [pc, #116]	; (800364c <HAL_RTCEx_SetWakeUpTimer_IT+0xbc>)
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80035d6:	f022 0207 	bic.w	r2, r2, #7
 80035da:	4316      	orrs	r6, r2
 80035dc:	609e      	str	r6, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80035de:	680a      	ldr	r2, [r1, #0]
 80035e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035e4:	600a      	str	r2, [r1, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80035e6:	688a      	ldr	r2, [r1, #8]
 80035e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035ec:	608a      	str	r2, [r1, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80035f6:	689a      	ldr	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035f8:	2100      	movs	r1, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035fa:	20ff      	movs	r0, #255	; 0xff
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80035fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  hrtc->State = HAL_RTC_STATE_READY;
 8003600:	2501      	movs	r5, #1
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003602:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003604:	6258      	str	r0, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003606:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800360a:	f884 1020 	strb.w	r1, [r4, #32]

  return HAL_OK;
 800360e:	4608      	mov	r0, r1
}
 8003610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8003614:	f7fe fec4 	bl	80023a0 <HAL_GetTick>
 8003618:	4680      	mov	r8, r0
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	68dd      	ldr	r5, [r3, #12]
 800361e:	f015 0504 	ands.w	r5, r5, #4
 8003622:	d1d5      	bne.n	80035d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x40>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003624:	f7fe febc 	bl	80023a0 <HAL_GetTick>
 8003628:	eba0 0008 	sub.w	r0, r0, r8
 800362c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003630:	d9f3      	bls.n	800361a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003632:	6822      	ldr	r2, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003634:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003636:	21ff      	movs	r1, #255	; 0xff
 8003638:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800363a:	f884 5020 	strb.w	r5, [r4, #32]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800363e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return HAL_TIMEOUT;
 8003642:	4618      	mov	r0, r3
}
 8003644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hrtc);
 8003648:	2002      	movs	r0, #2
}
 800364a:	4770      	bx	lr
 800364c:	40010400 	.word	0x40010400

08003650 <HAL_RTCEx_DeactivateWakeUpTimer>:
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003650:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d037      	beq.n	80036c8 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>
{
 8003658:	b570      	push	{r4, r5, r6, lr}

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	4605      	mov	r5, r0
 800365e:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003660:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003662:	2253      	movs	r2, #83	; 0x53
  __HAL_LOCK(hrtc);
 8003664:	2401      	movs	r4, #1
 8003666:	f885 4020 	strb.w	r4, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800366a:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800366e:	6259      	str	r1, [r3, #36]	; 0x24
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003678:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003680:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003682:	f7fe fe8d 	bl	80023a0 <HAL_GetTick>
 8003686:	4606      	mov	r6, r0
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003688:	e005      	b.n	8003696 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800368a:	f7fe fe89 	bl	80023a0 <HAL_GetTick>
 800368e:	1b83      	subs	r3, r0, r6
 8003690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003694:	d80e      	bhi.n	80036b4 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003696:	682a      	ldr	r2, [r5, #0]
 8003698:	68d4      	ldr	r4, [r2, #12]
 800369a:	f014 0404 	ands.w	r4, r4, #4
 800369e:	d0f4      	beq.n	800368a <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036a0:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a2:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 80036a4:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a6:	6250      	str	r0, [r2, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80036a8:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 80036ac:	f885 3020 	strb.w	r3, [r5, #32]

  return HAL_OK;
 80036b0:	4618      	mov	r0, r3
}
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036b4:	682a      	ldr	r2, [r5, #0]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036b8:	21ff      	movs	r1, #255	; 0xff
 80036ba:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 80036bc:	f885 4020 	strb.w	r4, [r5, #32]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036c0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
      return HAL_TIMEOUT;
 80036c4:	4618      	mov	r0, r3
}
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 80036c8:	2002      	movs	r0, #2
}
 80036ca:	4770      	bx	lr

080036cc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80036cc:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80036ce:	6803      	ldr	r3, [r0, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80036d0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
{
 80036d4:	b510      	push	{r4, lr}
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80036d6:	6151      	str	r1, [r2, #20]
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	0552      	lsls	r2, r2, #21
{
 80036dc:	4604      	mov	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80036de:	d403      	bmi.n	80036e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80036e6:	bd10      	pop	{r4, pc}
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80036f0:	60da      	str	r2, [r3, #12]
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80036f2:	f7fd ffcf 	bl	8001694 <HAL_RTCEx_WakeUpTimerEventCallback>
  hrtc->State = HAL_RTC_STATE_READY;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	40010400 	.word	0x40010400

08003704 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	2800      	cmp	r0, #0
 8003706:	d06d      	beq.n	80037e4 <HAL_TIM_Base_Init+0xe0>
{
 8003708:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800370e:	4604      	mov	r4, r0
 8003710:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003714:	2b00      	cmp	r3, #0
 8003716:	d047      	beq.n	80037a8 <HAL_TIM_Base_Init+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003718:	6821      	ldr	r1, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800371a:	4a33      	ldr	r2, [pc, #204]	; (80037e8 <HAL_TIM_Base_Init+0xe4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003722:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8003724:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003726:	d044      	beq.n	80037b2 <HAL_TIM_Base_Init+0xae>
 8003728:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800372c:	d048      	beq.n	80037c0 <HAL_TIM_Base_Init+0xbc>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003732:	4291      	cmp	r1, r2
 8003734:	d00d      	beq.n	8003752 <HAL_TIM_Base_Init+0x4e>
 8003736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800373a:	4291      	cmp	r1, r2
 800373c:	d009      	beq.n	8003752 <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800373e:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003740:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003742:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003748:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800374a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800374c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800374e:	628a      	str	r2, [r1, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003750:	e00e      	b.n	8003770 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003752:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003754:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800375c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003760:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003762:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003764:	68e3      	ldr	r3, [r4, #12]
 8003766:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	628b      	str	r3, [r1, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800376c:	6963      	ldr	r3, [r4, #20]
 800376e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003770:	2301      	movs	r3, #1
 8003772:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800377c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003780:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003784:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800378c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003798:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800379c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80037a4:	2000      	movs	r0, #0
}
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80037a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80037ac:	f7fe fd0e 	bl	80021cc <HAL_TIM_Base_MspInit>
 80037b0:	e7b2      	b.n	8003718 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80037b2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b6:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80037bc:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80037be:	e7ca      	b.n	8003756 <HAL_TIM_Base_Init+0x52>
    tmpcr1 |= Structure->CounterMode;
 80037c0:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80037ca:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80037cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80037d8:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80037de:	6863      	ldr	r3, [r4, #4]
 80037e0:	628b      	str	r3, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e2:	e7c5      	b.n	8003770 <HAL_TIM_Base_Init+0x6c>
    return HAL_ERROR;
 80037e4:	2001      	movs	r0, #1
}
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00

080037ec <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80037ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d113      	bne.n	800381c <HAL_TIM_Base_Start+0x30>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f4:	6803      	ldr	r3, [r0, #0]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	; (8003834 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fa:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003800:	d00e      	beq.n	8003820 <HAL_TIM_Base_Start+0x34>
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d00b      	beq.n	8003820 <HAL_TIM_Base_Start+0x34>
 8003808:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003818:	2000      	movs	r0, #0
 800381a:	4770      	bx	lr
    return HAL_ERROR;
 800381c:	2001      	movs	r0, #1
 800381e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003820:	6899      	ldr	r1, [r3, #8]
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <HAL_TIM_Base_Start+0x4c>)
 8003824:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	2a06      	cmp	r2, #6
 8003828:	d002      	beq.n	8003830 <HAL_TIM_Base_Start+0x44>
 800382a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800382e:	d1ef      	bne.n	8003810 <HAL_TIM_Base_Start+0x24>
  return HAL_OK;
 8003830:	2000      	movs	r0, #0
}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	00010007 	.word	0x00010007

0800383c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d02c      	beq.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8003844:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003846:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003848:	4c16      	ldr	r4, [pc, #88]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003850:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8003852:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003854:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003856:	d018      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003858:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800385e:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003860:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8003864:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003866:	d002      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800386a:	429a      	cmp	r2, r3
 800386c:	d104      	bne.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003870:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003874:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003876:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003878:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800387a:	2201      	movs	r2, #1
 800387c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003880:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003884:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8003886:	4618      	mov	r0, r3
}
 8003888:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800388a:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800388e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003892:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003898:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800389a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	e7e7      	b.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 800389e:	2002      	movs	r0, #2
}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40014000 	.word	0x40014000

080038ac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038ae:	07da      	lsls	r2, r3, #31
{
 80038b0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038b2:	d506      	bpl.n	80038c2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b4:	6801      	ldr	r1, [r0, #0]
 80038b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80038b8:	684a      	ldr	r2, [r1, #4]
 80038ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80038be:	4322      	orrs	r2, r4
 80038c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c2:	079c      	lsls	r4, r3, #30
 80038c4:	d506      	bpl.n	80038d4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c6:	6801      	ldr	r1, [r0, #0]
 80038c8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80038ca:	684a      	ldr	r2, [r1, #4]
 80038cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038d0:	4322      	orrs	r2, r4
 80038d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038d4:	0759      	lsls	r1, r3, #29
 80038d6:	d506      	bpl.n	80038e6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d8:	6801      	ldr	r1, [r0, #0]
 80038da:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80038dc:	684a      	ldr	r2, [r1, #4]
 80038de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038e2:	4322      	orrs	r2, r4
 80038e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e6:	071a      	lsls	r2, r3, #28
 80038e8:	d506      	bpl.n	80038f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ea:	6801      	ldr	r1, [r0, #0]
 80038ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038ee:	684a      	ldr	r2, [r1, #4]
 80038f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f4:	4322      	orrs	r2, r4
 80038f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f8:	06dc      	lsls	r4, r3, #27
 80038fa:	d506      	bpl.n	800390a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038fc:	6801      	ldr	r1, [r0, #0]
 80038fe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003900:	688a      	ldr	r2, [r1, #8]
 8003902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003906:	4322      	orrs	r2, r4
 8003908:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800390a:	0699      	lsls	r1, r3, #26
 800390c:	d506      	bpl.n	800391c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390e:	6801      	ldr	r1, [r0, #0]
 8003910:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003912:	688a      	ldr	r2, [r1, #8]
 8003914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003918:	4322      	orrs	r2, r4
 800391a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800391c:	065a      	lsls	r2, r3, #25
 800391e:	d509      	bpl.n	8003934 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003920:	6801      	ldr	r1, [r0, #0]
 8003922:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003924:	684a      	ldr	r2, [r1, #4]
 8003926:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800392a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003930:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003932:	d00b      	beq.n	800394c <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	d506      	bpl.n	8003946 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003938:	6802      	ldr	r2, [r0, #0]
 800393a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800393c:	6853      	ldr	r3, [r2, #4]
 800393e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003942:	430b      	orrs	r3, r1
 8003944:	6053      	str	r3, [r2, #4]
  }
}
 8003946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800394a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800394c:	684a      	ldr	r2, [r1, #4]
 800394e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003950:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003954:	4322      	orrs	r2, r4
 8003956:	604a      	str	r2, [r1, #4]
 8003958:	e7ec      	b.n	8003934 <UART_AdvFeatureConfig+0x88>
 800395a:	bf00      	nop

0800395c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800395c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395e:	2300      	movs	r3, #0
{
 8003960:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003962:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003966:	f7fe fd1b 	bl	80023a0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8003970:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003972:	d40b      	bmi.n	800398c <UART_CheckIdleState+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	0752      	lsls	r2, r2, #29
 8003978:	d42d      	bmi.n	80039d6 <UART_CheckIdleState+0x7a>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800397c:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 800397e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8003982:	67a2      	str	r2, [r4, #120]	; 0x78

  return HAL_OK;
 8003984:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8003986:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003988:	6623      	str	r3, [r4, #96]	; 0x60
}
 800398a:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	0292      	lsls	r2, r2, #10
 8003990:	d4f0      	bmi.n	8003974 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe fd05 	bl	80023a0 <HAL_GetTick>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003996:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003998:	1b40      	subs	r0, r0, r5
 800399a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800399e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a0:	d22a      	bcs.n	80039f8 <UART_CheckIdleState+0x9c>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039a2:	0750      	lsls	r0, r2, #29
 80039a4:	d5f2      	bpl.n	800398c <UART_CheckIdleState+0x30>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	0511      	lsls	r1, r2, #20
 80039aa:	d5ef      	bpl.n	800398c <UART_CheckIdleState+0x30>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039b0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039b8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039bc:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	f021 0101 	bic.w	r1, r1, #1
 80039c2:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80039c4:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 80039c6:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 80039ca:	67a2      	str	r2, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 80039cc:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80039ce:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039d0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
}
 80039d4:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	0258      	lsls	r0, r3, #9
 80039da:	d4ce      	bmi.n	800397a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039dc:	f7fe fce0 	bl	80023a0 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	1b40      	subs	r0, r0, r5
 80039e4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e8:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	d205      	bcs.n	80039f8 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039ec:	0751      	lsls	r1, r2, #29
 80039ee:	d5f2      	bpl.n	80039d6 <UART_CheckIdleState+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039f0:	69da      	ldr	r2, [r3, #28]
 80039f2:	0512      	lsls	r2, r2, #20
 80039f4:	d5ef      	bpl.n	80039d6 <UART_CheckIdleState+0x7a>
 80039f6:	e7d9      	b.n	80039ac <UART_CheckIdleState+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8003a00:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003a08:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8003a0a:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8003a0e:	67a1      	str	r1, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8003a10:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8003a12:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 8003a14:	bd38      	pop	{r3, r4, r5, pc}
 8003a16:	bf00      	nop

08003a18 <HAL_UART_Init>:
  if (huart == NULL)
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	f000 811a 	beq.w	8003c52 <HAL_UART_Init+0x23a>
{
 8003a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a20:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003a22:	4604      	mov	r4, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d055      	beq.n	8003ad4 <HAL_UART_Init+0xbc>
  __HAL_UART_DISABLE(huart);
 8003a28:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a2a:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a2c:	4993      	ldr	r1, [pc, #588]	; (8003c7c <HAL_UART_Init+0x264>)
  huart->gState = HAL_UART_STATE_BUSY;
 8003a2e:	2224      	movs	r2, #36	; 0x24
 8003a30:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003a32:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a34:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8003a36:	f020 0001 	bic.w	r0, r0, #1
 8003a3a:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a3c:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a3e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a40:	4332      	orrs	r2, r6
 8003a42:	4302      	orrs	r2, r0
 8003a44:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a46:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a48:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a52:	498b      	ldr	r1, [pc, #556]	; (8003c80 <HAL_UART_Init+0x268>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a54:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a58:	432a      	orrs	r2, r5
 8003a5a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a5c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a60:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a62:	d03c      	beq.n	8003ade <HAL_UART_Init+0xc6>
    tmpreg |= huart->Init.OneBitSampling;
 8003a64:	6a26      	ldr	r6, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a66:	4d87      	ldr	r5, [pc, #540]	; (8003c84 <HAL_UART_Init+0x26c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a68:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8003a6c:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6e:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a70:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a72:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a74:	d008      	beq.n	8003a88 <HAL_UART_Init+0x70>
 8003a76:	4a84      	ldr	r2, [pc, #528]	; (8003c88 <HAL_UART_Init+0x270>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f000 80e2 	beq.w	8003c42 <HAL_UART_Init+0x22a>
  huart->RxISR = NULL;
 8003a7e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003a80:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8003a84:	2001      	movs	r0, #1
 8003a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a88:	4b80      	ldr	r3, [pc, #512]	; (8003c8c <HAL_UART_Init+0x274>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	f200 8095 	bhi.w	8003bc4 <HAL_UART_Init+0x1ac>
 8003a9a:	4a7d      	ldr	r2, [pc, #500]	; (8003c90 <HAL_UART_Init+0x278>)
 8003a9c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003aa2:	f000 8098 	beq.w	8003bd6 <HAL_UART_Init+0x1be>
    switch (clocksource)
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d8e9      	bhi.n	8003a7e <HAL_UART_Init+0x66>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_UART_Init+0x98>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003bd1 	.word	0x08003bd1
 8003ab4:	08003bcb 	.word	0x08003bcb
 8003ab8:	08003ba5 	.word	0x08003ba5
 8003abc:	08003a7f 	.word	0x08003a7f
 8003ac0:	08003ba9 	.word	0x08003ba9
 8003ac4:	08003a7f 	.word	0x08003a7f
 8003ac8:	08003a7f 	.word	0x08003a7f
 8003acc:	08003a7f 	.word	0x08003a7f
 8003ad0:	08003b57 	.word	0x08003b57
    huart->Lock = HAL_UNLOCKED;
 8003ad4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003ad8:	f7fe fbae 	bl	8002238 <HAL_UART_MspInit>
 8003adc:	e7a4      	b.n	8003a28 <HAL_UART_Init+0x10>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ade:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae2:	486a      	ldr	r0, [pc, #424]	; (8003c8c <HAL_UART_Init+0x274>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003aec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af4:	f000 80c0 	beq.w	8003c78 <HAL_UART_Init+0x260>
 8003af8:	d80a      	bhi.n	8003b10 <HAL_UART_Init+0xf8>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80b7 	beq.w	8003c6e <HAL_UART_Init+0x256>
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b04:	d1bb      	bne.n	8003a7e <HAL_UART_Init+0x66>
        pclk = HAL_RCC_GetSysClockFreq();
 8003b06:	f7fe fe8f 	bl	8002828 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d050      	beq.n	8003bb0 <HAL_UART_Init+0x198>
 8003b0e:	e004      	b.n	8003b1a <HAL_UART_Init+0x102>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b14:	d1b3      	bne.n	8003a7e <HAL_UART_Init+0x66>
        pclk = (uint32_t) LSE_VALUE;
 8003b16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b1a:	6862      	ldr	r2, [r4, #4]
 8003b1c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003b20:	4283      	cmp	r3, r0
 8003b22:	d8ac      	bhi.n	8003a7e <HAL_UART_Init+0x66>
 8003b24:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003b28:	d8a9      	bhi.n	8003a7e <HAL_UART_Init+0x66>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b2a:	0856      	lsrs	r6, r2, #1
 8003b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b30:	2700      	movs	r7, #0
 8003b32:	fbe3 6700 	umlal	r6, r7, r3, r0
 8003b36:	2500      	movs	r5, #0
 8003b38:	462b      	mov	r3, r5
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	4639      	mov	r1, r7
 8003b3e:	f7fd f843 	bl	8000bc8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b42:	4b54      	ldr	r3, [pc, #336]	; (8003c94 <HAL_UART_Init+0x27c>)
 8003b44:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d898      	bhi.n	8003a7e <HAL_UART_Init+0x66>
          huart->Instance->BRR = usartdiv;
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	60d8      	str	r0, [r3, #12]
  huart->TxISR = NULL;
 8003b50:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
  return ret;
 8003b54:	e012      	b.n	8003b7c <HAL_UART_Init+0x164>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b5a:	6863      	ldr	r3, [r4, #4]
 8003b5c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003b60:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b64:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b66:	f1a0 0210 	sub.w	r2, r0, #16
 8003b6a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d885      	bhi.n	8003a7e <HAL_UART_Init+0x66>
        huart->Instance->BRR = usartdiv;
 8003b72:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8003b74:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 8003b76:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8003b78:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b7e:	b9eb      	cbnz	r3, 8003bbc <HAL_UART_Init+0x1a4>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b90:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003b98:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003b9a:	601a      	str	r2, [r3, #0]
}
 8003b9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 8003ba0:	f7ff bedc 	b.w	800395c <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8003ba4:	483c      	ldr	r0, [pc, #240]	; (8003c98 <HAL_UART_Init+0x280>)
 8003ba6:	e7d8      	b.n	8003b5a <HAL_UART_Init+0x142>
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba8:	f7fe fe3e 	bl	8002828 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d1d4      	bne.n	8003b5a <HAL_UART_Init+0x142>
  huart->RxISR = NULL;
 8003bb0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003bb2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0e1      	beq.n	8003b80 <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff fe75 	bl	80038ac <UART_AdvFeatureConfig>
 8003bc2:	e7dd      	b.n	8003b80 <HAL_UART_Init+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003bc8:	d04e      	beq.n	8003c68 <HAL_UART_Init+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bca:	f7ff fa43 	bl	8003054 <HAL_RCC_GetPCLK2Freq>
        break;
 8003bce:	e7ed      	b.n	8003bac <HAL_UART_Init+0x194>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f7ff fa2e 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
        break;
 8003bd4:	e7ea      	b.n	8003bac <HAL_UART_Init+0x194>
    switch (clocksource)
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	f63f af51 	bhi.w	8003a7e <HAL_UART_Init+0x66>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <HAL_UART_Init+0x1cc>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c63 	.word	0x08003c63
 8003be8:	08003c69 	.word	0x08003c69
 8003bec:	08003c3f 	.word	0x08003c3f
 8003bf0:	08003a7f 	.word	0x08003a7f
 8003bf4:	08003c57 	.word	0x08003c57
 8003bf8:	08003a7f 	.word	0x08003a7f
 8003bfc:	08003a7f 	.word	0x08003a7f
 8003c00:	08003a7f 	.word	0x08003a7f
 8003c04:	08003c09 	.word	0x08003c09
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c0c:	6862      	ldr	r2, [r4, #4]
 8003c0e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c16:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c18:	f1a2 0010 	sub.w	r0, r2, #16
 8003c1c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003c20:	4288      	cmp	r0, r1
 8003c22:	f63f af2c 	bhi.w	8003a7e <HAL_UART_Init+0x66>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c26:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c2a:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8003c2e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c30:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8003c32:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 8003c34:	2200      	movs	r2, #0
        huart->Instance->BRR = brrtemp;
 8003c36:	60cb      	str	r3, [r1, #12]
  huart->TxISR = NULL;
 8003c38:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
  return ret;
 8003c3c:	e79e      	b.n	8003b7c <HAL_UART_Init+0x164>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <HAL_UART_Init+0x284>)
 8003c40:	e7e4      	b.n	8003c0c <HAL_UART_Init+0x1f4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_UART_Init+0x274>)
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_UART_Init+0x288>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c50:	e725      	b.n	8003a9e <HAL_UART_Init+0x86>
}
 8003c52:	2001      	movs	r0, #1
 8003c54:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8003c56:	f7fe fde7 	bl	8002828 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d0a8      	beq.n	8003bb0 <HAL_UART_Init+0x198>
 8003c5e:	0043      	lsls	r3, r0, #1
 8003c60:	e7d4      	b.n	8003c0c <HAL_UART_Init+0x1f4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c62:	f7ff f9e5 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
        break;
 8003c66:	e7f8      	b.n	8003c5a <HAL_UART_Init+0x242>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7ff f9f4 	bl	8003054 <HAL_RCC_GetPCLK2Freq>
        break;
 8003c6c:	e7f5      	b.n	8003c5a <HAL_UART_Init+0x242>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6e:	f7ff f9df 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d09c      	beq.n	8003bb0 <HAL_UART_Init+0x198>
 8003c76:	e750      	b.n	8003b1a <HAL_UART_Init+0x102>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c78:	4807      	ldr	r0, [pc, #28]	; (8003c98 <HAL_UART_Init+0x280>)
 8003c7a:	e74e      	b.n	8003b1a <HAL_UART_Init+0x102>
 8003c7c:	efff69f3 	.word	0xefff69f3
 8003c80:	40008000 	.word	0x40008000
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40004400 	.word	0x40004400
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	08006b14 	.word	0x08006b14
 8003c94:	000ffcff 	.word	0x000ffcff
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	01e84800 	.word	0x01e84800
 8003ca0:	08006b18 	.word	0x08006b18

08003ca4 <UART_WaitOnFlagUntilTimeout>:
{
 8003ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cac:	6804      	ldr	r4, [r0, #0]
 8003cae:	4607      	mov	r7, r0
 8003cb0:	460e      	mov	r6, r1
 8003cb2:	4615      	mov	r5, r2
 8003cb4:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003cba:	d10a      	bne.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cbc:	69e3      	ldr	r3, [r4, #28]
 8003cbe:	ea36 0303 	bics.w	r3, r6, r3
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	429d      	cmp	r5, r3
 8003cca:	d0f7      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003ccc:	2000      	movs	r0, #0
}
 8003cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd2:	69e3      	ldr	r3, [r4, #28]
 8003cd4:	ea36 0303 	bics.w	r3, r6, r3
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	429d      	cmp	r5, r3
 8003ce0:	d1f4      	bne.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe fb5d 	bl	80023a0 <HAL_GetTick>
 8003ce6:	eba0 0009 	sub.w	r0, r0, r9
 8003cea:	4540      	cmp	r0, r8
 8003cec:	d81e      	bhi.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x88>
 8003cee:	f1b8 0f00 	cmp.w	r8, #0
 8003cf2:	d01b      	beq.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x88>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cf4:	683c      	ldr	r4, [r7, #0]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	075a      	lsls	r2, r3, #29
 8003cfa:	d5dc      	bpl.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cfc:	69e3      	ldr	r3, [r4, #28]
 8003cfe:	051b      	lsls	r3, r3, #20
 8003d00:	d5d9      	bpl.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d06:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d0e:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d10:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003d12:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 8003d18:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 8003d1c:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8003d1e:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003d20:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d24:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 8003d2a:	e7d0      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003d38:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8003d3e:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d40:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8003d42:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8003d44:	67b9      	str	r1, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003d46:	f887 4074 	strb.w	r4, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	67f9      	str	r1, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 8003d4c:	e7bf      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0x2a>
 8003d4e:	bf00      	nop

08003d50 <HAL_UART_Transmit>:
{
 8003d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d54:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003d56:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003d58:	2820      	cmp	r0, #32
{
 8003d5a:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003d5c:	d177      	bne.n	8003e4e <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8003d5e:	4688      	mov	r8, r1
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d046      	beq.n	8003df2 <HAL_UART_Transmit+0xa2>
 8003d64:	4617      	mov	r7, r2
 8003d66:	2a00      	cmp	r2, #0
 8003d68:	d043      	beq.n	8003df2 <HAL_UART_Transmit+0xa2>
 8003d6a:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8003d6c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d06c      	beq.n	8003e4e <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d74:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8003d76:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d78:	f04f 0900 	mov.w	r9, #0
 8003d7c:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    __HAL_LOCK(huart);
 8003d80:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d84:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003d86:	f7fe fb0b 	bl	80023a0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003d8c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003d94:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8003d96:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9a:	d05c      	beq.n	8003e56 <HAL_UART_Transmit+0x106>
      pdata16bits = NULL;
 8003d9c:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8003d9e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8003da2:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003da4:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003da6:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8003daa:	b1b3      	cbz	r3, 8003dda <HAL_UART_Transmit+0x8a>
 8003dac:	6822      	ldr	r2, [r4, #0]
 8003dae:	1c69      	adds	r1, r5, #1
 8003db0:	d123      	bne.n	8003dfa <HAL_UART_Transmit+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db2:	69d3      	ldr	r3, [r2, #28]
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	d5fc      	bpl.n	8003db2 <HAL_UART_Transmit+0x62>
      if (pdata8bits == NULL)
 8003db8:	f1b8 0f00 	cmp.w	r8, #0
 8003dbc:	d042      	beq.n	8003e44 <HAL_UART_Transmit+0xf4>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dbe:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003dc2:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003dc4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dd0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e9      	bne.n	8003dae <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	9500      	str	r5, [sp, #0]
 8003ddc:	4633      	mov	r3, r6
 8003dde:	2200      	movs	r2, #0
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	4620      	mov	r0, r4
 8003de4:	f7ff ff5e 	bl	8003ca4 <UART_WaitOnFlagUntilTimeout>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d14d      	bne.n	8003e88 <HAL_UART_Transmit+0x138>
    huart->gState = HAL_UART_STATE_READY;
 8003dec:	2320      	movs	r3, #32
 8003dee:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8003df0:	e000      	b.n	8003df4 <HAL_UART_Transmit+0xa4>
      return  HAL_ERROR;
 8003df2:	2001      	movs	r0, #1
}
 8003df4:	b003      	add	sp, #12
 8003df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfa:	69d3      	ldr	r3, [r2, #28]
 8003dfc:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8003e00:	d1da      	bne.n	8003db8 <HAL_UART_Transmit+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fe facd 	bl	80023a0 <HAL_GetTick>
 8003e06:	1b80      	subs	r0, r0, r6
 8003e08:	4285      	cmp	r5, r0
 8003e0a:	d32a      	bcc.n	8003e62 <HAL_UART_Transmit+0x112>
 8003e0c:	b34d      	cbz	r5, 8003e62 <HAL_UART_Transmit+0x112>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	075b      	lsls	r3, r3, #29
 8003e14:	d5cb      	bpl.n	8003dae <HAL_UART_Transmit+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e16:	69d3      	ldr	r3, [r2, #28]
 8003e18:	0518      	lsls	r0, r3, #20
 8003e1a:	d5c8      	bpl.n	8003dae <HAL_UART_Transmit+0x5e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e20:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e28:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003e2c:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	f021 0101 	bic.w	r1, r1, #1
 8003e32:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 8003e34:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8003e36:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003e38:	f884 9074 	strb.w	r9, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e3e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8003e42:	e7d7      	b.n	8003df4 <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e44:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4c:	e7b9      	b.n	8003dc2 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8003e4e:	2002      	movs	r0, #2
}
 8003e50:	b003      	add	sp, #12
 8003e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d19f      	bne.n	8003d9c <HAL_UART_Transmit+0x4c>
 8003e5c:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 8003e5e:	4698      	mov	r8, r3
 8003e60:	e79d      	b.n	8003d9e <HAL_UART_Transmit+0x4e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e6a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6c:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003e6e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8003e74:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 8003e76:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003e7a:	67a1      	str	r1, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003e7c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e80:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 8003e82:	b003      	add	sp, #12
 8003e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8003e88:	2003      	movs	r0, #3
 8003e8a:	e7b3      	b.n	8003df4 <HAL_UART_Transmit+0xa4>

08003e8c <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 8003e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	4604      	mov	r4, r0
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e92:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
{
 8003e94:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e98:	2820      	cmp	r0, #32
 8003e9a:	d16b      	bne.n	8003f74 <HAL_UARTEx_ReceiveToIdle+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9c:	460e      	mov	r6, r1
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	d065      	beq.n	8003f6e <HAL_UARTEx_ReceiveToIdle+0xe2>
 8003ea2:	4617      	mov	r7, r2
 8003ea4:	2a00      	cmp	r2, #0
 8003ea6:	d062      	beq.n	8003f6e <HAL_UARTEx_ReceiveToIdle+0xe2>
 8003ea8:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8003eaa:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d060      	beq.n	8003f74 <HAL_UARTEx_ReceiveToIdle+0xe8>
 8003eb2:	2301      	movs	r3, #1

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb4:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	f04f 0800 	mov.w	r8, #0
 8003eba:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
    __HAL_LOCK(huart);
 8003ebe:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ec2:	67e2      	str	r2, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003ec4:	6623      	str	r3, [r4, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec6:	f7fe fa6b 	bl	80023a0 <HAL_GetTick>

    huart->RxXferSize  = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003eca:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8003ecc:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003ed4:	4682      	mov	sl, r0
    huart->RxXferCount = Size;
 8003ed6:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003eda:	d04e      	beq.n	8003f7a <HAL_UARTEx_ReceiveToIdle+0xee>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 80a1 	bne.w	8004024 <HAL_UARTEx_ReceiveToIdle+0x198>
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80ac 	beq.w	8004042 <HAL_UARTEx_ReceiveToIdle+0x1b6>
 8003eea:	277f      	movs	r7, #127	; 0x7f
 8003eec:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = (uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8003ef0:	f04f 0800 	mov.w	r8, #0
    }

    __HAL_UNLOCK(huart);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8003efa:	802b      	strh	r3, [r5, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003efc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d066      	beq.n	8003fd4 <HAL_UARTEx_ReceiveToIdle+0x148>
 8003f06:	f1b9 0f00 	cmp.w	r9, #0
 8003f0a:	d06e      	beq.n	8003fea <HAL_UARTEx_ReceiveToIdle+0x15e>
 8003f0c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003f10:	d03d      	beq.n	8003f8e <HAL_UARTEx_ReceiveToIdle+0x102>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f12:	f04f 0b10 	mov.w	fp, #16
 8003f16:	e017      	b.n	8003f48 <HAL_UARTEx_ReceiveToIdle+0xbc>
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
          pdata16bits++;
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f1a:	403b      	ands	r3, r7
 8003f1c:	f806 3b01 	strb.w	r3, [r6], #1
          pdata8bits++;
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8003f20:	882b      	ldrh	r3, [r5, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	802b      	strh	r3, [r5, #0]
        huart->RxXferCount--;
 8003f26:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fe fa35 	bl	80023a0 <HAL_GetTick>
 8003f36:	eba0 000a 	sub.w	r0, r0, sl
 8003f3a:	4581      	cmp	r9, r0
 8003f3c:	d36d      	bcc.n	800401a <HAL_UARTEx_ReceiveToIdle+0x18e>
    while (huart->RxXferCount > 0U)
 8003f3e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d045      	beq.n	8003fd4 <HAL_UARTEx_ReceiveToIdle+0x148>
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	06d2      	lsls	r2, r2, #27
 8003f4e:	d504      	bpl.n	8003f5a <HAL_UARTEx_ReceiveToIdle+0xce>
        if (*RxLen > 0U)
 8003f50:	882a      	ldrh	r2, [r5, #0]
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f52:	f8c3 b020 	str.w	fp, [r3, #32]
        if (*RxLen > 0U)
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	d16b      	bne.n	8004032 <HAL_UARTEx_ReceiveToIdle+0x1a6>
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	0690      	lsls	r0, r2, #26
 8003f5e:	d5e8      	bpl.n	8003f32 <HAL_UARTEx_ReceiveToIdle+0xa6>
        if (pdata8bits == NULL)
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	d1d9      	bne.n	8003f18 <HAL_UARTEx_ReceiveToIdle+0x8c>
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f66:	403b      	ands	r3, r7
 8003f68:	f828 3b02 	strh.w	r3, [r8], #2
          pdata16bits++;
 8003f6c:	e7d8      	b.n	8003f20 <HAL_UARTEx_ReceiveToIdle+0x94>
      return  HAL_ERROR;
 8003f6e:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8003f74:	2002      	movs	r0, #2
}
 8003f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    UART_MASK_COMPUTATION(huart);
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d15c      	bne.n	800403a <HAL_UARTEx_ReceiveToIdle+0x1ae>
 8003f80:	f240 17ff 	movw	r7, #511	; 0x1ff
 8003f84:	46b0      	mov	r8, r6
 8003f86:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata8bits  = NULL;
 8003f8a:	461e      	mov	r6, r3
 8003f8c:	e7b2      	b.n	8003ef4 <HAL_UARTEx_ReceiveToIdle+0x68>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f8e:	2110      	movs	r1, #16
 8003f90:	e00e      	b.n	8003fb0 <HAL_UARTEx_ReceiveToIdle+0x124>
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f92:	f806 3b01 	strb.w	r3, [r6], #1
        *RxLen += 1U;
 8003f96:	882b      	ldrh	r3, [r5, #0]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	802b      	strh	r3, [r5, #0]
        huart->RxXferCount--;
 8003f9c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003fa8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	b18b      	cbz	r3, 8003fd4 <HAL_UARTEx_ReceiveToIdle+0x148>
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	06d2      	lsls	r2, r2, #27
 8003fb6:	d503      	bpl.n	8003fc0 <HAL_UARTEx_ReceiveToIdle+0x134>
        if (*RxLen > 0U)
 8003fb8:	882a      	ldrh	r2, [r5, #0]
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fba:	6219      	str	r1, [r3, #32]
        if (*RxLen > 0U)
 8003fbc:	2a00      	cmp	r2, #0
 8003fbe:	d138      	bne.n	8004032 <HAL_UARTEx_ReceiveToIdle+0x1a6>
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	0690      	lsls	r0, r2, #26
 8003fc4:	d5f0      	bpl.n	8003fa8 <HAL_UARTEx_ReceiveToIdle+0x11c>
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fc8:	403b      	ands	r3, r7
        if (pdata8bits == NULL)
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	d1e1      	bne.n	8003f92 <HAL_UARTEx_ReceiveToIdle+0x106>
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fce:	f828 3b02 	strh.w	r3, [r8], #2
          pdata16bits++;
 8003fd2:	e7e0      	b.n	8003f96 <HAL_UARTEx_ReceiveToIdle+0x10a>
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8003fd4:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8003fd8:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	2220      	movs	r2, #32
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8003fde:	1a5b      	subs	r3, r3, r1
 8003fe0:	802b      	strh	r3, [r5, #0]
    return HAL_OK;
 8003fe2:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8003fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	06d1      	lsls	r1, r2, #27
 8003ff0:	d501      	bpl.n	8003ff6 <HAL_UARTEx_ReceiveToIdle+0x16a>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	621a      	str	r2, [r3, #32]
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	0692      	lsls	r2, r2, #26
 8003ffa:	d50c      	bpl.n	8004016 <HAL_UARTEx_ReceiveToIdle+0x18a>
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ffc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ffe:	401f      	ands	r7, r3
        if (pdata8bits == NULL)
 8004000:	b35e      	cbz	r6, 800405a <HAL_UARTEx_ReceiveToIdle+0x1ce>
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004002:	7037      	strb	r7, [r6, #0]
        *RxLen += 1U;
 8004004:	882b      	ldrh	r3, [r5, #0]
 8004006:	3301      	adds	r3, #1
 8004008:	802b      	strh	r3, [r5, #0]
        huart->RxXferCount--;
 800400a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800400e:	3b01      	subs	r3, #1
 8004010:	b29b      	uxth	r3, r3
 8004012:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fe f9c3 	bl	80023a0 <HAL_GetTick>
          huart->RxState = HAL_UART_STATE_READY;
 800401a:	2320      	movs	r3, #32
 800401c:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800401e:	2003      	movs	r0, #3
}
 8004020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    UART_MASK_COMPUTATION(huart);
 8004024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004028:	d00f      	beq.n	800404a <HAL_UARTEx_ReceiveToIdle+0x1be>
 800402a:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
 800402e:	4647      	mov	r7, r8
 8004030:	e75e      	b.n	8003ef0 <HAL_UARTEx_ReceiveToIdle+0x64>
          huart->RxState = HAL_UART_STATE_READY;
 8004032:	2320      	movs	r3, #32
 8004034:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_OK;
 8004036:	2000      	movs	r0, #0
 8004038:	e79a      	b.n	8003f70 <HAL_UARTEx_ReceiveToIdle+0xe4>
    UART_MASK_COMPUTATION(huart);
 800403a:	27ff      	movs	r7, #255	; 0xff
 800403c:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	e758      	b.n	8003ef4 <HAL_UARTEx_ReceiveToIdle+0x68>
    UART_MASK_COMPUTATION(huart);
 8004042:	27ff      	movs	r7, #255	; 0xff
 8004044:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8004048:	e752      	b.n	8003ef0 <HAL_UARTEx_ReceiveToIdle+0x64>
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f43f af4c 	beq.w	8003eea <HAL_UARTEx_ReceiveToIdle+0x5e>
 8004052:	273f      	movs	r7, #63	; 0x3f
 8004054:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8004058:	e74a      	b.n	8003ef0 <HAL_UARTEx_ReceiveToIdle+0x64>
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800405a:	f8a8 7000 	strh.w	r7, [r8]
          pdata16bits++;
 800405e:	e7d1      	b.n	8004004 <HAL_UARTEx_ReceiveToIdle+0x178>

08004060 <__errno>:
 8004060:	4b01      	ldr	r3, [pc, #4]	; (8004068 <__errno+0x8>)
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000124 	.word	0x20000124

0800406c <__libc_init_array>:
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	4d0d      	ldr	r5, [pc, #52]	; (80040a4 <__libc_init_array+0x38>)
 8004070:	4c0d      	ldr	r4, [pc, #52]	; (80040a8 <__libc_init_array+0x3c>)
 8004072:	1b64      	subs	r4, r4, r5
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	2600      	movs	r6, #0
 8004078:	42a6      	cmp	r6, r4
 800407a:	d109      	bne.n	8004090 <__libc_init_array+0x24>
 800407c:	4d0b      	ldr	r5, [pc, #44]	; (80040ac <__libc_init_array+0x40>)
 800407e:	4c0c      	ldr	r4, [pc, #48]	; (80040b0 <__libc_init_array+0x44>)
 8004080:	f002 fcf0 	bl	8006a64 <_init>
 8004084:	1b64      	subs	r4, r4, r5
 8004086:	10a4      	asrs	r4, r4, #2
 8004088:	2600      	movs	r6, #0
 800408a:	42a6      	cmp	r6, r4
 800408c:	d105      	bne.n	800409a <__libc_init_array+0x2e>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	f855 3b04 	ldr.w	r3, [r5], #4
 8004094:	4798      	blx	r3
 8004096:	3601      	adds	r6, #1
 8004098:	e7ee      	b.n	8004078 <__libc_init_array+0xc>
 800409a:	f855 3b04 	ldr.w	r3, [r5], #4
 800409e:	4798      	blx	r3
 80040a0:	3601      	adds	r6, #1
 80040a2:	e7f2      	b.n	800408a <__libc_init_array+0x1e>
 80040a4:	08006f14 	.word	0x08006f14
 80040a8:	08006f14 	.word	0x08006f14
 80040ac:	08006f14 	.word	0x08006f14
 80040b0:	08006f18 	.word	0x08006f18

080040b4 <memset>:
 80040b4:	4402      	add	r2, r0
 80040b6:	4603      	mov	r3, r0
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d100      	bne.n	80040be <memset+0xa>
 80040bc:	4770      	bx	lr
 80040be:	f803 1b01 	strb.w	r1, [r3], #1
 80040c2:	e7f9      	b.n	80040b8 <memset+0x4>

080040c4 <__cvt>:
 80040c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	ec55 4b10 	vmov	r4, r5, d0
 80040cc:	2d00      	cmp	r5, #0
 80040ce:	460e      	mov	r6, r1
 80040d0:	4619      	mov	r1, r3
 80040d2:	462b      	mov	r3, r5
 80040d4:	bfbb      	ittet	lt
 80040d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040da:	461d      	movlt	r5, r3
 80040dc:	2300      	movge	r3, #0
 80040de:	232d      	movlt	r3, #45	; 0x2d
 80040e0:	700b      	strb	r3, [r1, #0]
 80040e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040e8:	4691      	mov	r9, r2
 80040ea:	f023 0820 	bic.w	r8, r3, #32
 80040ee:	bfbc      	itt	lt
 80040f0:	4622      	movlt	r2, r4
 80040f2:	4614      	movlt	r4, r2
 80040f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040f8:	d005      	beq.n	8004106 <__cvt+0x42>
 80040fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040fe:	d100      	bne.n	8004102 <__cvt+0x3e>
 8004100:	3601      	adds	r6, #1
 8004102:	2102      	movs	r1, #2
 8004104:	e000      	b.n	8004108 <__cvt+0x44>
 8004106:	2103      	movs	r1, #3
 8004108:	ab03      	add	r3, sp, #12
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	ab02      	add	r3, sp, #8
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	ec45 4b10 	vmov	d0, r4, r5
 8004114:	4653      	mov	r3, sl
 8004116:	4632      	mov	r2, r6
 8004118:	f000 fcca 	bl	8004ab0 <_dtoa_r>
 800411c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004120:	4607      	mov	r7, r0
 8004122:	d102      	bne.n	800412a <__cvt+0x66>
 8004124:	f019 0f01 	tst.w	r9, #1
 8004128:	d022      	beq.n	8004170 <__cvt+0xac>
 800412a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800412e:	eb07 0906 	add.w	r9, r7, r6
 8004132:	d110      	bne.n	8004156 <__cvt+0x92>
 8004134:	783b      	ldrb	r3, [r7, #0]
 8004136:	2b30      	cmp	r3, #48	; 0x30
 8004138:	d10a      	bne.n	8004150 <__cvt+0x8c>
 800413a:	2200      	movs	r2, #0
 800413c:	2300      	movs	r3, #0
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f7fc fcd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8004146:	b918      	cbnz	r0, 8004150 <__cvt+0x8c>
 8004148:	f1c6 0601 	rsb	r6, r6, #1
 800414c:	f8ca 6000 	str.w	r6, [sl]
 8004150:	f8da 3000 	ldr.w	r3, [sl]
 8004154:	4499      	add	r9, r3
 8004156:	2200      	movs	r2, #0
 8004158:	2300      	movs	r3, #0
 800415a:	4620      	mov	r0, r4
 800415c:	4629      	mov	r1, r5
 800415e:	f7fc fcc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8004162:	b108      	cbz	r0, 8004168 <__cvt+0xa4>
 8004164:	f8cd 900c 	str.w	r9, [sp, #12]
 8004168:	2230      	movs	r2, #48	; 0x30
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	454b      	cmp	r3, r9
 800416e:	d307      	bcc.n	8004180 <__cvt+0xbc>
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004174:	1bdb      	subs	r3, r3, r7
 8004176:	4638      	mov	r0, r7
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	b004      	add	sp, #16
 800417c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004180:	1c59      	adds	r1, r3, #1
 8004182:	9103      	str	r1, [sp, #12]
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e7f0      	b.n	800416a <__cvt+0xa6>

08004188 <__exponent>:
 8004188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800418a:	4603      	mov	r3, r0
 800418c:	2900      	cmp	r1, #0
 800418e:	bfb8      	it	lt
 8004190:	4249      	neglt	r1, r1
 8004192:	f803 2b02 	strb.w	r2, [r3], #2
 8004196:	bfb4      	ite	lt
 8004198:	222d      	movlt	r2, #45	; 0x2d
 800419a:	222b      	movge	r2, #43	; 0x2b
 800419c:	2909      	cmp	r1, #9
 800419e:	7042      	strb	r2, [r0, #1]
 80041a0:	dd2a      	ble.n	80041f8 <__exponent+0x70>
 80041a2:	f10d 0407 	add.w	r4, sp, #7
 80041a6:	46a4      	mov	ip, r4
 80041a8:	270a      	movs	r7, #10
 80041aa:	46a6      	mov	lr, r4
 80041ac:	460a      	mov	r2, r1
 80041ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80041b2:	fb07 1516 	mls	r5, r7, r6, r1
 80041b6:	3530      	adds	r5, #48	; 0x30
 80041b8:	2a63      	cmp	r2, #99	; 0x63
 80041ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80041be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041c2:	4631      	mov	r1, r6
 80041c4:	dcf1      	bgt.n	80041aa <__exponent+0x22>
 80041c6:	3130      	adds	r1, #48	; 0x30
 80041c8:	f1ae 0502 	sub.w	r5, lr, #2
 80041cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041d0:	1c44      	adds	r4, r0, #1
 80041d2:	4629      	mov	r1, r5
 80041d4:	4561      	cmp	r1, ip
 80041d6:	d30a      	bcc.n	80041ee <__exponent+0x66>
 80041d8:	f10d 0209 	add.w	r2, sp, #9
 80041dc:	eba2 020e 	sub.w	r2, r2, lr
 80041e0:	4565      	cmp	r5, ip
 80041e2:	bf88      	it	hi
 80041e4:	2200      	movhi	r2, #0
 80041e6:	4413      	add	r3, r2
 80041e8:	1a18      	subs	r0, r3, r0
 80041ea:	b003      	add	sp, #12
 80041ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041f6:	e7ed      	b.n	80041d4 <__exponent+0x4c>
 80041f8:	2330      	movs	r3, #48	; 0x30
 80041fa:	3130      	adds	r1, #48	; 0x30
 80041fc:	7083      	strb	r3, [r0, #2]
 80041fe:	70c1      	strb	r1, [r0, #3]
 8004200:	1d03      	adds	r3, r0, #4
 8004202:	e7f1      	b.n	80041e8 <__exponent+0x60>

08004204 <_printf_float>:
 8004204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004208:	ed2d 8b02 	vpush	{d8}
 800420c:	b08d      	sub	sp, #52	; 0x34
 800420e:	460c      	mov	r4, r1
 8004210:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004214:	4616      	mov	r6, r2
 8004216:	461f      	mov	r7, r3
 8004218:	4605      	mov	r5, r0
 800421a:	f001 fa35 	bl	8005688 <_localeconv_r>
 800421e:	f8d0 a000 	ldr.w	sl, [r0]
 8004222:	4650      	mov	r0, sl
 8004224:	f7fb ffde 	bl	80001e4 <strlen>
 8004228:	2300      	movs	r3, #0
 800422a:	930a      	str	r3, [sp, #40]	; 0x28
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	9305      	str	r3, [sp, #20]
 8004230:	f8d8 3000 	ldr.w	r3, [r8]
 8004234:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004238:	3307      	adds	r3, #7
 800423a:	f023 0307 	bic.w	r3, r3, #7
 800423e:	f103 0208 	add.w	r2, r3, #8
 8004242:	f8c8 2000 	str.w	r2, [r8]
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800424e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004252:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004256:	9307      	str	r3, [sp, #28]
 8004258:	f8cd 8018 	str.w	r8, [sp, #24]
 800425c:	ee08 0a10 	vmov	s16, r0
 8004260:	4b9f      	ldr	r3, [pc, #636]	; (80044e0 <_printf_float+0x2dc>)
 8004262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004266:	f04f 32ff 	mov.w	r2, #4294967295
 800426a:	f7fc fc6f 	bl	8000b4c <__aeabi_dcmpun>
 800426e:	bb88      	cbnz	r0, 80042d4 <_printf_float+0xd0>
 8004270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004274:	4b9a      	ldr	r3, [pc, #616]	; (80044e0 <_printf_float+0x2dc>)
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	f7fc fc49 	bl	8000b10 <__aeabi_dcmple>
 800427e:	bb48      	cbnz	r0, 80042d4 <_printf_float+0xd0>
 8004280:	2200      	movs	r2, #0
 8004282:	2300      	movs	r3, #0
 8004284:	4640      	mov	r0, r8
 8004286:	4649      	mov	r1, r9
 8004288:	f7fc fc38 	bl	8000afc <__aeabi_dcmplt>
 800428c:	b110      	cbz	r0, 8004294 <_printf_float+0x90>
 800428e:	232d      	movs	r3, #45	; 0x2d
 8004290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004294:	4b93      	ldr	r3, [pc, #588]	; (80044e4 <_printf_float+0x2e0>)
 8004296:	4894      	ldr	r0, [pc, #592]	; (80044e8 <_printf_float+0x2e4>)
 8004298:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800429c:	bf94      	ite	ls
 800429e:	4698      	movls	r8, r3
 80042a0:	4680      	movhi	r8, r0
 80042a2:	2303      	movs	r3, #3
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	9b05      	ldr	r3, [sp, #20]
 80042a8:	f023 0204 	bic.w	r2, r3, #4
 80042ac:	6022      	str	r2, [r4, #0]
 80042ae:	f04f 0900 	mov.w	r9, #0
 80042b2:	9700      	str	r7, [sp, #0]
 80042b4:	4633      	mov	r3, r6
 80042b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80042b8:	4621      	mov	r1, r4
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 f9d8 	bl	8004670 <_printf_common>
 80042c0:	3001      	adds	r0, #1
 80042c2:	f040 8090 	bne.w	80043e6 <_printf_float+0x1e2>
 80042c6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ca:	b00d      	add	sp, #52	; 0x34
 80042cc:	ecbd 8b02 	vpop	{d8}
 80042d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	4640      	mov	r0, r8
 80042da:	4649      	mov	r1, r9
 80042dc:	f7fc fc36 	bl	8000b4c <__aeabi_dcmpun>
 80042e0:	b140      	cbz	r0, 80042f4 <_printf_float+0xf0>
 80042e2:	464b      	mov	r3, r9
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bfbc      	itt	lt
 80042e8:	232d      	movlt	r3, #45	; 0x2d
 80042ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042ee:	487f      	ldr	r0, [pc, #508]	; (80044ec <_printf_float+0x2e8>)
 80042f0:	4b7f      	ldr	r3, [pc, #508]	; (80044f0 <_printf_float+0x2ec>)
 80042f2:	e7d1      	b.n	8004298 <_printf_float+0x94>
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042fa:	9206      	str	r2, [sp, #24]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	d13f      	bne.n	8004380 <_printf_float+0x17c>
 8004300:	2306      	movs	r3, #6
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	9b05      	ldr	r3, [sp, #20]
 8004306:	6861      	ldr	r1, [r4, #4]
 8004308:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800430c:	2300      	movs	r3, #0
 800430e:	9303      	str	r3, [sp, #12]
 8004310:	ab0a      	add	r3, sp, #40	; 0x28
 8004312:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004316:	ab09      	add	r3, sp, #36	; 0x24
 8004318:	ec49 8b10 	vmov	d0, r8, r9
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	6022      	str	r2, [r4, #0]
 8004320:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004324:	4628      	mov	r0, r5
 8004326:	f7ff fecd 	bl	80040c4 <__cvt>
 800432a:	9b06      	ldr	r3, [sp, #24]
 800432c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800432e:	2b47      	cmp	r3, #71	; 0x47
 8004330:	4680      	mov	r8, r0
 8004332:	d108      	bne.n	8004346 <_printf_float+0x142>
 8004334:	1cc8      	adds	r0, r1, #3
 8004336:	db02      	blt.n	800433e <_printf_float+0x13a>
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	4299      	cmp	r1, r3
 800433c:	dd41      	ble.n	80043c2 <_printf_float+0x1be>
 800433e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004342:	fa5f fb8b 	uxtb.w	fp, fp
 8004346:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800434a:	d820      	bhi.n	800438e <_printf_float+0x18a>
 800434c:	3901      	subs	r1, #1
 800434e:	465a      	mov	r2, fp
 8004350:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004354:	9109      	str	r1, [sp, #36]	; 0x24
 8004356:	f7ff ff17 	bl	8004188 <__exponent>
 800435a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800435c:	1813      	adds	r3, r2, r0
 800435e:	2a01      	cmp	r2, #1
 8004360:	4681      	mov	r9, r0
 8004362:	6123      	str	r3, [r4, #16]
 8004364:	dc02      	bgt.n	800436c <_printf_float+0x168>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	07d2      	lsls	r2, r2, #31
 800436a:	d501      	bpl.n	8004370 <_printf_float+0x16c>
 800436c:	3301      	adds	r3, #1
 800436e:	6123      	str	r3, [r4, #16]
 8004370:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004374:	2b00      	cmp	r3, #0
 8004376:	d09c      	beq.n	80042b2 <_printf_float+0xae>
 8004378:	232d      	movs	r3, #45	; 0x2d
 800437a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800437e:	e798      	b.n	80042b2 <_printf_float+0xae>
 8004380:	9a06      	ldr	r2, [sp, #24]
 8004382:	2a47      	cmp	r2, #71	; 0x47
 8004384:	d1be      	bne.n	8004304 <_printf_float+0x100>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1bc      	bne.n	8004304 <_printf_float+0x100>
 800438a:	2301      	movs	r3, #1
 800438c:	e7b9      	b.n	8004302 <_printf_float+0xfe>
 800438e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004392:	d118      	bne.n	80043c6 <_printf_float+0x1c2>
 8004394:	2900      	cmp	r1, #0
 8004396:	6863      	ldr	r3, [r4, #4]
 8004398:	dd0b      	ble.n	80043b2 <_printf_float+0x1ae>
 800439a:	6121      	str	r1, [r4, #16]
 800439c:	b913      	cbnz	r3, 80043a4 <_printf_float+0x1a0>
 800439e:	6822      	ldr	r2, [r4, #0]
 80043a0:	07d0      	lsls	r0, r2, #31
 80043a2:	d502      	bpl.n	80043aa <_printf_float+0x1a6>
 80043a4:	3301      	adds	r3, #1
 80043a6:	440b      	add	r3, r1
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80043ac:	f04f 0900 	mov.w	r9, #0
 80043b0:	e7de      	b.n	8004370 <_printf_float+0x16c>
 80043b2:	b913      	cbnz	r3, 80043ba <_printf_float+0x1b6>
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	07d2      	lsls	r2, r2, #31
 80043b8:	d501      	bpl.n	80043be <_printf_float+0x1ba>
 80043ba:	3302      	adds	r3, #2
 80043bc:	e7f4      	b.n	80043a8 <_printf_float+0x1a4>
 80043be:	2301      	movs	r3, #1
 80043c0:	e7f2      	b.n	80043a8 <_printf_float+0x1a4>
 80043c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80043c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c8:	4299      	cmp	r1, r3
 80043ca:	db05      	blt.n	80043d8 <_printf_float+0x1d4>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	6121      	str	r1, [r4, #16]
 80043d0:	07d8      	lsls	r0, r3, #31
 80043d2:	d5ea      	bpl.n	80043aa <_printf_float+0x1a6>
 80043d4:	1c4b      	adds	r3, r1, #1
 80043d6:	e7e7      	b.n	80043a8 <_printf_float+0x1a4>
 80043d8:	2900      	cmp	r1, #0
 80043da:	bfd4      	ite	le
 80043dc:	f1c1 0202 	rsble	r2, r1, #2
 80043e0:	2201      	movgt	r2, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	e7e0      	b.n	80043a8 <_printf_float+0x1a4>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	055a      	lsls	r2, r3, #21
 80043ea:	d407      	bmi.n	80043fc <_printf_float+0x1f8>
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	4642      	mov	r2, r8
 80043f0:	4631      	mov	r1, r6
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b8      	blx	r7
 80043f6:	3001      	adds	r0, #1
 80043f8:	d12c      	bne.n	8004454 <_printf_float+0x250>
 80043fa:	e764      	b.n	80042c6 <_printf_float+0xc2>
 80043fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004400:	f240 80e0 	bls.w	80045c4 <_printf_float+0x3c0>
 8004404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004408:	2200      	movs	r2, #0
 800440a:	2300      	movs	r3, #0
 800440c:	f7fc fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8004410:	2800      	cmp	r0, #0
 8004412:	d034      	beq.n	800447e <_printf_float+0x27a>
 8004414:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <_printf_float+0x2f0>)
 8004416:	2301      	movs	r3, #1
 8004418:	4631      	mov	r1, r6
 800441a:	4628      	mov	r0, r5
 800441c:	47b8      	blx	r7
 800441e:	3001      	adds	r0, #1
 8004420:	f43f af51 	beq.w	80042c6 <_printf_float+0xc2>
 8004424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004428:	429a      	cmp	r2, r3
 800442a:	db02      	blt.n	8004432 <_printf_float+0x22e>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	07d8      	lsls	r0, r3, #31
 8004430:	d510      	bpl.n	8004454 <_printf_float+0x250>
 8004432:	ee18 3a10 	vmov	r3, s16
 8004436:	4652      	mov	r2, sl
 8004438:	4631      	mov	r1, r6
 800443a:	4628      	mov	r0, r5
 800443c:	47b8      	blx	r7
 800443e:	3001      	adds	r0, #1
 8004440:	f43f af41 	beq.w	80042c6 <_printf_float+0xc2>
 8004444:	f04f 0800 	mov.w	r8, #0
 8004448:	f104 091a 	add.w	r9, r4, #26
 800444c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800444e:	3b01      	subs	r3, #1
 8004450:	4543      	cmp	r3, r8
 8004452:	dc09      	bgt.n	8004468 <_printf_float+0x264>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	079b      	lsls	r3, r3, #30
 8004458:	f100 8105 	bmi.w	8004666 <_printf_float+0x462>
 800445c:	68e0      	ldr	r0, [r4, #12]
 800445e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004460:	4298      	cmp	r0, r3
 8004462:	bfb8      	it	lt
 8004464:	4618      	movlt	r0, r3
 8004466:	e730      	b.n	80042ca <_printf_float+0xc6>
 8004468:	2301      	movs	r3, #1
 800446a:	464a      	mov	r2, r9
 800446c:	4631      	mov	r1, r6
 800446e:	4628      	mov	r0, r5
 8004470:	47b8      	blx	r7
 8004472:	3001      	adds	r0, #1
 8004474:	f43f af27 	beq.w	80042c6 <_printf_float+0xc2>
 8004478:	f108 0801 	add.w	r8, r8, #1
 800447c:	e7e6      	b.n	800444c <_printf_float+0x248>
 800447e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004480:	2b00      	cmp	r3, #0
 8004482:	dc39      	bgt.n	80044f8 <_printf_float+0x2f4>
 8004484:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <_printf_float+0x2f0>)
 8004486:	2301      	movs	r3, #1
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	f43f af19 	beq.w	80042c6 <_printf_float+0xc2>
 8004494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004498:	4313      	orrs	r3, r2
 800449a:	d102      	bne.n	80044a2 <_printf_float+0x29e>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	07d9      	lsls	r1, r3, #31
 80044a0:	d5d8      	bpl.n	8004454 <_printf_float+0x250>
 80044a2:	ee18 3a10 	vmov	r3, s16
 80044a6:	4652      	mov	r2, sl
 80044a8:	4631      	mov	r1, r6
 80044aa:	4628      	mov	r0, r5
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	f43f af09 	beq.w	80042c6 <_printf_float+0xc2>
 80044b4:	f04f 0900 	mov.w	r9, #0
 80044b8:	f104 0a1a 	add.w	sl, r4, #26
 80044bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044be:	425b      	negs	r3, r3
 80044c0:	454b      	cmp	r3, r9
 80044c2:	dc01      	bgt.n	80044c8 <_printf_float+0x2c4>
 80044c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c6:	e792      	b.n	80043ee <_printf_float+0x1ea>
 80044c8:	2301      	movs	r3, #1
 80044ca:	4652      	mov	r2, sl
 80044cc:	4631      	mov	r1, r6
 80044ce:	4628      	mov	r0, r5
 80044d0:	47b8      	blx	r7
 80044d2:	3001      	adds	r0, #1
 80044d4:	f43f aef7 	beq.w	80042c6 <_printf_float+0xc2>
 80044d8:	f109 0901 	add.w	r9, r9, #1
 80044dc:	e7ee      	b.n	80044bc <_printf_float+0x2b8>
 80044de:	bf00      	nop
 80044e0:	7fefffff 	.word	0x7fefffff
 80044e4:	08006b2c 	.word	0x08006b2c
 80044e8:	08006b30 	.word	0x08006b30
 80044ec:	08006b38 	.word	0x08006b38
 80044f0:	08006b34 	.word	0x08006b34
 80044f4:	08006b3c 	.word	0x08006b3c
 80044f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044fc:	429a      	cmp	r2, r3
 80044fe:	bfa8      	it	ge
 8004500:	461a      	movge	r2, r3
 8004502:	2a00      	cmp	r2, #0
 8004504:	4691      	mov	r9, r2
 8004506:	dc37      	bgt.n	8004578 <_printf_float+0x374>
 8004508:	f04f 0b00 	mov.w	fp, #0
 800450c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004510:	f104 021a 	add.w	r2, r4, #26
 8004514:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004516:	9305      	str	r3, [sp, #20]
 8004518:	eba3 0309 	sub.w	r3, r3, r9
 800451c:	455b      	cmp	r3, fp
 800451e:	dc33      	bgt.n	8004588 <_printf_float+0x384>
 8004520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004524:	429a      	cmp	r2, r3
 8004526:	db3b      	blt.n	80045a0 <_printf_float+0x39c>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	07da      	lsls	r2, r3, #31
 800452c:	d438      	bmi.n	80045a0 <_printf_float+0x39c>
 800452e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004530:	9b05      	ldr	r3, [sp, #20]
 8004532:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	eba2 0901 	sub.w	r9, r2, r1
 800453a:	4599      	cmp	r9, r3
 800453c:	bfa8      	it	ge
 800453e:	4699      	movge	r9, r3
 8004540:	f1b9 0f00 	cmp.w	r9, #0
 8004544:	dc35      	bgt.n	80045b2 <_printf_float+0x3ae>
 8004546:	f04f 0800 	mov.w	r8, #0
 800454a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800454e:	f104 0a1a 	add.w	sl, r4, #26
 8004552:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	eba3 0309 	sub.w	r3, r3, r9
 800455c:	4543      	cmp	r3, r8
 800455e:	f77f af79 	ble.w	8004454 <_printf_float+0x250>
 8004562:	2301      	movs	r3, #1
 8004564:	4652      	mov	r2, sl
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f aeaa 	beq.w	80042c6 <_printf_float+0xc2>
 8004572:	f108 0801 	add.w	r8, r8, #1
 8004576:	e7ec      	b.n	8004552 <_printf_float+0x34e>
 8004578:	4613      	mov	r3, r2
 800457a:	4631      	mov	r1, r6
 800457c:	4642      	mov	r2, r8
 800457e:	4628      	mov	r0, r5
 8004580:	47b8      	blx	r7
 8004582:	3001      	adds	r0, #1
 8004584:	d1c0      	bne.n	8004508 <_printf_float+0x304>
 8004586:	e69e      	b.n	80042c6 <_printf_float+0xc2>
 8004588:	2301      	movs	r3, #1
 800458a:	4631      	mov	r1, r6
 800458c:	4628      	mov	r0, r5
 800458e:	9205      	str	r2, [sp, #20]
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	f43f ae97 	beq.w	80042c6 <_printf_float+0xc2>
 8004598:	9a05      	ldr	r2, [sp, #20]
 800459a:	f10b 0b01 	add.w	fp, fp, #1
 800459e:	e7b9      	b.n	8004514 <_printf_float+0x310>
 80045a0:	ee18 3a10 	vmov	r3, s16
 80045a4:	4652      	mov	r2, sl
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	d1be      	bne.n	800452e <_printf_float+0x32a>
 80045b0:	e689      	b.n	80042c6 <_printf_float+0xc2>
 80045b2:	9a05      	ldr	r2, [sp, #20]
 80045b4:	464b      	mov	r3, r9
 80045b6:	4442      	add	r2, r8
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	d1c1      	bne.n	8004546 <_printf_float+0x342>
 80045c2:	e680      	b.n	80042c6 <_printf_float+0xc2>
 80045c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045c6:	2a01      	cmp	r2, #1
 80045c8:	dc01      	bgt.n	80045ce <_printf_float+0x3ca>
 80045ca:	07db      	lsls	r3, r3, #31
 80045cc:	d538      	bpl.n	8004640 <_printf_float+0x43c>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4642      	mov	r2, r8
 80045d2:	4631      	mov	r1, r6
 80045d4:	4628      	mov	r0, r5
 80045d6:	47b8      	blx	r7
 80045d8:	3001      	adds	r0, #1
 80045da:	f43f ae74 	beq.w	80042c6 <_printf_float+0xc2>
 80045de:	ee18 3a10 	vmov	r3, s16
 80045e2:	4652      	mov	r2, sl
 80045e4:	4631      	mov	r1, r6
 80045e6:	4628      	mov	r0, r5
 80045e8:	47b8      	blx	r7
 80045ea:	3001      	adds	r0, #1
 80045ec:	f43f ae6b 	beq.w	80042c6 <_printf_float+0xc2>
 80045f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045f4:	2200      	movs	r2, #0
 80045f6:	2300      	movs	r3, #0
 80045f8:	f7fc fa76 	bl	8000ae8 <__aeabi_dcmpeq>
 80045fc:	b9d8      	cbnz	r0, 8004636 <_printf_float+0x432>
 80045fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004600:	f108 0201 	add.w	r2, r8, #1
 8004604:	3b01      	subs	r3, #1
 8004606:	4631      	mov	r1, r6
 8004608:	4628      	mov	r0, r5
 800460a:	47b8      	blx	r7
 800460c:	3001      	adds	r0, #1
 800460e:	d10e      	bne.n	800462e <_printf_float+0x42a>
 8004610:	e659      	b.n	80042c6 <_printf_float+0xc2>
 8004612:	2301      	movs	r3, #1
 8004614:	4652      	mov	r2, sl
 8004616:	4631      	mov	r1, r6
 8004618:	4628      	mov	r0, r5
 800461a:	47b8      	blx	r7
 800461c:	3001      	adds	r0, #1
 800461e:	f43f ae52 	beq.w	80042c6 <_printf_float+0xc2>
 8004622:	f108 0801 	add.w	r8, r8, #1
 8004626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	4543      	cmp	r3, r8
 800462c:	dcf1      	bgt.n	8004612 <_printf_float+0x40e>
 800462e:	464b      	mov	r3, r9
 8004630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004634:	e6dc      	b.n	80043f0 <_printf_float+0x1ec>
 8004636:	f04f 0800 	mov.w	r8, #0
 800463a:	f104 0a1a 	add.w	sl, r4, #26
 800463e:	e7f2      	b.n	8004626 <_printf_float+0x422>
 8004640:	2301      	movs	r3, #1
 8004642:	4642      	mov	r2, r8
 8004644:	e7df      	b.n	8004606 <_printf_float+0x402>
 8004646:	2301      	movs	r3, #1
 8004648:	464a      	mov	r2, r9
 800464a:	4631      	mov	r1, r6
 800464c:	4628      	mov	r0, r5
 800464e:	47b8      	blx	r7
 8004650:	3001      	adds	r0, #1
 8004652:	f43f ae38 	beq.w	80042c6 <_printf_float+0xc2>
 8004656:	f108 0801 	add.w	r8, r8, #1
 800465a:	68e3      	ldr	r3, [r4, #12]
 800465c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800465e:	1a5b      	subs	r3, r3, r1
 8004660:	4543      	cmp	r3, r8
 8004662:	dcf0      	bgt.n	8004646 <_printf_float+0x442>
 8004664:	e6fa      	b.n	800445c <_printf_float+0x258>
 8004666:	f04f 0800 	mov.w	r8, #0
 800466a:	f104 0919 	add.w	r9, r4, #25
 800466e:	e7f4      	b.n	800465a <_printf_float+0x456>

08004670 <_printf_common>:
 8004670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004674:	4616      	mov	r6, r2
 8004676:	4699      	mov	r9, r3
 8004678:	688a      	ldr	r2, [r1, #8]
 800467a:	690b      	ldr	r3, [r1, #16]
 800467c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004680:	4293      	cmp	r3, r2
 8004682:	bfb8      	it	lt
 8004684:	4613      	movlt	r3, r2
 8004686:	6033      	str	r3, [r6, #0]
 8004688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800468c:	4607      	mov	r7, r0
 800468e:	460c      	mov	r4, r1
 8004690:	b10a      	cbz	r2, 8004696 <_printf_common+0x26>
 8004692:	3301      	adds	r3, #1
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	0699      	lsls	r1, r3, #26
 800469a:	bf42      	ittt	mi
 800469c:	6833      	ldrmi	r3, [r6, #0]
 800469e:	3302      	addmi	r3, #2
 80046a0:	6033      	strmi	r3, [r6, #0]
 80046a2:	6825      	ldr	r5, [r4, #0]
 80046a4:	f015 0506 	ands.w	r5, r5, #6
 80046a8:	d106      	bne.n	80046b8 <_printf_common+0x48>
 80046aa:	f104 0a19 	add.w	sl, r4, #25
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	6832      	ldr	r2, [r6, #0]
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	42ab      	cmp	r3, r5
 80046b6:	dc26      	bgt.n	8004706 <_printf_common+0x96>
 80046b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046bc:	1e13      	subs	r3, r2, #0
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	bf18      	it	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	0692      	lsls	r2, r2, #26
 80046c6:	d42b      	bmi.n	8004720 <_printf_common+0xb0>
 80046c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046cc:	4649      	mov	r1, r9
 80046ce:	4638      	mov	r0, r7
 80046d0:	47c0      	blx	r8
 80046d2:	3001      	adds	r0, #1
 80046d4:	d01e      	beq.n	8004714 <_printf_common+0xa4>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	68e5      	ldr	r5, [r4, #12]
 80046da:	6832      	ldr	r2, [r6, #0]
 80046dc:	f003 0306 	and.w	r3, r3, #6
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	bf08      	it	eq
 80046e4:	1aad      	subeq	r5, r5, r2
 80046e6:	68a3      	ldr	r3, [r4, #8]
 80046e8:	6922      	ldr	r2, [r4, #16]
 80046ea:	bf0c      	ite	eq
 80046ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f0:	2500      	movne	r5, #0
 80046f2:	4293      	cmp	r3, r2
 80046f4:	bfc4      	itt	gt
 80046f6:	1a9b      	subgt	r3, r3, r2
 80046f8:	18ed      	addgt	r5, r5, r3
 80046fa:	2600      	movs	r6, #0
 80046fc:	341a      	adds	r4, #26
 80046fe:	42b5      	cmp	r5, r6
 8004700:	d11a      	bne.n	8004738 <_printf_common+0xc8>
 8004702:	2000      	movs	r0, #0
 8004704:	e008      	b.n	8004718 <_printf_common+0xa8>
 8004706:	2301      	movs	r3, #1
 8004708:	4652      	mov	r2, sl
 800470a:	4649      	mov	r1, r9
 800470c:	4638      	mov	r0, r7
 800470e:	47c0      	blx	r8
 8004710:	3001      	adds	r0, #1
 8004712:	d103      	bne.n	800471c <_printf_common+0xac>
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471c:	3501      	adds	r5, #1
 800471e:	e7c6      	b.n	80046ae <_printf_common+0x3e>
 8004720:	18e1      	adds	r1, r4, r3
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	2030      	movs	r0, #48	; 0x30
 8004726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800472a:	4422      	add	r2, r4
 800472c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004734:	3302      	adds	r3, #2
 8004736:	e7c7      	b.n	80046c8 <_printf_common+0x58>
 8004738:	2301      	movs	r3, #1
 800473a:	4622      	mov	r2, r4
 800473c:	4649      	mov	r1, r9
 800473e:	4638      	mov	r0, r7
 8004740:	47c0      	blx	r8
 8004742:	3001      	adds	r0, #1
 8004744:	d0e6      	beq.n	8004714 <_printf_common+0xa4>
 8004746:	3601      	adds	r6, #1
 8004748:	e7d9      	b.n	80046fe <_printf_common+0x8e>
	...

0800474c <_printf_i>:
 800474c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	460c      	mov	r4, r1
 8004752:	4691      	mov	r9, r2
 8004754:	7e27      	ldrb	r7, [r4, #24]
 8004756:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004758:	2f78      	cmp	r7, #120	; 0x78
 800475a:	4680      	mov	r8, r0
 800475c:	469a      	mov	sl, r3
 800475e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004762:	d807      	bhi.n	8004774 <_printf_i+0x28>
 8004764:	2f62      	cmp	r7, #98	; 0x62
 8004766:	d80a      	bhi.n	800477e <_printf_i+0x32>
 8004768:	2f00      	cmp	r7, #0
 800476a:	f000 80d8 	beq.w	800491e <_printf_i+0x1d2>
 800476e:	2f58      	cmp	r7, #88	; 0x58
 8004770:	f000 80a3 	beq.w	80048ba <_printf_i+0x16e>
 8004774:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800477c:	e03a      	b.n	80047f4 <_printf_i+0xa8>
 800477e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004782:	2b15      	cmp	r3, #21
 8004784:	d8f6      	bhi.n	8004774 <_printf_i+0x28>
 8004786:	a001      	add	r0, pc, #4	; (adr r0, 800478c <_printf_i+0x40>)
 8004788:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800478c:	080047e5 	.word	0x080047e5
 8004790:	080047f9 	.word	0x080047f9
 8004794:	08004775 	.word	0x08004775
 8004798:	08004775 	.word	0x08004775
 800479c:	08004775 	.word	0x08004775
 80047a0:	08004775 	.word	0x08004775
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	08004775 	.word	0x08004775
 80047ac:	08004775 	.word	0x08004775
 80047b0:	08004775 	.word	0x08004775
 80047b4:	08004775 	.word	0x08004775
 80047b8:	08004905 	.word	0x08004905
 80047bc:	08004829 	.word	0x08004829
 80047c0:	080048e7 	.word	0x080048e7
 80047c4:	08004775 	.word	0x08004775
 80047c8:	08004775 	.word	0x08004775
 80047cc:	08004927 	.word	0x08004927
 80047d0:	08004775 	.word	0x08004775
 80047d4:	08004829 	.word	0x08004829
 80047d8:	08004775 	.word	0x08004775
 80047dc:	08004775 	.word	0x08004775
 80047e0:	080048ef 	.word	0x080048ef
 80047e4:	680b      	ldr	r3, [r1, #0]
 80047e6:	1d1a      	adds	r2, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	600a      	str	r2, [r1, #0]
 80047ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0a3      	b.n	8004940 <_printf_i+0x1f4>
 80047f8:	6825      	ldr	r5, [r4, #0]
 80047fa:	6808      	ldr	r0, [r1, #0]
 80047fc:	062e      	lsls	r6, r5, #24
 80047fe:	f100 0304 	add.w	r3, r0, #4
 8004802:	d50a      	bpl.n	800481a <_printf_i+0xce>
 8004804:	6805      	ldr	r5, [r0, #0]
 8004806:	600b      	str	r3, [r1, #0]
 8004808:	2d00      	cmp	r5, #0
 800480a:	da03      	bge.n	8004814 <_printf_i+0xc8>
 800480c:	232d      	movs	r3, #45	; 0x2d
 800480e:	426d      	negs	r5, r5
 8004810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004814:	485e      	ldr	r0, [pc, #376]	; (8004990 <_printf_i+0x244>)
 8004816:	230a      	movs	r3, #10
 8004818:	e019      	b.n	800484e <_printf_i+0x102>
 800481a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800481e:	6805      	ldr	r5, [r0, #0]
 8004820:	600b      	str	r3, [r1, #0]
 8004822:	bf18      	it	ne
 8004824:	b22d      	sxthne	r5, r5
 8004826:	e7ef      	b.n	8004808 <_printf_i+0xbc>
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	1d18      	adds	r0, r3, #4
 800482e:	6008      	str	r0, [r1, #0]
 8004830:	0628      	lsls	r0, r5, #24
 8004832:	d501      	bpl.n	8004838 <_printf_i+0xec>
 8004834:	681d      	ldr	r5, [r3, #0]
 8004836:	e002      	b.n	800483e <_printf_i+0xf2>
 8004838:	0669      	lsls	r1, r5, #25
 800483a:	d5fb      	bpl.n	8004834 <_printf_i+0xe8>
 800483c:	881d      	ldrh	r5, [r3, #0]
 800483e:	4854      	ldr	r0, [pc, #336]	; (8004990 <_printf_i+0x244>)
 8004840:	2f6f      	cmp	r7, #111	; 0x6f
 8004842:	bf0c      	ite	eq
 8004844:	2308      	moveq	r3, #8
 8004846:	230a      	movne	r3, #10
 8004848:	2100      	movs	r1, #0
 800484a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800484e:	6866      	ldr	r6, [r4, #4]
 8004850:	60a6      	str	r6, [r4, #8]
 8004852:	2e00      	cmp	r6, #0
 8004854:	bfa2      	ittt	ge
 8004856:	6821      	ldrge	r1, [r4, #0]
 8004858:	f021 0104 	bicge.w	r1, r1, #4
 800485c:	6021      	strge	r1, [r4, #0]
 800485e:	b90d      	cbnz	r5, 8004864 <_printf_i+0x118>
 8004860:	2e00      	cmp	r6, #0
 8004862:	d04d      	beq.n	8004900 <_printf_i+0x1b4>
 8004864:	4616      	mov	r6, r2
 8004866:	fbb5 f1f3 	udiv	r1, r5, r3
 800486a:	fb03 5711 	mls	r7, r3, r1, r5
 800486e:	5dc7      	ldrb	r7, [r0, r7]
 8004870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004874:	462f      	mov	r7, r5
 8004876:	42bb      	cmp	r3, r7
 8004878:	460d      	mov	r5, r1
 800487a:	d9f4      	bls.n	8004866 <_printf_i+0x11a>
 800487c:	2b08      	cmp	r3, #8
 800487e:	d10b      	bne.n	8004898 <_printf_i+0x14c>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	07df      	lsls	r7, r3, #31
 8004884:	d508      	bpl.n	8004898 <_printf_i+0x14c>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6861      	ldr	r1, [r4, #4]
 800488a:	4299      	cmp	r1, r3
 800488c:	bfde      	ittt	le
 800488e:	2330      	movle	r3, #48	; 0x30
 8004890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004898:	1b92      	subs	r2, r2, r6
 800489a:	6122      	str	r2, [r4, #16]
 800489c:	f8cd a000 	str.w	sl, [sp]
 80048a0:	464b      	mov	r3, r9
 80048a2:	aa03      	add	r2, sp, #12
 80048a4:	4621      	mov	r1, r4
 80048a6:	4640      	mov	r0, r8
 80048a8:	f7ff fee2 	bl	8004670 <_printf_common>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d14c      	bne.n	800494a <_printf_i+0x1fe>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	b004      	add	sp, #16
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	4835      	ldr	r0, [pc, #212]	; (8004990 <_printf_i+0x244>)
 80048bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	680e      	ldr	r6, [r1, #0]
 80048c4:	061f      	lsls	r7, r3, #24
 80048c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80048ca:	600e      	str	r6, [r1, #0]
 80048cc:	d514      	bpl.n	80048f8 <_printf_i+0x1ac>
 80048ce:	07d9      	lsls	r1, r3, #31
 80048d0:	bf44      	itt	mi
 80048d2:	f043 0320 	orrmi.w	r3, r3, #32
 80048d6:	6023      	strmi	r3, [r4, #0]
 80048d8:	b91d      	cbnz	r5, 80048e2 <_printf_i+0x196>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f023 0320 	bic.w	r3, r3, #32
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	2310      	movs	r3, #16
 80048e4:	e7b0      	b.n	8004848 <_printf_i+0xfc>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	f043 0320 	orr.w	r3, r3, #32
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	2378      	movs	r3, #120	; 0x78
 80048f0:	4828      	ldr	r0, [pc, #160]	; (8004994 <_printf_i+0x248>)
 80048f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048f6:	e7e3      	b.n	80048c0 <_printf_i+0x174>
 80048f8:	065e      	lsls	r6, r3, #25
 80048fa:	bf48      	it	mi
 80048fc:	b2ad      	uxthmi	r5, r5
 80048fe:	e7e6      	b.n	80048ce <_printf_i+0x182>
 8004900:	4616      	mov	r6, r2
 8004902:	e7bb      	b.n	800487c <_printf_i+0x130>
 8004904:	680b      	ldr	r3, [r1, #0]
 8004906:	6826      	ldr	r6, [r4, #0]
 8004908:	6960      	ldr	r0, [r4, #20]
 800490a:	1d1d      	adds	r5, r3, #4
 800490c:	600d      	str	r5, [r1, #0]
 800490e:	0635      	lsls	r5, r6, #24
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	d501      	bpl.n	8004918 <_printf_i+0x1cc>
 8004914:	6018      	str	r0, [r3, #0]
 8004916:	e002      	b.n	800491e <_printf_i+0x1d2>
 8004918:	0671      	lsls	r1, r6, #25
 800491a:	d5fb      	bpl.n	8004914 <_printf_i+0x1c8>
 800491c:	8018      	strh	r0, [r3, #0]
 800491e:	2300      	movs	r3, #0
 8004920:	6123      	str	r3, [r4, #16]
 8004922:	4616      	mov	r6, r2
 8004924:	e7ba      	b.n	800489c <_printf_i+0x150>
 8004926:	680b      	ldr	r3, [r1, #0]
 8004928:	1d1a      	adds	r2, r3, #4
 800492a:	600a      	str	r2, [r1, #0]
 800492c:	681e      	ldr	r6, [r3, #0]
 800492e:	6862      	ldr	r2, [r4, #4]
 8004930:	2100      	movs	r1, #0
 8004932:	4630      	mov	r0, r6
 8004934:	f7fb fc64 	bl	8000200 <memchr>
 8004938:	b108      	cbz	r0, 800493e <_printf_i+0x1f2>
 800493a:	1b80      	subs	r0, r0, r6
 800493c:	6060      	str	r0, [r4, #4]
 800493e:	6863      	ldr	r3, [r4, #4]
 8004940:	6123      	str	r3, [r4, #16]
 8004942:	2300      	movs	r3, #0
 8004944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004948:	e7a8      	b.n	800489c <_printf_i+0x150>
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	4632      	mov	r2, r6
 800494e:	4649      	mov	r1, r9
 8004950:	4640      	mov	r0, r8
 8004952:	47d0      	blx	sl
 8004954:	3001      	adds	r0, #1
 8004956:	d0ab      	beq.n	80048b0 <_printf_i+0x164>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	079b      	lsls	r3, r3, #30
 800495c:	d413      	bmi.n	8004986 <_printf_i+0x23a>
 800495e:	68e0      	ldr	r0, [r4, #12]
 8004960:	9b03      	ldr	r3, [sp, #12]
 8004962:	4298      	cmp	r0, r3
 8004964:	bfb8      	it	lt
 8004966:	4618      	movlt	r0, r3
 8004968:	e7a4      	b.n	80048b4 <_printf_i+0x168>
 800496a:	2301      	movs	r3, #1
 800496c:	4632      	mov	r2, r6
 800496e:	4649      	mov	r1, r9
 8004970:	4640      	mov	r0, r8
 8004972:	47d0      	blx	sl
 8004974:	3001      	adds	r0, #1
 8004976:	d09b      	beq.n	80048b0 <_printf_i+0x164>
 8004978:	3501      	adds	r5, #1
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	9903      	ldr	r1, [sp, #12]
 800497e:	1a5b      	subs	r3, r3, r1
 8004980:	42ab      	cmp	r3, r5
 8004982:	dcf2      	bgt.n	800496a <_printf_i+0x21e>
 8004984:	e7eb      	b.n	800495e <_printf_i+0x212>
 8004986:	2500      	movs	r5, #0
 8004988:	f104 0619 	add.w	r6, r4, #25
 800498c:	e7f5      	b.n	800497a <_printf_i+0x22e>
 800498e:	bf00      	nop
 8004990:	08006b3e 	.word	0x08006b3e
 8004994:	08006b4f 	.word	0x08006b4f

08004998 <quorem>:
 8004998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	6903      	ldr	r3, [r0, #16]
 800499e:	690c      	ldr	r4, [r1, #16]
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	4607      	mov	r7, r0
 80049a4:	f2c0 8081 	blt.w	8004aaa <quorem+0x112>
 80049a8:	3c01      	subs	r4, #1
 80049aa:	f101 0814 	add.w	r8, r1, #20
 80049ae:	f100 0514 	add.w	r5, r0, #20
 80049b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049c0:	3301      	adds	r3, #1
 80049c2:	429a      	cmp	r2, r3
 80049c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80049d0:	d331      	bcc.n	8004a36 <quorem+0x9e>
 80049d2:	f04f 0e00 	mov.w	lr, #0
 80049d6:	4640      	mov	r0, r8
 80049d8:	46ac      	mov	ip, r5
 80049da:	46f2      	mov	sl, lr
 80049dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80049e0:	b293      	uxth	r3, r2
 80049e2:	fb06 e303 	mla	r3, r6, r3, lr
 80049e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	ebaa 0303 	sub.w	r3, sl, r3
 80049f0:	0c12      	lsrs	r2, r2, #16
 80049f2:	f8dc a000 	ldr.w	sl, [ip]
 80049f6:	fb06 e202 	mla	r2, r6, r2, lr
 80049fa:	fa13 f38a 	uxtah	r3, r3, sl
 80049fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a02:	fa1f fa82 	uxth.w	sl, r2
 8004a06:	f8dc 2000 	ldr.w	r2, [ip]
 8004a0a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004a0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a18:	4581      	cmp	r9, r0
 8004a1a:	f84c 3b04 	str.w	r3, [ip], #4
 8004a1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a22:	d2db      	bcs.n	80049dc <quorem+0x44>
 8004a24:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a28:	b92b      	cbnz	r3, 8004a36 <quorem+0x9e>
 8004a2a:	9b01      	ldr	r3, [sp, #4]
 8004a2c:	3b04      	subs	r3, #4
 8004a2e:	429d      	cmp	r5, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	d32e      	bcc.n	8004a92 <quorem+0xfa>
 8004a34:	613c      	str	r4, [r7, #16]
 8004a36:	4638      	mov	r0, r7
 8004a38:	f001 f8be 	bl	8005bb8 <__mcmp>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	db24      	blt.n	8004a8a <quorem+0xf2>
 8004a40:	3601      	adds	r6, #1
 8004a42:	4628      	mov	r0, r5
 8004a44:	f04f 0c00 	mov.w	ip, #0
 8004a48:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a4c:	f8d0 e000 	ldr.w	lr, [r0]
 8004a50:	b293      	uxth	r3, r2
 8004a52:	ebac 0303 	sub.w	r3, ip, r3
 8004a56:	0c12      	lsrs	r2, r2, #16
 8004a58:	fa13 f38e 	uxtah	r3, r3, lr
 8004a5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a6a:	45c1      	cmp	r9, r8
 8004a6c:	f840 3b04 	str.w	r3, [r0], #4
 8004a70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a74:	d2e8      	bcs.n	8004a48 <quorem+0xb0>
 8004a76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a7e:	b922      	cbnz	r2, 8004a8a <quorem+0xf2>
 8004a80:	3b04      	subs	r3, #4
 8004a82:	429d      	cmp	r5, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	d30a      	bcc.n	8004a9e <quorem+0x106>
 8004a88:	613c      	str	r4, [r7, #16]
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	b003      	add	sp, #12
 8004a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	3b04      	subs	r3, #4
 8004a96:	2a00      	cmp	r2, #0
 8004a98:	d1cc      	bne.n	8004a34 <quorem+0x9c>
 8004a9a:	3c01      	subs	r4, #1
 8004a9c:	e7c7      	b.n	8004a2e <quorem+0x96>
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	3b04      	subs	r3, #4
 8004aa2:	2a00      	cmp	r2, #0
 8004aa4:	d1f0      	bne.n	8004a88 <quorem+0xf0>
 8004aa6:	3c01      	subs	r4, #1
 8004aa8:	e7eb      	b.n	8004a82 <quorem+0xea>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e7ee      	b.n	8004a8c <quorem+0xf4>
	...

08004ab0 <_dtoa_r>:
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	ed2d 8b02 	vpush	{d8}
 8004ab8:	ec57 6b10 	vmov	r6, r7, d0
 8004abc:	b095      	sub	sp, #84	; 0x54
 8004abe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ac0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ac4:	9105      	str	r1, [sp, #20]
 8004ac6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004aca:	4604      	mov	r4, r0
 8004acc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ad0:	b975      	cbnz	r5, 8004af0 <_dtoa_r+0x40>
 8004ad2:	2010      	movs	r0, #16
 8004ad4:	f000 fddc 	bl	8005690 <malloc>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6260      	str	r0, [r4, #36]	; 0x24
 8004adc:	b920      	cbnz	r0, 8004ae8 <_dtoa_r+0x38>
 8004ade:	4bb2      	ldr	r3, [pc, #712]	; (8004da8 <_dtoa_r+0x2f8>)
 8004ae0:	21ea      	movs	r1, #234	; 0xea
 8004ae2:	48b2      	ldr	r0, [pc, #712]	; (8004dac <_dtoa_r+0x2fc>)
 8004ae4:	f001 fa32 	bl	8005f4c <__assert_func>
 8004ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004aec:	6005      	str	r5, [r0, #0]
 8004aee:	60c5      	str	r5, [r0, #12]
 8004af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	b151      	cbz	r1, 8004b0c <_dtoa_r+0x5c>
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	604a      	str	r2, [r1, #4]
 8004afa:	2301      	movs	r3, #1
 8004afc:	4093      	lsls	r3, r2
 8004afe:	608b      	str	r3, [r1, #8]
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 fe1b 	bl	800573c <_Bfree>
 8004b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	1e3b      	subs	r3, r7, #0
 8004b0e:	bfb9      	ittee	lt
 8004b10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b14:	9303      	strlt	r3, [sp, #12]
 8004b16:	2300      	movge	r3, #0
 8004b18:	f8c8 3000 	strge.w	r3, [r8]
 8004b1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004b20:	4ba3      	ldr	r3, [pc, #652]	; (8004db0 <_dtoa_r+0x300>)
 8004b22:	bfbc      	itt	lt
 8004b24:	2201      	movlt	r2, #1
 8004b26:	f8c8 2000 	strlt.w	r2, [r8]
 8004b2a:	ea33 0309 	bics.w	r3, r3, r9
 8004b2e:	d11b      	bne.n	8004b68 <_dtoa_r+0xb8>
 8004b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b32:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b3c:	4333      	orrs	r3, r6
 8004b3e:	f000 857a 	beq.w	8005636 <_dtoa_r+0xb86>
 8004b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b44:	b963      	cbnz	r3, 8004b60 <_dtoa_r+0xb0>
 8004b46:	4b9b      	ldr	r3, [pc, #620]	; (8004db4 <_dtoa_r+0x304>)
 8004b48:	e024      	b.n	8004b94 <_dtoa_r+0xe4>
 8004b4a:	4b9b      	ldr	r3, [pc, #620]	; (8004db8 <_dtoa_r+0x308>)
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	9800      	ldr	r0, [sp, #0]
 8004b56:	b015      	add	sp, #84	; 0x54
 8004b58:	ecbd 8b02 	vpop	{d8}
 8004b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b60:	4b94      	ldr	r3, [pc, #592]	; (8004db4 <_dtoa_r+0x304>)
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	3303      	adds	r3, #3
 8004b66:	e7f3      	b.n	8004b50 <_dtoa_r+0xa0>
 8004b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	ec51 0b17 	vmov	r0, r1, d7
 8004b72:	2300      	movs	r3, #0
 8004b74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004b78:	f7fb ffb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	b158      	cbz	r0, 8004b98 <_dtoa_r+0xe8>
 8004b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b82:	2301      	movs	r3, #1
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8551 	beq.w	8005630 <_dtoa_r+0xb80>
 8004b8e:	488b      	ldr	r0, [pc, #556]	; (8004dbc <_dtoa_r+0x30c>)
 8004b90:	6018      	str	r0, [r3, #0]
 8004b92:	1e43      	subs	r3, r0, #1
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	e7dd      	b.n	8004b54 <_dtoa_r+0xa4>
 8004b98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004b9c:	aa12      	add	r2, sp, #72	; 0x48
 8004b9e:	a913      	add	r1, sp, #76	; 0x4c
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f001 f8ad 	bl	8005d00 <__d2b>
 8004ba6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004baa:	4683      	mov	fp, r0
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	d07c      	beq.n	8004caa <_dtoa_r+0x1fa>
 8004bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004bbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bca:	4b7d      	ldr	r3, [pc, #500]	; (8004dc0 <_dtoa_r+0x310>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4630      	mov	r0, r6
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	f7fb fb69 	bl	80002a8 <__aeabi_dsub>
 8004bd6:	a36e      	add	r3, pc, #440	; (adr r3, 8004d90 <_dtoa_r+0x2e0>)
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fd1c 	bl	8000618 <__aeabi_dmul>
 8004be0:	a36d      	add	r3, pc, #436	; (adr r3, 8004d98 <_dtoa_r+0x2e8>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fb61 	bl	80002ac <__adddf3>
 8004bea:	4606      	mov	r6, r0
 8004bec:	4628      	mov	r0, r5
 8004bee:	460f      	mov	r7, r1
 8004bf0:	f7fb fca8 	bl	8000544 <__aeabi_i2d>
 8004bf4:	a36a      	add	r3, pc, #424	; (adr r3, 8004da0 <_dtoa_r+0x2f0>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f7fb fd0d 	bl	8000618 <__aeabi_dmul>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4630      	mov	r0, r6
 8004c04:	4639      	mov	r1, r7
 8004c06:	f7fb fb51 	bl	80002ac <__adddf3>
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	460f      	mov	r7, r1
 8004c0e:	f7fb ffb3 	bl	8000b78 <__aeabi_d2iz>
 8004c12:	2200      	movs	r2, #0
 8004c14:	4682      	mov	sl, r0
 8004c16:	2300      	movs	r3, #0
 8004c18:	4630      	mov	r0, r6
 8004c1a:	4639      	mov	r1, r7
 8004c1c:	f7fb ff6e 	bl	8000afc <__aeabi_dcmplt>
 8004c20:	b148      	cbz	r0, 8004c36 <_dtoa_r+0x186>
 8004c22:	4650      	mov	r0, sl
 8004c24:	f7fb fc8e 	bl	8000544 <__aeabi_i2d>
 8004c28:	4632      	mov	r2, r6
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	f7fb ff5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c30:	b908      	cbnz	r0, 8004c36 <_dtoa_r+0x186>
 8004c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c36:	f1ba 0f16 	cmp.w	sl, #22
 8004c3a:	d854      	bhi.n	8004ce6 <_dtoa_r+0x236>
 8004c3c:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <_dtoa_r+0x314>)
 8004c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c4a:	f7fb ff57 	bl	8000afc <__aeabi_dcmplt>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d04b      	beq.n	8004cea <_dtoa_r+0x23a>
 8004c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c56:	2300      	movs	r3, #0
 8004c58:	930e      	str	r3, [sp, #56]	; 0x38
 8004c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c5c:	1b5d      	subs	r5, r3, r5
 8004c5e:	1e6b      	subs	r3, r5, #1
 8004c60:	9304      	str	r3, [sp, #16]
 8004c62:	bf43      	ittte	mi
 8004c64:	2300      	movmi	r3, #0
 8004c66:	f1c5 0801 	rsbmi	r8, r5, #1
 8004c6a:	9304      	strmi	r3, [sp, #16]
 8004c6c:	f04f 0800 	movpl.w	r8, #0
 8004c70:	f1ba 0f00 	cmp.w	sl, #0
 8004c74:	db3b      	blt.n	8004cee <_dtoa_r+0x23e>
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004c7c:	4453      	add	r3, sl
 8004c7e:	9304      	str	r3, [sp, #16]
 8004c80:	2300      	movs	r3, #0
 8004c82:	9306      	str	r3, [sp, #24]
 8004c84:	9b05      	ldr	r3, [sp, #20]
 8004c86:	2b09      	cmp	r3, #9
 8004c88:	d869      	bhi.n	8004d5e <_dtoa_r+0x2ae>
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	bfc4      	itt	gt
 8004c8e:	3b04      	subgt	r3, #4
 8004c90:	9305      	strgt	r3, [sp, #20]
 8004c92:	9b05      	ldr	r3, [sp, #20]
 8004c94:	f1a3 0302 	sub.w	r3, r3, #2
 8004c98:	bfcc      	ite	gt
 8004c9a:	2500      	movgt	r5, #0
 8004c9c:	2501      	movle	r5, #1
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d869      	bhi.n	8004d76 <_dtoa_r+0x2c6>
 8004ca2:	e8df f003 	tbb	[pc, r3]
 8004ca6:	4e2c      	.short	0x4e2c
 8004ca8:	5a4c      	.short	0x5a4c
 8004caa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004cae:	441d      	add	r5, r3
 8004cb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	bfc1      	itttt	gt
 8004cb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004cc0:	fa09 f303 	lslgt.w	r3, r9, r3
 8004cc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cc8:	bfda      	itte	le
 8004cca:	f1c3 0320 	rsble	r3, r3, #32
 8004cce:	fa06 f003 	lslle.w	r0, r6, r3
 8004cd2:	4318      	orrgt	r0, r3
 8004cd4:	f7fb fc26 	bl	8000524 <__aeabi_ui2d>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4606      	mov	r6, r0
 8004cdc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004ce0:	3d01      	subs	r5, #1
 8004ce2:	9310      	str	r3, [sp, #64]	; 0x40
 8004ce4:	e771      	b.n	8004bca <_dtoa_r+0x11a>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e7b6      	b.n	8004c58 <_dtoa_r+0x1a8>
 8004cea:	900e      	str	r0, [sp, #56]	; 0x38
 8004cec:	e7b5      	b.n	8004c5a <_dtoa_r+0x1aa>
 8004cee:	f1ca 0300 	rsb	r3, sl, #0
 8004cf2:	9306      	str	r3, [sp, #24]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	eba8 080a 	sub.w	r8, r8, sl
 8004cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8004cfc:	e7c2      	b.n	8004c84 <_dtoa_r+0x1d4>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9308      	str	r3, [sp, #32]
 8004d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dc39      	bgt.n	8004d7c <_dtoa_r+0x2cc>
 8004d08:	f04f 0901 	mov.w	r9, #1
 8004d0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d10:	464b      	mov	r3, r9
 8004d12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d18:	2200      	movs	r2, #0
 8004d1a:	6042      	str	r2, [r0, #4]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	f102 0614 	add.w	r6, r2, #20
 8004d22:	429e      	cmp	r6, r3
 8004d24:	6841      	ldr	r1, [r0, #4]
 8004d26:	d92f      	bls.n	8004d88 <_dtoa_r+0x2d8>
 8004d28:	4620      	mov	r0, r4
 8004d2a:	f000 fcc7 	bl	80056bc <_Balloc>
 8004d2e:	9000      	str	r0, [sp, #0]
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d14b      	bne.n	8004dcc <_dtoa_r+0x31c>
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <_dtoa_r+0x318>)
 8004d36:	4602      	mov	r2, r0
 8004d38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d3c:	e6d1      	b.n	8004ae2 <_dtoa_r+0x32>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e7de      	b.n	8004d00 <_dtoa_r+0x250>
 8004d42:	2300      	movs	r3, #0
 8004d44:	9308      	str	r3, [sp, #32]
 8004d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d48:	eb0a 0903 	add.w	r9, sl, r3
 8004d4c:	f109 0301 	add.w	r3, r9, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	bfb8      	it	lt
 8004d56:	2301      	movlt	r3, #1
 8004d58:	e7dd      	b.n	8004d16 <_dtoa_r+0x266>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e7f2      	b.n	8004d44 <_dtoa_r+0x294>
 8004d5e:	2501      	movs	r5, #1
 8004d60:	2300      	movs	r3, #0
 8004d62:	9305      	str	r3, [sp, #20]
 8004d64:	9508      	str	r5, [sp, #32]
 8004d66:	f04f 39ff 	mov.w	r9, #4294967295
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d70:	2312      	movs	r3, #18
 8004d72:	9209      	str	r2, [sp, #36]	; 0x24
 8004d74:	e7cf      	b.n	8004d16 <_dtoa_r+0x266>
 8004d76:	2301      	movs	r3, #1
 8004d78:	9308      	str	r3, [sp, #32]
 8004d7a:	e7f4      	b.n	8004d66 <_dtoa_r+0x2b6>
 8004d7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004d80:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d84:	464b      	mov	r3, r9
 8004d86:	e7c6      	b.n	8004d16 <_dtoa_r+0x266>
 8004d88:	3101      	adds	r1, #1
 8004d8a:	6041      	str	r1, [r0, #4]
 8004d8c:	0052      	lsls	r2, r2, #1
 8004d8e:	e7c6      	b.n	8004d1e <_dtoa_r+0x26e>
 8004d90:	636f4361 	.word	0x636f4361
 8004d94:	3fd287a7 	.word	0x3fd287a7
 8004d98:	8b60c8b3 	.word	0x8b60c8b3
 8004d9c:	3fc68a28 	.word	0x3fc68a28
 8004da0:	509f79fb 	.word	0x509f79fb
 8004da4:	3fd34413 	.word	0x3fd34413
 8004da8:	08006b6d 	.word	0x08006b6d
 8004dac:	08006b84 	.word	0x08006b84
 8004db0:	7ff00000 	.word	0x7ff00000
 8004db4:	08006b69 	.word	0x08006b69
 8004db8:	08006b60 	.word	0x08006b60
 8004dbc:	08006b3d 	.word	0x08006b3d
 8004dc0:	3ff80000 	.word	0x3ff80000
 8004dc4:	08006c80 	.word	0x08006c80
 8004dc8:	08006be3 	.word	0x08006be3
 8004dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dce:	9a00      	ldr	r2, [sp, #0]
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	9b01      	ldr	r3, [sp, #4]
 8004dd4:	2b0e      	cmp	r3, #14
 8004dd6:	f200 80ad 	bhi.w	8004f34 <_dtoa_r+0x484>
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	f000 80aa 	beq.w	8004f34 <_dtoa_r+0x484>
 8004de0:	f1ba 0f00 	cmp.w	sl, #0
 8004de4:	dd36      	ble.n	8004e54 <_dtoa_r+0x3a4>
 8004de6:	4ac3      	ldr	r2, [pc, #780]	; (80050f4 <_dtoa_r+0x644>)
 8004de8:	f00a 030f 	and.w	r3, sl, #15
 8004dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004df0:	ed93 7b00 	vldr	d7, [r3]
 8004df4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004df8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004dfc:	eeb0 8a47 	vmov.f32	s16, s14
 8004e00:	eef0 8a67 	vmov.f32	s17, s15
 8004e04:	d016      	beq.n	8004e34 <_dtoa_r+0x384>
 8004e06:	4bbc      	ldr	r3, [pc, #752]	; (80050f8 <_dtoa_r+0x648>)
 8004e08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e10:	f7fb fd2c 	bl	800086c <__aeabi_ddiv>
 8004e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e18:	f007 070f 	and.w	r7, r7, #15
 8004e1c:	2503      	movs	r5, #3
 8004e1e:	4eb6      	ldr	r6, [pc, #728]	; (80050f8 <_dtoa_r+0x648>)
 8004e20:	b957      	cbnz	r7, 8004e38 <_dtoa_r+0x388>
 8004e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e26:	ec53 2b18 	vmov	r2, r3, d8
 8004e2a:	f7fb fd1f 	bl	800086c <__aeabi_ddiv>
 8004e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e32:	e029      	b.n	8004e88 <_dtoa_r+0x3d8>
 8004e34:	2502      	movs	r5, #2
 8004e36:	e7f2      	b.n	8004e1e <_dtoa_r+0x36e>
 8004e38:	07f9      	lsls	r1, r7, #31
 8004e3a:	d508      	bpl.n	8004e4e <_dtoa_r+0x39e>
 8004e3c:	ec51 0b18 	vmov	r0, r1, d8
 8004e40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e44:	f7fb fbe8 	bl	8000618 <__aeabi_dmul>
 8004e48:	ec41 0b18 	vmov	d8, r0, r1
 8004e4c:	3501      	adds	r5, #1
 8004e4e:	107f      	asrs	r7, r7, #1
 8004e50:	3608      	adds	r6, #8
 8004e52:	e7e5      	b.n	8004e20 <_dtoa_r+0x370>
 8004e54:	f000 80a6 	beq.w	8004fa4 <_dtoa_r+0x4f4>
 8004e58:	f1ca 0600 	rsb	r6, sl, #0
 8004e5c:	4ba5      	ldr	r3, [pc, #660]	; (80050f4 <_dtoa_r+0x644>)
 8004e5e:	4fa6      	ldr	r7, [pc, #664]	; (80050f8 <_dtoa_r+0x648>)
 8004e60:	f006 020f 	and.w	r2, r6, #15
 8004e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e70:	f7fb fbd2 	bl	8000618 <__aeabi_dmul>
 8004e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e78:	1136      	asrs	r6, r6, #4
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2502      	movs	r5, #2
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	f040 8085 	bne.w	8004f8e <_dtoa_r+0x4de>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1d2      	bne.n	8004e2e <_dtoa_r+0x37e>
 8004e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 808c 	beq.w	8004fa8 <_dtoa_r+0x4f8>
 8004e90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e94:	4b99      	ldr	r3, [pc, #612]	; (80050fc <_dtoa_r+0x64c>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	f7fb fe2e 	bl	8000afc <__aeabi_dcmplt>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f000 8081 	beq.w	8004fa8 <_dtoa_r+0x4f8>
 8004ea6:	9b01      	ldr	r3, [sp, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d07d      	beq.n	8004fa8 <_dtoa_r+0x4f8>
 8004eac:	f1b9 0f00 	cmp.w	r9, #0
 8004eb0:	dd3c      	ble.n	8004f2c <_dtoa_r+0x47c>
 8004eb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004eb6:	9307      	str	r3, [sp, #28]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4b91      	ldr	r3, [pc, #580]	; (8005100 <_dtoa_r+0x650>)
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	f7fb fbaa 	bl	8000618 <__aeabi_dmul>
 8004ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec8:	3501      	adds	r5, #1
 8004eca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004ece:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f7fb fb36 	bl	8000544 <__aeabi_i2d>
 8004ed8:	4632      	mov	r2, r6
 8004eda:	463b      	mov	r3, r7
 8004edc:	f7fb fb9c 	bl	8000618 <__aeabi_dmul>
 8004ee0:	4b88      	ldr	r3, [pc, #544]	; (8005104 <_dtoa_r+0x654>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f7fb f9e2 	bl	80002ac <__adddf3>
 8004ee8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef0:	9303      	str	r3, [sp, #12]
 8004ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d15c      	bne.n	8004fb2 <_dtoa_r+0x502>
 8004ef8:	4b83      	ldr	r3, [pc, #524]	; (8005108 <_dtoa_r+0x658>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	4630      	mov	r0, r6
 8004efe:	4639      	mov	r1, r7
 8004f00:	f7fb f9d2 	bl	80002a8 <__aeabi_dsub>
 8004f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f08:	4606      	mov	r6, r0
 8004f0a:	460f      	mov	r7, r1
 8004f0c:	f7fb fe14 	bl	8000b38 <__aeabi_dcmpgt>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	f040 8296 	bne.w	8005442 <_dtoa_r+0x992>
 8004f16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f20:	4639      	mov	r1, r7
 8004f22:	f7fb fdeb 	bl	8000afc <__aeabi_dcmplt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f040 8288 	bne.w	800543c <_dtoa_r+0x98c>
 8004f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f2c0 8158 	blt.w	80051ec <_dtoa_r+0x73c>
 8004f3c:	f1ba 0f0e 	cmp.w	sl, #14
 8004f40:	f300 8154 	bgt.w	80051ec <_dtoa_r+0x73c>
 8004f44:	4b6b      	ldr	r3, [pc, #428]	; (80050f4 <_dtoa_r+0x644>)
 8004f46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f280 80e3 	bge.w	800511c <_dtoa_r+0x66c>
 8004f56:	9b01      	ldr	r3, [sp, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f300 80df 	bgt.w	800511c <_dtoa_r+0x66c>
 8004f5e:	f040 826d 	bne.w	800543c <_dtoa_r+0x98c>
 8004f62:	4b69      	ldr	r3, [pc, #420]	; (8005108 <_dtoa_r+0x658>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	4640      	mov	r0, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	f7fb fb55 	bl	8000618 <__aeabi_dmul>
 8004f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f72:	f7fb fdd7 	bl	8000b24 <__aeabi_dcmpge>
 8004f76:	9e01      	ldr	r6, [sp, #4]
 8004f78:	4637      	mov	r7, r6
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	f040 8243 	bne.w	8005406 <_dtoa_r+0x956>
 8004f80:	9d00      	ldr	r5, [sp, #0]
 8004f82:	2331      	movs	r3, #49	; 0x31
 8004f84:	f805 3b01 	strb.w	r3, [r5], #1
 8004f88:	f10a 0a01 	add.w	sl, sl, #1
 8004f8c:	e23f      	b.n	800540e <_dtoa_r+0x95e>
 8004f8e:	07f2      	lsls	r2, r6, #31
 8004f90:	d505      	bpl.n	8004f9e <_dtoa_r+0x4ee>
 8004f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f96:	f7fb fb3f 	bl	8000618 <__aeabi_dmul>
 8004f9a:	3501      	adds	r5, #1
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	1076      	asrs	r6, r6, #1
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	e76c      	b.n	8004e7e <_dtoa_r+0x3ce>
 8004fa4:	2502      	movs	r5, #2
 8004fa6:	e76f      	b.n	8004e88 <_dtoa_r+0x3d8>
 8004fa8:	9b01      	ldr	r3, [sp, #4]
 8004faa:	f8cd a01c 	str.w	sl, [sp, #28]
 8004fae:	930c      	str	r3, [sp, #48]	; 0x30
 8004fb0:	e78d      	b.n	8004ece <_dtoa_r+0x41e>
 8004fb2:	9900      	ldr	r1, [sp, #0]
 8004fb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fb8:	4b4e      	ldr	r3, [pc, #312]	; (80050f4 <_dtoa_r+0x644>)
 8004fba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fbe:	4401      	add	r1, r0
 8004fc0:	9102      	str	r1, [sp, #8]
 8004fc2:	9908      	ldr	r1, [sp, #32]
 8004fc4:	eeb0 8a47 	vmov.f32	s16, s14
 8004fc8:	eef0 8a67 	vmov.f32	s17, s15
 8004fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	d045      	beq.n	8005064 <_dtoa_r+0x5b4>
 8004fd8:	494c      	ldr	r1, [pc, #304]	; (800510c <_dtoa_r+0x65c>)
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7fb fc46 	bl	800086c <__aeabi_ddiv>
 8004fe0:	ec53 2b18 	vmov	r2, r3, d8
 8004fe4:	f7fb f960 	bl	80002a8 <__aeabi_dsub>
 8004fe8:	9d00      	ldr	r5, [sp, #0]
 8004fea:	ec41 0b18 	vmov	d8, r0, r1
 8004fee:	4639      	mov	r1, r7
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f7fb fdc1 	bl	8000b78 <__aeabi_d2iz>
 8004ff6:	900c      	str	r0, [sp, #48]	; 0x30
 8004ff8:	f7fb faa4 	bl	8000544 <__aeabi_i2d>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4630      	mov	r0, r6
 8005002:	4639      	mov	r1, r7
 8005004:	f7fb f950 	bl	80002a8 <__aeabi_dsub>
 8005008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800500a:	3330      	adds	r3, #48	; 0x30
 800500c:	f805 3b01 	strb.w	r3, [r5], #1
 8005010:	ec53 2b18 	vmov	r2, r3, d8
 8005014:	4606      	mov	r6, r0
 8005016:	460f      	mov	r7, r1
 8005018:	f7fb fd70 	bl	8000afc <__aeabi_dcmplt>
 800501c:	2800      	cmp	r0, #0
 800501e:	d165      	bne.n	80050ec <_dtoa_r+0x63c>
 8005020:	4632      	mov	r2, r6
 8005022:	463b      	mov	r3, r7
 8005024:	4935      	ldr	r1, [pc, #212]	; (80050fc <_dtoa_r+0x64c>)
 8005026:	2000      	movs	r0, #0
 8005028:	f7fb f93e 	bl	80002a8 <__aeabi_dsub>
 800502c:	ec53 2b18 	vmov	r2, r3, d8
 8005030:	f7fb fd64 	bl	8000afc <__aeabi_dcmplt>
 8005034:	2800      	cmp	r0, #0
 8005036:	f040 80b9 	bne.w	80051ac <_dtoa_r+0x6fc>
 800503a:	9b02      	ldr	r3, [sp, #8]
 800503c:	429d      	cmp	r5, r3
 800503e:	f43f af75 	beq.w	8004f2c <_dtoa_r+0x47c>
 8005042:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <_dtoa_r+0x650>)
 8005044:	ec51 0b18 	vmov	r0, r1, d8
 8005048:	2200      	movs	r2, #0
 800504a:	f7fb fae5 	bl	8000618 <__aeabi_dmul>
 800504e:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <_dtoa_r+0x650>)
 8005050:	ec41 0b18 	vmov	d8, r0, r1
 8005054:	2200      	movs	r2, #0
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7fb fadd 	bl	8000618 <__aeabi_dmul>
 800505e:	4606      	mov	r6, r0
 8005060:	460f      	mov	r7, r1
 8005062:	e7c4      	b.n	8004fee <_dtoa_r+0x53e>
 8005064:	ec51 0b17 	vmov	r0, r1, d7
 8005068:	f7fb fad6 	bl	8000618 <__aeabi_dmul>
 800506c:	9b02      	ldr	r3, [sp, #8]
 800506e:	9d00      	ldr	r5, [sp, #0]
 8005070:	930c      	str	r3, [sp, #48]	; 0x30
 8005072:	ec41 0b18 	vmov	d8, r0, r1
 8005076:	4639      	mov	r1, r7
 8005078:	4630      	mov	r0, r6
 800507a:	f7fb fd7d 	bl	8000b78 <__aeabi_d2iz>
 800507e:	9011      	str	r0, [sp, #68]	; 0x44
 8005080:	f7fb fa60 	bl	8000544 <__aeabi_i2d>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4630      	mov	r0, r6
 800508a:	4639      	mov	r1, r7
 800508c:	f7fb f90c 	bl	80002a8 <__aeabi_dsub>
 8005090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005092:	3330      	adds	r3, #48	; 0x30
 8005094:	f805 3b01 	strb.w	r3, [r5], #1
 8005098:	9b02      	ldr	r3, [sp, #8]
 800509a:	429d      	cmp	r5, r3
 800509c:	4606      	mov	r6, r0
 800509e:	460f      	mov	r7, r1
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	d134      	bne.n	8005110 <_dtoa_r+0x660>
 80050a6:	4b19      	ldr	r3, [pc, #100]	; (800510c <_dtoa_r+0x65c>)
 80050a8:	ec51 0b18 	vmov	r0, r1, d8
 80050ac:	f7fb f8fe 	bl	80002ac <__adddf3>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4630      	mov	r0, r6
 80050b6:	4639      	mov	r1, r7
 80050b8:	f7fb fd3e 	bl	8000b38 <__aeabi_dcmpgt>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d175      	bne.n	80051ac <_dtoa_r+0x6fc>
 80050c0:	ec53 2b18 	vmov	r2, r3, d8
 80050c4:	4911      	ldr	r1, [pc, #68]	; (800510c <_dtoa_r+0x65c>)
 80050c6:	2000      	movs	r0, #0
 80050c8:	f7fb f8ee 	bl	80002a8 <__aeabi_dsub>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4630      	mov	r0, r6
 80050d2:	4639      	mov	r1, r7
 80050d4:	f7fb fd12 	bl	8000afc <__aeabi_dcmplt>
 80050d8:	2800      	cmp	r0, #0
 80050da:	f43f af27 	beq.w	8004f2c <_dtoa_r+0x47c>
 80050de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050e0:	1e6b      	subs	r3, r5, #1
 80050e2:	930c      	str	r3, [sp, #48]	; 0x30
 80050e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050e8:	2b30      	cmp	r3, #48	; 0x30
 80050ea:	d0f8      	beq.n	80050de <_dtoa_r+0x62e>
 80050ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80050f0:	e04a      	b.n	8005188 <_dtoa_r+0x6d8>
 80050f2:	bf00      	nop
 80050f4:	08006c80 	.word	0x08006c80
 80050f8:	08006c58 	.word	0x08006c58
 80050fc:	3ff00000 	.word	0x3ff00000
 8005100:	40240000 	.word	0x40240000
 8005104:	401c0000 	.word	0x401c0000
 8005108:	40140000 	.word	0x40140000
 800510c:	3fe00000 	.word	0x3fe00000
 8005110:	4baf      	ldr	r3, [pc, #700]	; (80053d0 <_dtoa_r+0x920>)
 8005112:	f7fb fa81 	bl	8000618 <__aeabi_dmul>
 8005116:	4606      	mov	r6, r0
 8005118:	460f      	mov	r7, r1
 800511a:	e7ac      	b.n	8005076 <_dtoa_r+0x5c6>
 800511c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005120:	9d00      	ldr	r5, [sp, #0]
 8005122:	4642      	mov	r2, r8
 8005124:	464b      	mov	r3, r9
 8005126:	4630      	mov	r0, r6
 8005128:	4639      	mov	r1, r7
 800512a:	f7fb fb9f 	bl	800086c <__aeabi_ddiv>
 800512e:	f7fb fd23 	bl	8000b78 <__aeabi_d2iz>
 8005132:	9002      	str	r0, [sp, #8]
 8005134:	f7fb fa06 	bl	8000544 <__aeabi_i2d>
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	f7fb fa6c 	bl	8000618 <__aeabi_dmul>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4630      	mov	r0, r6
 8005146:	4639      	mov	r1, r7
 8005148:	f7fb f8ae 	bl	80002a8 <__aeabi_dsub>
 800514c:	9e02      	ldr	r6, [sp, #8]
 800514e:	9f01      	ldr	r7, [sp, #4]
 8005150:	3630      	adds	r6, #48	; 0x30
 8005152:	f805 6b01 	strb.w	r6, [r5], #1
 8005156:	9e00      	ldr	r6, [sp, #0]
 8005158:	1bae      	subs	r6, r5, r6
 800515a:	42b7      	cmp	r7, r6
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	d137      	bne.n	80051d2 <_dtoa_r+0x722>
 8005162:	f7fb f8a3 	bl	80002ac <__adddf3>
 8005166:	4642      	mov	r2, r8
 8005168:	464b      	mov	r3, r9
 800516a:	4606      	mov	r6, r0
 800516c:	460f      	mov	r7, r1
 800516e:	f7fb fce3 	bl	8000b38 <__aeabi_dcmpgt>
 8005172:	b9c8      	cbnz	r0, 80051a8 <_dtoa_r+0x6f8>
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	4630      	mov	r0, r6
 800517a:	4639      	mov	r1, r7
 800517c:	f7fb fcb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005180:	b110      	cbz	r0, 8005188 <_dtoa_r+0x6d8>
 8005182:	9b02      	ldr	r3, [sp, #8]
 8005184:	07d9      	lsls	r1, r3, #31
 8005186:	d40f      	bmi.n	80051a8 <_dtoa_r+0x6f8>
 8005188:	4620      	mov	r0, r4
 800518a:	4659      	mov	r1, fp
 800518c:	f000 fad6 	bl	800573c <_Bfree>
 8005190:	2300      	movs	r3, #0
 8005192:	702b      	strb	r3, [r5, #0]
 8005194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005196:	f10a 0001 	add.w	r0, sl, #1
 800519a:	6018      	str	r0, [r3, #0]
 800519c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f43f acd8 	beq.w	8004b54 <_dtoa_r+0xa4>
 80051a4:	601d      	str	r5, [r3, #0]
 80051a6:	e4d5      	b.n	8004b54 <_dtoa_r+0xa4>
 80051a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80051ac:	462b      	mov	r3, r5
 80051ae:	461d      	mov	r5, r3
 80051b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051b4:	2a39      	cmp	r2, #57	; 0x39
 80051b6:	d108      	bne.n	80051ca <_dtoa_r+0x71a>
 80051b8:	9a00      	ldr	r2, [sp, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d1f7      	bne.n	80051ae <_dtoa_r+0x6fe>
 80051be:	9a07      	ldr	r2, [sp, #28]
 80051c0:	9900      	ldr	r1, [sp, #0]
 80051c2:	3201      	adds	r2, #1
 80051c4:	9207      	str	r2, [sp, #28]
 80051c6:	2230      	movs	r2, #48	; 0x30
 80051c8:	700a      	strb	r2, [r1, #0]
 80051ca:	781a      	ldrb	r2, [r3, #0]
 80051cc:	3201      	adds	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e78c      	b.n	80050ec <_dtoa_r+0x63c>
 80051d2:	4b7f      	ldr	r3, [pc, #508]	; (80053d0 <_dtoa_r+0x920>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	f7fb fa1f 	bl	8000618 <__aeabi_dmul>
 80051da:	2200      	movs	r2, #0
 80051dc:	2300      	movs	r3, #0
 80051de:	4606      	mov	r6, r0
 80051e0:	460f      	mov	r7, r1
 80051e2:	f7fb fc81 	bl	8000ae8 <__aeabi_dcmpeq>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d09b      	beq.n	8005122 <_dtoa_r+0x672>
 80051ea:	e7cd      	b.n	8005188 <_dtoa_r+0x6d8>
 80051ec:	9a08      	ldr	r2, [sp, #32]
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	f000 80c4 	beq.w	800537c <_dtoa_r+0x8cc>
 80051f4:	9a05      	ldr	r2, [sp, #20]
 80051f6:	2a01      	cmp	r2, #1
 80051f8:	f300 80a8 	bgt.w	800534c <_dtoa_r+0x89c>
 80051fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051fe:	2a00      	cmp	r2, #0
 8005200:	f000 80a0 	beq.w	8005344 <_dtoa_r+0x894>
 8005204:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005208:	9e06      	ldr	r6, [sp, #24]
 800520a:	4645      	mov	r5, r8
 800520c:	9a04      	ldr	r2, [sp, #16]
 800520e:	2101      	movs	r1, #1
 8005210:	441a      	add	r2, r3
 8005212:	4620      	mov	r0, r4
 8005214:	4498      	add	r8, r3
 8005216:	9204      	str	r2, [sp, #16]
 8005218:	f000 fb4c 	bl	80058b4 <__i2b>
 800521c:	4607      	mov	r7, r0
 800521e:	2d00      	cmp	r5, #0
 8005220:	dd0b      	ble.n	800523a <_dtoa_r+0x78a>
 8005222:	9b04      	ldr	r3, [sp, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	dd08      	ble.n	800523a <_dtoa_r+0x78a>
 8005228:	42ab      	cmp	r3, r5
 800522a:	9a04      	ldr	r2, [sp, #16]
 800522c:	bfa8      	it	ge
 800522e:	462b      	movge	r3, r5
 8005230:	eba8 0803 	sub.w	r8, r8, r3
 8005234:	1aed      	subs	r5, r5, r3
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	9b06      	ldr	r3, [sp, #24]
 800523c:	b1fb      	cbz	r3, 800527e <_dtoa_r+0x7ce>
 800523e:	9b08      	ldr	r3, [sp, #32]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 809f 	beq.w	8005384 <_dtoa_r+0x8d4>
 8005246:	2e00      	cmp	r6, #0
 8005248:	dd11      	ble.n	800526e <_dtoa_r+0x7be>
 800524a:	4639      	mov	r1, r7
 800524c:	4632      	mov	r2, r6
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fbec 	bl	8005a2c <__pow5mult>
 8005254:	465a      	mov	r2, fp
 8005256:	4601      	mov	r1, r0
 8005258:	4607      	mov	r7, r0
 800525a:	4620      	mov	r0, r4
 800525c:	f000 fb40 	bl	80058e0 <__multiply>
 8005260:	4659      	mov	r1, fp
 8005262:	9007      	str	r0, [sp, #28]
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fa69 	bl	800573c <_Bfree>
 800526a:	9b07      	ldr	r3, [sp, #28]
 800526c:	469b      	mov	fp, r3
 800526e:	9b06      	ldr	r3, [sp, #24]
 8005270:	1b9a      	subs	r2, r3, r6
 8005272:	d004      	beq.n	800527e <_dtoa_r+0x7ce>
 8005274:	4659      	mov	r1, fp
 8005276:	4620      	mov	r0, r4
 8005278:	f000 fbd8 	bl	8005a2c <__pow5mult>
 800527c:	4683      	mov	fp, r0
 800527e:	2101      	movs	r1, #1
 8005280:	4620      	mov	r0, r4
 8005282:	f000 fb17 	bl	80058b4 <__i2b>
 8005286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005288:	2b00      	cmp	r3, #0
 800528a:	4606      	mov	r6, r0
 800528c:	dd7c      	ble.n	8005388 <_dtoa_r+0x8d8>
 800528e:	461a      	mov	r2, r3
 8005290:	4601      	mov	r1, r0
 8005292:	4620      	mov	r0, r4
 8005294:	f000 fbca 	bl	8005a2c <__pow5mult>
 8005298:	9b05      	ldr	r3, [sp, #20]
 800529a:	2b01      	cmp	r3, #1
 800529c:	4606      	mov	r6, r0
 800529e:	dd76      	ble.n	800538e <_dtoa_r+0x8de>
 80052a0:	2300      	movs	r3, #0
 80052a2:	9306      	str	r3, [sp, #24]
 80052a4:	6933      	ldr	r3, [r6, #16]
 80052a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052aa:	6918      	ldr	r0, [r3, #16]
 80052ac:	f000 fab2 	bl	8005814 <__hi0bits>
 80052b0:	f1c0 0020 	rsb	r0, r0, #32
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	4418      	add	r0, r3
 80052b8:	f010 001f 	ands.w	r0, r0, #31
 80052bc:	f000 8086 	beq.w	80053cc <_dtoa_r+0x91c>
 80052c0:	f1c0 0320 	rsb	r3, r0, #32
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	dd7f      	ble.n	80053c8 <_dtoa_r+0x918>
 80052c8:	f1c0 001c 	rsb	r0, r0, #28
 80052cc:	9b04      	ldr	r3, [sp, #16]
 80052ce:	4403      	add	r3, r0
 80052d0:	4480      	add	r8, r0
 80052d2:	4405      	add	r5, r0
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	f1b8 0f00 	cmp.w	r8, #0
 80052da:	dd05      	ble.n	80052e8 <_dtoa_r+0x838>
 80052dc:	4659      	mov	r1, fp
 80052de:	4642      	mov	r2, r8
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fbfd 	bl	8005ae0 <__lshift>
 80052e6:	4683      	mov	fp, r0
 80052e8:	9b04      	ldr	r3, [sp, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dd05      	ble.n	80052fa <_dtoa_r+0x84a>
 80052ee:	4631      	mov	r1, r6
 80052f0:	461a      	mov	r2, r3
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 fbf4 	bl	8005ae0 <__lshift>
 80052f8:	4606      	mov	r6, r0
 80052fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d069      	beq.n	80053d4 <_dtoa_r+0x924>
 8005300:	4631      	mov	r1, r6
 8005302:	4658      	mov	r0, fp
 8005304:	f000 fc58 	bl	8005bb8 <__mcmp>
 8005308:	2800      	cmp	r0, #0
 800530a:	da63      	bge.n	80053d4 <_dtoa_r+0x924>
 800530c:	2300      	movs	r3, #0
 800530e:	4659      	mov	r1, fp
 8005310:	220a      	movs	r2, #10
 8005312:	4620      	mov	r0, r4
 8005314:	f000 fa34 	bl	8005780 <__multadd>
 8005318:	9b08      	ldr	r3, [sp, #32]
 800531a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800531e:	4683      	mov	fp, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 818f 	beq.w	8005644 <_dtoa_r+0xb94>
 8005326:	4639      	mov	r1, r7
 8005328:	2300      	movs	r3, #0
 800532a:	220a      	movs	r2, #10
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fa27 	bl	8005780 <__multadd>
 8005332:	f1b9 0f00 	cmp.w	r9, #0
 8005336:	4607      	mov	r7, r0
 8005338:	f300 808e 	bgt.w	8005458 <_dtoa_r+0x9a8>
 800533c:	9b05      	ldr	r3, [sp, #20]
 800533e:	2b02      	cmp	r3, #2
 8005340:	dc50      	bgt.n	80053e4 <_dtoa_r+0x934>
 8005342:	e089      	b.n	8005458 <_dtoa_r+0x9a8>
 8005344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800534a:	e75d      	b.n	8005208 <_dtoa_r+0x758>
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	1e5e      	subs	r6, r3, #1
 8005350:	9b06      	ldr	r3, [sp, #24]
 8005352:	42b3      	cmp	r3, r6
 8005354:	bfbf      	itttt	lt
 8005356:	9b06      	ldrlt	r3, [sp, #24]
 8005358:	9606      	strlt	r6, [sp, #24]
 800535a:	1af2      	sublt	r2, r6, r3
 800535c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800535e:	bfb6      	itet	lt
 8005360:	189b      	addlt	r3, r3, r2
 8005362:	1b9e      	subge	r6, r3, r6
 8005364:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005366:	9b01      	ldr	r3, [sp, #4]
 8005368:	bfb8      	it	lt
 800536a:	2600      	movlt	r6, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	bfb5      	itete	lt
 8005370:	eba8 0503 	sublt.w	r5, r8, r3
 8005374:	9b01      	ldrge	r3, [sp, #4]
 8005376:	2300      	movlt	r3, #0
 8005378:	4645      	movge	r5, r8
 800537a:	e747      	b.n	800520c <_dtoa_r+0x75c>
 800537c:	9e06      	ldr	r6, [sp, #24]
 800537e:	9f08      	ldr	r7, [sp, #32]
 8005380:	4645      	mov	r5, r8
 8005382:	e74c      	b.n	800521e <_dtoa_r+0x76e>
 8005384:	9a06      	ldr	r2, [sp, #24]
 8005386:	e775      	b.n	8005274 <_dtoa_r+0x7c4>
 8005388:	9b05      	ldr	r3, [sp, #20]
 800538a:	2b01      	cmp	r3, #1
 800538c:	dc18      	bgt.n	80053c0 <_dtoa_r+0x910>
 800538e:	9b02      	ldr	r3, [sp, #8]
 8005390:	b9b3      	cbnz	r3, 80053c0 <_dtoa_r+0x910>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005398:	b9a3      	cbnz	r3, 80053c4 <_dtoa_r+0x914>
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	0d1b      	lsrs	r3, r3, #20
 80053a2:	051b      	lsls	r3, r3, #20
 80053a4:	b12b      	cbz	r3, 80053b2 <_dtoa_r+0x902>
 80053a6:	9b04      	ldr	r3, [sp, #16]
 80053a8:	3301      	adds	r3, #1
 80053aa:	9304      	str	r3, [sp, #16]
 80053ac:	f108 0801 	add.w	r8, r8, #1
 80053b0:	2301      	movs	r3, #1
 80053b2:	9306      	str	r3, [sp, #24]
 80053b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f47f af74 	bne.w	80052a4 <_dtoa_r+0x7f4>
 80053bc:	2001      	movs	r0, #1
 80053be:	e779      	b.n	80052b4 <_dtoa_r+0x804>
 80053c0:	2300      	movs	r3, #0
 80053c2:	e7f6      	b.n	80053b2 <_dtoa_r+0x902>
 80053c4:	9b02      	ldr	r3, [sp, #8]
 80053c6:	e7f4      	b.n	80053b2 <_dtoa_r+0x902>
 80053c8:	d085      	beq.n	80052d6 <_dtoa_r+0x826>
 80053ca:	4618      	mov	r0, r3
 80053cc:	301c      	adds	r0, #28
 80053ce:	e77d      	b.n	80052cc <_dtoa_r+0x81c>
 80053d0:	40240000 	.word	0x40240000
 80053d4:	9b01      	ldr	r3, [sp, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dc38      	bgt.n	800544c <_dtoa_r+0x99c>
 80053da:	9b05      	ldr	r3, [sp, #20]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	dd35      	ble.n	800544c <_dtoa_r+0x99c>
 80053e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80053e4:	f1b9 0f00 	cmp.w	r9, #0
 80053e8:	d10d      	bne.n	8005406 <_dtoa_r+0x956>
 80053ea:	4631      	mov	r1, r6
 80053ec:	464b      	mov	r3, r9
 80053ee:	2205      	movs	r2, #5
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 f9c5 	bl	8005780 <__multadd>
 80053f6:	4601      	mov	r1, r0
 80053f8:	4606      	mov	r6, r0
 80053fa:	4658      	mov	r0, fp
 80053fc:	f000 fbdc 	bl	8005bb8 <__mcmp>
 8005400:	2800      	cmp	r0, #0
 8005402:	f73f adbd 	bgt.w	8004f80 <_dtoa_r+0x4d0>
 8005406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005408:	9d00      	ldr	r5, [sp, #0]
 800540a:	ea6f 0a03 	mvn.w	sl, r3
 800540e:	f04f 0800 	mov.w	r8, #0
 8005412:	4631      	mov	r1, r6
 8005414:	4620      	mov	r0, r4
 8005416:	f000 f991 	bl	800573c <_Bfree>
 800541a:	2f00      	cmp	r7, #0
 800541c:	f43f aeb4 	beq.w	8005188 <_dtoa_r+0x6d8>
 8005420:	f1b8 0f00 	cmp.w	r8, #0
 8005424:	d005      	beq.n	8005432 <_dtoa_r+0x982>
 8005426:	45b8      	cmp	r8, r7
 8005428:	d003      	beq.n	8005432 <_dtoa_r+0x982>
 800542a:	4641      	mov	r1, r8
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f985 	bl	800573c <_Bfree>
 8005432:	4639      	mov	r1, r7
 8005434:	4620      	mov	r0, r4
 8005436:	f000 f981 	bl	800573c <_Bfree>
 800543a:	e6a5      	b.n	8005188 <_dtoa_r+0x6d8>
 800543c:	2600      	movs	r6, #0
 800543e:	4637      	mov	r7, r6
 8005440:	e7e1      	b.n	8005406 <_dtoa_r+0x956>
 8005442:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005444:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005448:	4637      	mov	r7, r6
 800544a:	e599      	b.n	8004f80 <_dtoa_r+0x4d0>
 800544c:	9b08      	ldr	r3, [sp, #32]
 800544e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80fd 	beq.w	8005652 <_dtoa_r+0xba2>
 8005458:	2d00      	cmp	r5, #0
 800545a:	dd05      	ble.n	8005468 <_dtoa_r+0x9b8>
 800545c:	4639      	mov	r1, r7
 800545e:	462a      	mov	r2, r5
 8005460:	4620      	mov	r0, r4
 8005462:	f000 fb3d 	bl	8005ae0 <__lshift>
 8005466:	4607      	mov	r7, r0
 8005468:	9b06      	ldr	r3, [sp, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d05c      	beq.n	8005528 <_dtoa_r+0xa78>
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4620      	mov	r0, r4
 8005472:	f000 f923 	bl	80056bc <_Balloc>
 8005476:	4605      	mov	r5, r0
 8005478:	b928      	cbnz	r0, 8005486 <_dtoa_r+0x9d6>
 800547a:	4b80      	ldr	r3, [pc, #512]	; (800567c <_dtoa_r+0xbcc>)
 800547c:	4602      	mov	r2, r0
 800547e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005482:	f7ff bb2e 	b.w	8004ae2 <_dtoa_r+0x32>
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	3202      	adds	r2, #2
 800548a:	0092      	lsls	r2, r2, #2
 800548c:	f107 010c 	add.w	r1, r7, #12
 8005490:	300c      	adds	r0, #12
 8005492:	f000 f905 	bl	80056a0 <memcpy>
 8005496:	2201      	movs	r2, #1
 8005498:	4629      	mov	r1, r5
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fb20 	bl	8005ae0 <__lshift>
 80054a0:	9b00      	ldr	r3, [sp, #0]
 80054a2:	3301      	adds	r3, #1
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	9b00      	ldr	r3, [sp, #0]
 80054a8:	444b      	add	r3, r9
 80054aa:	9307      	str	r3, [sp, #28]
 80054ac:	9b02      	ldr	r3, [sp, #8]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	46b8      	mov	r8, r7
 80054b4:	9306      	str	r3, [sp, #24]
 80054b6:	4607      	mov	r7, r0
 80054b8:	9b01      	ldr	r3, [sp, #4]
 80054ba:	4631      	mov	r1, r6
 80054bc:	3b01      	subs	r3, #1
 80054be:	4658      	mov	r0, fp
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	f7ff fa69 	bl	8004998 <quorem>
 80054c6:	4603      	mov	r3, r0
 80054c8:	3330      	adds	r3, #48	; 0x30
 80054ca:	9004      	str	r0, [sp, #16]
 80054cc:	4641      	mov	r1, r8
 80054ce:	4658      	mov	r0, fp
 80054d0:	9308      	str	r3, [sp, #32]
 80054d2:	f000 fb71 	bl	8005bb8 <__mcmp>
 80054d6:	463a      	mov	r2, r7
 80054d8:	4681      	mov	r9, r0
 80054da:	4631      	mov	r1, r6
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 fb87 	bl	8005bf0 <__mdiff>
 80054e2:	68c2      	ldr	r2, [r0, #12]
 80054e4:	9b08      	ldr	r3, [sp, #32]
 80054e6:	4605      	mov	r5, r0
 80054e8:	bb02      	cbnz	r2, 800552c <_dtoa_r+0xa7c>
 80054ea:	4601      	mov	r1, r0
 80054ec:	4658      	mov	r0, fp
 80054ee:	f000 fb63 	bl	8005bb8 <__mcmp>
 80054f2:	9b08      	ldr	r3, [sp, #32]
 80054f4:	4602      	mov	r2, r0
 80054f6:	4629      	mov	r1, r5
 80054f8:	4620      	mov	r0, r4
 80054fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80054fe:	f000 f91d 	bl	800573c <_Bfree>
 8005502:	9b05      	ldr	r3, [sp, #20]
 8005504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005506:	9d01      	ldr	r5, [sp, #4]
 8005508:	ea43 0102 	orr.w	r1, r3, r2
 800550c:	9b06      	ldr	r3, [sp, #24]
 800550e:	430b      	orrs	r3, r1
 8005510:	9b08      	ldr	r3, [sp, #32]
 8005512:	d10d      	bne.n	8005530 <_dtoa_r+0xa80>
 8005514:	2b39      	cmp	r3, #57	; 0x39
 8005516:	d029      	beq.n	800556c <_dtoa_r+0xabc>
 8005518:	f1b9 0f00 	cmp.w	r9, #0
 800551c:	dd01      	ble.n	8005522 <_dtoa_r+0xa72>
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	3331      	adds	r3, #49	; 0x31
 8005522:	9a02      	ldr	r2, [sp, #8]
 8005524:	7013      	strb	r3, [r2, #0]
 8005526:	e774      	b.n	8005412 <_dtoa_r+0x962>
 8005528:	4638      	mov	r0, r7
 800552a:	e7b9      	b.n	80054a0 <_dtoa_r+0x9f0>
 800552c:	2201      	movs	r2, #1
 800552e:	e7e2      	b.n	80054f6 <_dtoa_r+0xa46>
 8005530:	f1b9 0f00 	cmp.w	r9, #0
 8005534:	db06      	blt.n	8005544 <_dtoa_r+0xa94>
 8005536:	9905      	ldr	r1, [sp, #20]
 8005538:	ea41 0909 	orr.w	r9, r1, r9
 800553c:	9906      	ldr	r1, [sp, #24]
 800553e:	ea59 0101 	orrs.w	r1, r9, r1
 8005542:	d120      	bne.n	8005586 <_dtoa_r+0xad6>
 8005544:	2a00      	cmp	r2, #0
 8005546:	ddec      	ble.n	8005522 <_dtoa_r+0xa72>
 8005548:	4659      	mov	r1, fp
 800554a:	2201      	movs	r2, #1
 800554c:	4620      	mov	r0, r4
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	f000 fac6 	bl	8005ae0 <__lshift>
 8005554:	4631      	mov	r1, r6
 8005556:	4683      	mov	fp, r0
 8005558:	f000 fb2e 	bl	8005bb8 <__mcmp>
 800555c:	2800      	cmp	r0, #0
 800555e:	9b01      	ldr	r3, [sp, #4]
 8005560:	dc02      	bgt.n	8005568 <_dtoa_r+0xab8>
 8005562:	d1de      	bne.n	8005522 <_dtoa_r+0xa72>
 8005564:	07da      	lsls	r2, r3, #31
 8005566:	d5dc      	bpl.n	8005522 <_dtoa_r+0xa72>
 8005568:	2b39      	cmp	r3, #57	; 0x39
 800556a:	d1d8      	bne.n	800551e <_dtoa_r+0xa6e>
 800556c:	9a02      	ldr	r2, [sp, #8]
 800556e:	2339      	movs	r3, #57	; 0x39
 8005570:	7013      	strb	r3, [r2, #0]
 8005572:	462b      	mov	r3, r5
 8005574:	461d      	mov	r5, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800557c:	2a39      	cmp	r2, #57	; 0x39
 800557e:	d050      	beq.n	8005622 <_dtoa_r+0xb72>
 8005580:	3201      	adds	r2, #1
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	e745      	b.n	8005412 <_dtoa_r+0x962>
 8005586:	2a00      	cmp	r2, #0
 8005588:	dd03      	ble.n	8005592 <_dtoa_r+0xae2>
 800558a:	2b39      	cmp	r3, #57	; 0x39
 800558c:	d0ee      	beq.n	800556c <_dtoa_r+0xabc>
 800558e:	3301      	adds	r3, #1
 8005590:	e7c7      	b.n	8005522 <_dtoa_r+0xa72>
 8005592:	9a01      	ldr	r2, [sp, #4]
 8005594:	9907      	ldr	r1, [sp, #28]
 8005596:	f802 3c01 	strb.w	r3, [r2, #-1]
 800559a:	428a      	cmp	r2, r1
 800559c:	d02a      	beq.n	80055f4 <_dtoa_r+0xb44>
 800559e:	4659      	mov	r1, fp
 80055a0:	2300      	movs	r3, #0
 80055a2:	220a      	movs	r2, #10
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 f8eb 	bl	8005780 <__multadd>
 80055aa:	45b8      	cmp	r8, r7
 80055ac:	4683      	mov	fp, r0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	f04f 020a 	mov.w	r2, #10
 80055b6:	4641      	mov	r1, r8
 80055b8:	4620      	mov	r0, r4
 80055ba:	d107      	bne.n	80055cc <_dtoa_r+0xb1c>
 80055bc:	f000 f8e0 	bl	8005780 <__multadd>
 80055c0:	4680      	mov	r8, r0
 80055c2:	4607      	mov	r7, r0
 80055c4:	9b01      	ldr	r3, [sp, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	e775      	b.n	80054b8 <_dtoa_r+0xa08>
 80055cc:	f000 f8d8 	bl	8005780 <__multadd>
 80055d0:	4639      	mov	r1, r7
 80055d2:	4680      	mov	r8, r0
 80055d4:	2300      	movs	r3, #0
 80055d6:	220a      	movs	r2, #10
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f8d1 	bl	8005780 <__multadd>
 80055de:	4607      	mov	r7, r0
 80055e0:	e7f0      	b.n	80055c4 <_dtoa_r+0xb14>
 80055e2:	f1b9 0f00 	cmp.w	r9, #0
 80055e6:	9a00      	ldr	r2, [sp, #0]
 80055e8:	bfcc      	ite	gt
 80055ea:	464d      	movgt	r5, r9
 80055ec:	2501      	movle	r5, #1
 80055ee:	4415      	add	r5, r2
 80055f0:	f04f 0800 	mov.w	r8, #0
 80055f4:	4659      	mov	r1, fp
 80055f6:	2201      	movs	r2, #1
 80055f8:	4620      	mov	r0, r4
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	f000 fa70 	bl	8005ae0 <__lshift>
 8005600:	4631      	mov	r1, r6
 8005602:	4683      	mov	fp, r0
 8005604:	f000 fad8 	bl	8005bb8 <__mcmp>
 8005608:	2800      	cmp	r0, #0
 800560a:	dcb2      	bgt.n	8005572 <_dtoa_r+0xac2>
 800560c:	d102      	bne.n	8005614 <_dtoa_r+0xb64>
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	07db      	lsls	r3, r3, #31
 8005612:	d4ae      	bmi.n	8005572 <_dtoa_r+0xac2>
 8005614:	462b      	mov	r3, r5
 8005616:	461d      	mov	r5, r3
 8005618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800561c:	2a30      	cmp	r2, #48	; 0x30
 800561e:	d0fa      	beq.n	8005616 <_dtoa_r+0xb66>
 8005620:	e6f7      	b.n	8005412 <_dtoa_r+0x962>
 8005622:	9a00      	ldr	r2, [sp, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d1a5      	bne.n	8005574 <_dtoa_r+0xac4>
 8005628:	f10a 0a01 	add.w	sl, sl, #1
 800562c:	2331      	movs	r3, #49	; 0x31
 800562e:	e779      	b.n	8005524 <_dtoa_r+0xa74>
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <_dtoa_r+0xbd0>)
 8005632:	f7ff baaf 	b.w	8004b94 <_dtoa_r+0xe4>
 8005636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005638:	2b00      	cmp	r3, #0
 800563a:	f47f aa86 	bne.w	8004b4a <_dtoa_r+0x9a>
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <_dtoa_r+0xbd4>)
 8005640:	f7ff baa8 	b.w	8004b94 <_dtoa_r+0xe4>
 8005644:	f1b9 0f00 	cmp.w	r9, #0
 8005648:	dc03      	bgt.n	8005652 <_dtoa_r+0xba2>
 800564a:	9b05      	ldr	r3, [sp, #20]
 800564c:	2b02      	cmp	r3, #2
 800564e:	f73f aec9 	bgt.w	80053e4 <_dtoa_r+0x934>
 8005652:	9d00      	ldr	r5, [sp, #0]
 8005654:	4631      	mov	r1, r6
 8005656:	4658      	mov	r0, fp
 8005658:	f7ff f99e 	bl	8004998 <quorem>
 800565c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005660:	f805 3b01 	strb.w	r3, [r5], #1
 8005664:	9a00      	ldr	r2, [sp, #0]
 8005666:	1aaa      	subs	r2, r5, r2
 8005668:	4591      	cmp	r9, r2
 800566a:	ddba      	ble.n	80055e2 <_dtoa_r+0xb32>
 800566c:	4659      	mov	r1, fp
 800566e:	2300      	movs	r3, #0
 8005670:	220a      	movs	r2, #10
 8005672:	4620      	mov	r0, r4
 8005674:	f000 f884 	bl	8005780 <__multadd>
 8005678:	4683      	mov	fp, r0
 800567a:	e7eb      	b.n	8005654 <_dtoa_r+0xba4>
 800567c:	08006be3 	.word	0x08006be3
 8005680:	08006b3c 	.word	0x08006b3c
 8005684:	08006b60 	.word	0x08006b60

08005688 <_localeconv_r>:
 8005688:	4800      	ldr	r0, [pc, #0]	; (800568c <_localeconv_r+0x4>)
 800568a:	4770      	bx	lr
 800568c:	20000278 	.word	0x20000278

08005690 <malloc>:
 8005690:	4b02      	ldr	r3, [pc, #8]	; (800569c <malloc+0xc>)
 8005692:	4601      	mov	r1, r0
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	f000 bbef 	b.w	8005e78 <_malloc_r>
 800569a:	bf00      	nop
 800569c:	20000124 	.word	0x20000124

080056a0 <memcpy>:
 80056a0:	440a      	add	r2, r1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a8:	d100      	bne.n	80056ac <memcpy+0xc>
 80056aa:	4770      	bx	lr
 80056ac:	b510      	push	{r4, lr}
 80056ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b6:	4291      	cmp	r1, r2
 80056b8:	d1f9      	bne.n	80056ae <memcpy+0xe>
 80056ba:	bd10      	pop	{r4, pc}

080056bc <_Balloc>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056c0:	4604      	mov	r4, r0
 80056c2:	460d      	mov	r5, r1
 80056c4:	b976      	cbnz	r6, 80056e4 <_Balloc+0x28>
 80056c6:	2010      	movs	r0, #16
 80056c8:	f7ff ffe2 	bl	8005690 <malloc>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6260      	str	r0, [r4, #36]	; 0x24
 80056d0:	b920      	cbnz	r0, 80056dc <_Balloc+0x20>
 80056d2:	4b18      	ldr	r3, [pc, #96]	; (8005734 <_Balloc+0x78>)
 80056d4:	4818      	ldr	r0, [pc, #96]	; (8005738 <_Balloc+0x7c>)
 80056d6:	2166      	movs	r1, #102	; 0x66
 80056d8:	f000 fc38 	bl	8005f4c <__assert_func>
 80056dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056e0:	6006      	str	r6, [r0, #0]
 80056e2:	60c6      	str	r6, [r0, #12]
 80056e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056e6:	68f3      	ldr	r3, [r6, #12]
 80056e8:	b183      	cbz	r3, 800570c <_Balloc+0x50>
 80056ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056f2:	b9b8      	cbnz	r0, 8005724 <_Balloc+0x68>
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f605 	lsl.w	r6, r1, r5
 80056fa:	1d72      	adds	r2, r6, #5
 80056fc:	0092      	lsls	r2, r2, #2
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 fb5a 	bl	8005db8 <_calloc_r>
 8005704:	b160      	cbz	r0, 8005720 <_Balloc+0x64>
 8005706:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800570a:	e00e      	b.n	800572a <_Balloc+0x6e>
 800570c:	2221      	movs	r2, #33	; 0x21
 800570e:	2104      	movs	r1, #4
 8005710:	4620      	mov	r0, r4
 8005712:	f000 fb51 	bl	8005db8 <_calloc_r>
 8005716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005718:	60f0      	str	r0, [r6, #12]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e4      	bne.n	80056ea <_Balloc+0x2e>
 8005720:	2000      	movs	r0, #0
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	6802      	ldr	r2, [r0, #0]
 8005726:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800572a:	2300      	movs	r3, #0
 800572c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005730:	e7f7      	b.n	8005722 <_Balloc+0x66>
 8005732:	bf00      	nop
 8005734:	08006b6d 	.word	0x08006b6d
 8005738:	08006bf4 	.word	0x08006bf4

0800573c <_Bfree>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005740:	4605      	mov	r5, r0
 8005742:	460c      	mov	r4, r1
 8005744:	b976      	cbnz	r6, 8005764 <_Bfree+0x28>
 8005746:	2010      	movs	r0, #16
 8005748:	f7ff ffa2 	bl	8005690 <malloc>
 800574c:	4602      	mov	r2, r0
 800574e:	6268      	str	r0, [r5, #36]	; 0x24
 8005750:	b920      	cbnz	r0, 800575c <_Bfree+0x20>
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <_Bfree+0x3c>)
 8005754:	4809      	ldr	r0, [pc, #36]	; (800577c <_Bfree+0x40>)
 8005756:	218a      	movs	r1, #138	; 0x8a
 8005758:	f000 fbf8 	bl	8005f4c <__assert_func>
 800575c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005760:	6006      	str	r6, [r0, #0]
 8005762:	60c6      	str	r6, [r0, #12]
 8005764:	b13c      	cbz	r4, 8005776 <_Bfree+0x3a>
 8005766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005768:	6862      	ldr	r2, [r4, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005770:	6021      	str	r1, [r4, #0]
 8005772:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	08006b6d 	.word	0x08006b6d
 800577c:	08006bf4 	.word	0x08006bf4

08005780 <__multadd>:
 8005780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005784:	690e      	ldr	r6, [r1, #16]
 8005786:	4607      	mov	r7, r0
 8005788:	4698      	mov	r8, r3
 800578a:	460c      	mov	r4, r1
 800578c:	f101 0014 	add.w	r0, r1, #20
 8005790:	2300      	movs	r3, #0
 8005792:	6805      	ldr	r5, [r0, #0]
 8005794:	b2a9      	uxth	r1, r5
 8005796:	fb02 8101 	mla	r1, r2, r1, r8
 800579a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800579e:	0c2d      	lsrs	r5, r5, #16
 80057a0:	fb02 c505 	mla	r5, r2, r5, ip
 80057a4:	b289      	uxth	r1, r1
 80057a6:	3301      	adds	r3, #1
 80057a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80057ac:	429e      	cmp	r6, r3
 80057ae:	f840 1b04 	str.w	r1, [r0], #4
 80057b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80057b6:	dcec      	bgt.n	8005792 <__multadd+0x12>
 80057b8:	f1b8 0f00 	cmp.w	r8, #0
 80057bc:	d022      	beq.n	8005804 <__multadd+0x84>
 80057be:	68a3      	ldr	r3, [r4, #8]
 80057c0:	42b3      	cmp	r3, r6
 80057c2:	dc19      	bgt.n	80057f8 <__multadd+0x78>
 80057c4:	6861      	ldr	r1, [r4, #4]
 80057c6:	4638      	mov	r0, r7
 80057c8:	3101      	adds	r1, #1
 80057ca:	f7ff ff77 	bl	80056bc <_Balloc>
 80057ce:	4605      	mov	r5, r0
 80057d0:	b928      	cbnz	r0, 80057de <__multadd+0x5e>
 80057d2:	4602      	mov	r2, r0
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <__multadd+0x8c>)
 80057d6:	480e      	ldr	r0, [pc, #56]	; (8005810 <__multadd+0x90>)
 80057d8:	21b5      	movs	r1, #181	; 0xb5
 80057da:	f000 fbb7 	bl	8005f4c <__assert_func>
 80057de:	6922      	ldr	r2, [r4, #16]
 80057e0:	3202      	adds	r2, #2
 80057e2:	f104 010c 	add.w	r1, r4, #12
 80057e6:	0092      	lsls	r2, r2, #2
 80057e8:	300c      	adds	r0, #12
 80057ea:	f7ff ff59 	bl	80056a0 <memcpy>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4638      	mov	r0, r7
 80057f2:	f7ff ffa3 	bl	800573c <_Bfree>
 80057f6:	462c      	mov	r4, r5
 80057f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80057fc:	3601      	adds	r6, #1
 80057fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8005802:	6126      	str	r6, [r4, #16]
 8005804:	4620      	mov	r0, r4
 8005806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580a:	bf00      	nop
 800580c:	08006be3 	.word	0x08006be3
 8005810:	08006bf4 	.word	0x08006bf4

08005814 <__hi0bits>:
 8005814:	0c03      	lsrs	r3, r0, #16
 8005816:	041b      	lsls	r3, r3, #16
 8005818:	b9d3      	cbnz	r3, 8005850 <__hi0bits+0x3c>
 800581a:	0400      	lsls	r0, r0, #16
 800581c:	2310      	movs	r3, #16
 800581e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005822:	bf04      	itt	eq
 8005824:	0200      	lsleq	r0, r0, #8
 8005826:	3308      	addeq	r3, #8
 8005828:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800582c:	bf04      	itt	eq
 800582e:	0100      	lsleq	r0, r0, #4
 8005830:	3304      	addeq	r3, #4
 8005832:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005836:	bf04      	itt	eq
 8005838:	0080      	lsleq	r0, r0, #2
 800583a:	3302      	addeq	r3, #2
 800583c:	2800      	cmp	r0, #0
 800583e:	db05      	blt.n	800584c <__hi0bits+0x38>
 8005840:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005844:	f103 0301 	add.w	r3, r3, #1
 8005848:	bf08      	it	eq
 800584a:	2320      	moveq	r3, #32
 800584c:	4618      	mov	r0, r3
 800584e:	4770      	bx	lr
 8005850:	2300      	movs	r3, #0
 8005852:	e7e4      	b.n	800581e <__hi0bits+0xa>

08005854 <__lo0bits>:
 8005854:	6803      	ldr	r3, [r0, #0]
 8005856:	f013 0207 	ands.w	r2, r3, #7
 800585a:	4601      	mov	r1, r0
 800585c:	d00b      	beq.n	8005876 <__lo0bits+0x22>
 800585e:	07da      	lsls	r2, r3, #31
 8005860:	d424      	bmi.n	80058ac <__lo0bits+0x58>
 8005862:	0798      	lsls	r0, r3, #30
 8005864:	bf49      	itett	mi
 8005866:	085b      	lsrmi	r3, r3, #1
 8005868:	089b      	lsrpl	r3, r3, #2
 800586a:	2001      	movmi	r0, #1
 800586c:	600b      	strmi	r3, [r1, #0]
 800586e:	bf5c      	itt	pl
 8005870:	600b      	strpl	r3, [r1, #0]
 8005872:	2002      	movpl	r0, #2
 8005874:	4770      	bx	lr
 8005876:	b298      	uxth	r0, r3
 8005878:	b9b0      	cbnz	r0, 80058a8 <__lo0bits+0x54>
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	2010      	movs	r0, #16
 800587e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005882:	bf04      	itt	eq
 8005884:	0a1b      	lsreq	r3, r3, #8
 8005886:	3008      	addeq	r0, #8
 8005888:	071a      	lsls	r2, r3, #28
 800588a:	bf04      	itt	eq
 800588c:	091b      	lsreq	r3, r3, #4
 800588e:	3004      	addeq	r0, #4
 8005890:	079a      	lsls	r2, r3, #30
 8005892:	bf04      	itt	eq
 8005894:	089b      	lsreq	r3, r3, #2
 8005896:	3002      	addeq	r0, #2
 8005898:	07da      	lsls	r2, r3, #31
 800589a:	d403      	bmi.n	80058a4 <__lo0bits+0x50>
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	f100 0001 	add.w	r0, r0, #1
 80058a2:	d005      	beq.n	80058b0 <__lo0bits+0x5c>
 80058a4:	600b      	str	r3, [r1, #0]
 80058a6:	4770      	bx	lr
 80058a8:	4610      	mov	r0, r2
 80058aa:	e7e8      	b.n	800587e <__lo0bits+0x2a>
 80058ac:	2000      	movs	r0, #0
 80058ae:	4770      	bx	lr
 80058b0:	2020      	movs	r0, #32
 80058b2:	4770      	bx	lr

080058b4 <__i2b>:
 80058b4:	b510      	push	{r4, lr}
 80058b6:	460c      	mov	r4, r1
 80058b8:	2101      	movs	r1, #1
 80058ba:	f7ff feff 	bl	80056bc <_Balloc>
 80058be:	4602      	mov	r2, r0
 80058c0:	b928      	cbnz	r0, 80058ce <__i2b+0x1a>
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <__i2b+0x24>)
 80058c4:	4805      	ldr	r0, [pc, #20]	; (80058dc <__i2b+0x28>)
 80058c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058ca:	f000 fb3f 	bl	8005f4c <__assert_func>
 80058ce:	2301      	movs	r3, #1
 80058d0:	6144      	str	r4, [r0, #20]
 80058d2:	6103      	str	r3, [r0, #16]
 80058d4:	bd10      	pop	{r4, pc}
 80058d6:	bf00      	nop
 80058d8:	08006be3 	.word	0x08006be3
 80058dc:	08006bf4 	.word	0x08006bf4

080058e0 <__multiply>:
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	4614      	mov	r4, r2
 80058e6:	690a      	ldr	r2, [r1, #16]
 80058e8:	6923      	ldr	r3, [r4, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	bfb8      	it	lt
 80058ee:	460b      	movlt	r3, r1
 80058f0:	460d      	mov	r5, r1
 80058f2:	bfbc      	itt	lt
 80058f4:	4625      	movlt	r5, r4
 80058f6:	461c      	movlt	r4, r3
 80058f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80058fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005900:	68ab      	ldr	r3, [r5, #8]
 8005902:	6869      	ldr	r1, [r5, #4]
 8005904:	eb0a 0709 	add.w	r7, sl, r9
 8005908:	42bb      	cmp	r3, r7
 800590a:	b085      	sub	sp, #20
 800590c:	bfb8      	it	lt
 800590e:	3101      	addlt	r1, #1
 8005910:	f7ff fed4 	bl	80056bc <_Balloc>
 8005914:	b930      	cbnz	r0, 8005924 <__multiply+0x44>
 8005916:	4602      	mov	r2, r0
 8005918:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <__multiply+0x144>)
 800591a:	4843      	ldr	r0, [pc, #268]	; (8005a28 <__multiply+0x148>)
 800591c:	f240 115d 	movw	r1, #349	; 0x15d
 8005920:	f000 fb14 	bl	8005f4c <__assert_func>
 8005924:	f100 0614 	add.w	r6, r0, #20
 8005928:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800592c:	4633      	mov	r3, r6
 800592e:	2200      	movs	r2, #0
 8005930:	4543      	cmp	r3, r8
 8005932:	d31e      	bcc.n	8005972 <__multiply+0x92>
 8005934:	f105 0c14 	add.w	ip, r5, #20
 8005938:	f104 0314 	add.w	r3, r4, #20
 800593c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005940:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005944:	9202      	str	r2, [sp, #8]
 8005946:	ebac 0205 	sub.w	r2, ip, r5
 800594a:	3a15      	subs	r2, #21
 800594c:	f022 0203 	bic.w	r2, r2, #3
 8005950:	3204      	adds	r2, #4
 8005952:	f105 0115 	add.w	r1, r5, #21
 8005956:	458c      	cmp	ip, r1
 8005958:	bf38      	it	cc
 800595a:	2204      	movcc	r2, #4
 800595c:	9201      	str	r2, [sp, #4]
 800595e:	9a02      	ldr	r2, [sp, #8]
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	429a      	cmp	r2, r3
 8005964:	d808      	bhi.n	8005978 <__multiply+0x98>
 8005966:	2f00      	cmp	r7, #0
 8005968:	dc55      	bgt.n	8005a16 <__multiply+0x136>
 800596a:	6107      	str	r7, [r0, #16]
 800596c:	b005      	add	sp, #20
 800596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005972:	f843 2b04 	str.w	r2, [r3], #4
 8005976:	e7db      	b.n	8005930 <__multiply+0x50>
 8005978:	f8b3 a000 	ldrh.w	sl, [r3]
 800597c:	f1ba 0f00 	cmp.w	sl, #0
 8005980:	d020      	beq.n	80059c4 <__multiply+0xe4>
 8005982:	f105 0e14 	add.w	lr, r5, #20
 8005986:	46b1      	mov	r9, r6
 8005988:	2200      	movs	r2, #0
 800598a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800598e:	f8d9 b000 	ldr.w	fp, [r9]
 8005992:	b2a1      	uxth	r1, r4
 8005994:	fa1f fb8b 	uxth.w	fp, fp
 8005998:	fb0a b101 	mla	r1, sl, r1, fp
 800599c:	4411      	add	r1, r2
 800599e:	f8d9 2000 	ldr.w	r2, [r9]
 80059a2:	0c24      	lsrs	r4, r4, #16
 80059a4:	0c12      	lsrs	r2, r2, #16
 80059a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80059aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80059ae:	b289      	uxth	r1, r1
 80059b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80059b4:	45f4      	cmp	ip, lr
 80059b6:	f849 1b04 	str.w	r1, [r9], #4
 80059ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80059be:	d8e4      	bhi.n	800598a <__multiply+0xaa>
 80059c0:	9901      	ldr	r1, [sp, #4]
 80059c2:	5072      	str	r2, [r6, r1]
 80059c4:	9a03      	ldr	r2, [sp, #12]
 80059c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059ca:	3304      	adds	r3, #4
 80059cc:	f1b9 0f00 	cmp.w	r9, #0
 80059d0:	d01f      	beq.n	8005a12 <__multiply+0x132>
 80059d2:	6834      	ldr	r4, [r6, #0]
 80059d4:	f105 0114 	add.w	r1, r5, #20
 80059d8:	46b6      	mov	lr, r6
 80059da:	f04f 0a00 	mov.w	sl, #0
 80059de:	880a      	ldrh	r2, [r1, #0]
 80059e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80059e4:	fb09 b202 	mla	r2, r9, r2, fp
 80059e8:	4492      	add	sl, r2
 80059ea:	b2a4      	uxth	r4, r4
 80059ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80059f0:	f84e 4b04 	str.w	r4, [lr], #4
 80059f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80059f8:	f8be 2000 	ldrh.w	r2, [lr]
 80059fc:	0c24      	lsrs	r4, r4, #16
 80059fe:	fb09 2404 	mla	r4, r9, r4, r2
 8005a02:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005a06:	458c      	cmp	ip, r1
 8005a08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a0c:	d8e7      	bhi.n	80059de <__multiply+0xfe>
 8005a0e:	9a01      	ldr	r2, [sp, #4]
 8005a10:	50b4      	str	r4, [r6, r2]
 8005a12:	3604      	adds	r6, #4
 8005a14:	e7a3      	b.n	800595e <__multiply+0x7e>
 8005a16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1a5      	bne.n	800596a <__multiply+0x8a>
 8005a1e:	3f01      	subs	r7, #1
 8005a20:	e7a1      	b.n	8005966 <__multiply+0x86>
 8005a22:	bf00      	nop
 8005a24:	08006be3 	.word	0x08006be3
 8005a28:	08006bf4 	.word	0x08006bf4

08005a2c <__pow5mult>:
 8005a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a30:	4615      	mov	r5, r2
 8005a32:	f012 0203 	ands.w	r2, r2, #3
 8005a36:	4606      	mov	r6, r0
 8005a38:	460f      	mov	r7, r1
 8005a3a:	d007      	beq.n	8005a4c <__pow5mult+0x20>
 8005a3c:	4c25      	ldr	r4, [pc, #148]	; (8005ad4 <__pow5mult+0xa8>)
 8005a3e:	3a01      	subs	r2, #1
 8005a40:	2300      	movs	r3, #0
 8005a42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a46:	f7ff fe9b 	bl	8005780 <__multadd>
 8005a4a:	4607      	mov	r7, r0
 8005a4c:	10ad      	asrs	r5, r5, #2
 8005a4e:	d03d      	beq.n	8005acc <__pow5mult+0xa0>
 8005a50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a52:	b97c      	cbnz	r4, 8005a74 <__pow5mult+0x48>
 8005a54:	2010      	movs	r0, #16
 8005a56:	f7ff fe1b 	bl	8005690 <malloc>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6270      	str	r0, [r6, #36]	; 0x24
 8005a5e:	b928      	cbnz	r0, 8005a6c <__pow5mult+0x40>
 8005a60:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <__pow5mult+0xac>)
 8005a62:	481e      	ldr	r0, [pc, #120]	; (8005adc <__pow5mult+0xb0>)
 8005a64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a68:	f000 fa70 	bl	8005f4c <__assert_func>
 8005a6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a70:	6004      	str	r4, [r0, #0]
 8005a72:	60c4      	str	r4, [r0, #12]
 8005a74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a7c:	b94c      	cbnz	r4, 8005a92 <__pow5mult+0x66>
 8005a7e:	f240 2171 	movw	r1, #625	; 0x271
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7ff ff16 	bl	80058b4 <__i2b>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a8e:	4604      	mov	r4, r0
 8005a90:	6003      	str	r3, [r0, #0]
 8005a92:	f04f 0900 	mov.w	r9, #0
 8005a96:	07eb      	lsls	r3, r5, #31
 8005a98:	d50a      	bpl.n	8005ab0 <__pow5mult+0x84>
 8005a9a:	4639      	mov	r1, r7
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f7ff ff1e 	bl	80058e0 <__multiply>
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff fe47 	bl	800573c <_Bfree>
 8005aae:	4647      	mov	r7, r8
 8005ab0:	106d      	asrs	r5, r5, #1
 8005ab2:	d00b      	beq.n	8005acc <__pow5mult+0xa0>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	b938      	cbnz	r0, 8005ac8 <__pow5mult+0x9c>
 8005ab8:	4622      	mov	r2, r4
 8005aba:	4621      	mov	r1, r4
 8005abc:	4630      	mov	r0, r6
 8005abe:	f7ff ff0f 	bl	80058e0 <__multiply>
 8005ac2:	6020      	str	r0, [r4, #0]
 8005ac4:	f8c0 9000 	str.w	r9, [r0]
 8005ac8:	4604      	mov	r4, r0
 8005aca:	e7e4      	b.n	8005a96 <__pow5mult+0x6a>
 8005acc:	4638      	mov	r0, r7
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad2:	bf00      	nop
 8005ad4:	08006d48 	.word	0x08006d48
 8005ad8:	08006b6d 	.word	0x08006b6d
 8005adc:	08006bf4 	.word	0x08006bf4

08005ae0 <__lshift>:
 8005ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	6849      	ldr	r1, [r1, #4]
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005aee:	68a3      	ldr	r3, [r4, #8]
 8005af0:	4607      	mov	r7, r0
 8005af2:	4691      	mov	r9, r2
 8005af4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005af8:	f108 0601 	add.w	r6, r8, #1
 8005afc:	42b3      	cmp	r3, r6
 8005afe:	db0b      	blt.n	8005b18 <__lshift+0x38>
 8005b00:	4638      	mov	r0, r7
 8005b02:	f7ff fddb 	bl	80056bc <_Balloc>
 8005b06:	4605      	mov	r5, r0
 8005b08:	b948      	cbnz	r0, 8005b1e <__lshift+0x3e>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	4b28      	ldr	r3, [pc, #160]	; (8005bb0 <__lshift+0xd0>)
 8005b0e:	4829      	ldr	r0, [pc, #164]	; (8005bb4 <__lshift+0xd4>)
 8005b10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b14:	f000 fa1a 	bl	8005f4c <__assert_func>
 8005b18:	3101      	adds	r1, #1
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	e7ee      	b.n	8005afc <__lshift+0x1c>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f100 0114 	add.w	r1, r0, #20
 8005b24:	f100 0210 	add.w	r2, r0, #16
 8005b28:	4618      	mov	r0, r3
 8005b2a:	4553      	cmp	r3, sl
 8005b2c:	db33      	blt.n	8005b96 <__lshift+0xb6>
 8005b2e:	6920      	ldr	r0, [r4, #16]
 8005b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b34:	f104 0314 	add.w	r3, r4, #20
 8005b38:	f019 091f 	ands.w	r9, r9, #31
 8005b3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b44:	d02b      	beq.n	8005b9e <__lshift+0xbe>
 8005b46:	f1c9 0e20 	rsb	lr, r9, #32
 8005b4a:	468a      	mov	sl, r1
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	fa00 f009 	lsl.w	r0, r0, r9
 8005b54:	4302      	orrs	r2, r0
 8005b56:	f84a 2b04 	str.w	r2, [sl], #4
 8005b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b5e:	459c      	cmp	ip, r3
 8005b60:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b64:	d8f3      	bhi.n	8005b4e <__lshift+0x6e>
 8005b66:	ebac 0304 	sub.w	r3, ip, r4
 8005b6a:	3b15      	subs	r3, #21
 8005b6c:	f023 0303 	bic.w	r3, r3, #3
 8005b70:	3304      	adds	r3, #4
 8005b72:	f104 0015 	add.w	r0, r4, #21
 8005b76:	4584      	cmp	ip, r0
 8005b78:	bf38      	it	cc
 8005b7a:	2304      	movcc	r3, #4
 8005b7c:	50ca      	str	r2, [r1, r3]
 8005b7e:	b10a      	cbz	r2, 8005b84 <__lshift+0xa4>
 8005b80:	f108 0602 	add.w	r6, r8, #2
 8005b84:	3e01      	subs	r6, #1
 8005b86:	4638      	mov	r0, r7
 8005b88:	612e      	str	r6, [r5, #16]
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	f7ff fdd6 	bl	800573c <_Bfree>
 8005b90:	4628      	mov	r0, r5
 8005b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b96:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	e7c5      	b.n	8005b2a <__lshift+0x4a>
 8005b9e:	3904      	subs	r1, #4
 8005ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ba8:	459c      	cmp	ip, r3
 8005baa:	d8f9      	bhi.n	8005ba0 <__lshift+0xc0>
 8005bac:	e7ea      	b.n	8005b84 <__lshift+0xa4>
 8005bae:	bf00      	nop
 8005bb0:	08006be3 	.word	0x08006be3
 8005bb4:	08006bf4 	.word	0x08006bf4

08005bb8 <__mcmp>:
 8005bb8:	b530      	push	{r4, r5, lr}
 8005bba:	6902      	ldr	r2, [r0, #16]
 8005bbc:	690c      	ldr	r4, [r1, #16]
 8005bbe:	1b12      	subs	r2, r2, r4
 8005bc0:	d10e      	bne.n	8005be0 <__mcmp+0x28>
 8005bc2:	f100 0314 	add.w	r3, r0, #20
 8005bc6:	3114      	adds	r1, #20
 8005bc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005bcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005bd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005bd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005bd8:	42a5      	cmp	r5, r4
 8005bda:	d003      	beq.n	8005be4 <__mcmp+0x2c>
 8005bdc:	d305      	bcc.n	8005bea <__mcmp+0x32>
 8005bde:	2201      	movs	r2, #1
 8005be0:	4610      	mov	r0, r2
 8005be2:	bd30      	pop	{r4, r5, pc}
 8005be4:	4283      	cmp	r3, r0
 8005be6:	d3f3      	bcc.n	8005bd0 <__mcmp+0x18>
 8005be8:	e7fa      	b.n	8005be0 <__mcmp+0x28>
 8005bea:	f04f 32ff 	mov.w	r2, #4294967295
 8005bee:	e7f7      	b.n	8005be0 <__mcmp+0x28>

08005bf0 <__mdiff>:
 8005bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	4617      	mov	r7, r2
 8005bfe:	f7ff ffdb 	bl	8005bb8 <__mcmp>
 8005c02:	1e05      	subs	r5, r0, #0
 8005c04:	d110      	bne.n	8005c28 <__mdiff+0x38>
 8005c06:	4629      	mov	r1, r5
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff fd57 	bl	80056bc <_Balloc>
 8005c0e:	b930      	cbnz	r0, 8005c1e <__mdiff+0x2e>
 8005c10:	4b39      	ldr	r3, [pc, #228]	; (8005cf8 <__mdiff+0x108>)
 8005c12:	4602      	mov	r2, r0
 8005c14:	f240 2132 	movw	r1, #562	; 0x232
 8005c18:	4838      	ldr	r0, [pc, #224]	; (8005cfc <__mdiff+0x10c>)
 8005c1a:	f000 f997 	bl	8005f4c <__assert_func>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c28:	bfa4      	itt	ge
 8005c2a:	463b      	movge	r3, r7
 8005c2c:	4627      	movge	r7, r4
 8005c2e:	4630      	mov	r0, r6
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	bfa6      	itte	ge
 8005c34:	461c      	movge	r4, r3
 8005c36:	2500      	movge	r5, #0
 8005c38:	2501      	movlt	r5, #1
 8005c3a:	f7ff fd3f 	bl	80056bc <_Balloc>
 8005c3e:	b920      	cbnz	r0, 8005c4a <__mdiff+0x5a>
 8005c40:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <__mdiff+0x108>)
 8005c42:	4602      	mov	r2, r0
 8005c44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c48:	e7e6      	b.n	8005c18 <__mdiff+0x28>
 8005c4a:	693e      	ldr	r6, [r7, #16]
 8005c4c:	60c5      	str	r5, [r0, #12]
 8005c4e:	6925      	ldr	r5, [r4, #16]
 8005c50:	f107 0114 	add.w	r1, r7, #20
 8005c54:	f104 0914 	add.w	r9, r4, #20
 8005c58:	f100 0e14 	add.w	lr, r0, #20
 8005c5c:	f107 0210 	add.w	r2, r7, #16
 8005c60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005c64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005c68:	46f2      	mov	sl, lr
 8005c6a:	2700      	movs	r7, #0
 8005c6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c74:	fa1f f883 	uxth.w	r8, r3
 8005c78:	fa17 f78b 	uxtah	r7, r7, fp
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	eba7 0808 	sub.w	r8, r7, r8
 8005c82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c8a:	fa1f f888 	uxth.w	r8, r8
 8005c8e:	141f      	asrs	r7, r3, #16
 8005c90:	454d      	cmp	r5, r9
 8005c92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c96:	f84a 3b04 	str.w	r3, [sl], #4
 8005c9a:	d8e7      	bhi.n	8005c6c <__mdiff+0x7c>
 8005c9c:	1b2b      	subs	r3, r5, r4
 8005c9e:	3b15      	subs	r3, #21
 8005ca0:	f023 0303 	bic.w	r3, r3, #3
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	3415      	adds	r4, #21
 8005ca8:	42a5      	cmp	r5, r4
 8005caa:	bf38      	it	cc
 8005cac:	2304      	movcc	r3, #4
 8005cae:	4419      	add	r1, r3
 8005cb0:	4473      	add	r3, lr
 8005cb2:	469e      	mov	lr, r3
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	4565      	cmp	r5, ip
 8005cb8:	d30e      	bcc.n	8005cd8 <__mdiff+0xe8>
 8005cba:	f10c 0203 	add.w	r2, ip, #3
 8005cbe:	1a52      	subs	r2, r2, r1
 8005cc0:	f022 0203 	bic.w	r2, r2, #3
 8005cc4:	3903      	subs	r1, #3
 8005cc6:	458c      	cmp	ip, r1
 8005cc8:	bf38      	it	cc
 8005cca:	2200      	movcc	r2, #0
 8005ccc:	441a      	add	r2, r3
 8005cce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005cd2:	b17b      	cbz	r3, 8005cf4 <__mdiff+0x104>
 8005cd4:	6106      	str	r6, [r0, #16]
 8005cd6:	e7a5      	b.n	8005c24 <__mdiff+0x34>
 8005cd8:	f855 8b04 	ldr.w	r8, [r5], #4
 8005cdc:	fa17 f488 	uxtah	r4, r7, r8
 8005ce0:	1422      	asrs	r2, r4, #16
 8005ce2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005ce6:	b2a4      	uxth	r4, r4
 8005ce8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005cec:	f84e 4b04 	str.w	r4, [lr], #4
 8005cf0:	1417      	asrs	r7, r2, #16
 8005cf2:	e7e0      	b.n	8005cb6 <__mdiff+0xc6>
 8005cf4:	3e01      	subs	r6, #1
 8005cf6:	e7ea      	b.n	8005cce <__mdiff+0xde>
 8005cf8:	08006be3 	.word	0x08006be3
 8005cfc:	08006bf4 	.word	0x08006bf4

08005d00 <__d2b>:
 8005d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d04:	4689      	mov	r9, r1
 8005d06:	2101      	movs	r1, #1
 8005d08:	ec57 6b10 	vmov	r6, r7, d0
 8005d0c:	4690      	mov	r8, r2
 8005d0e:	f7ff fcd5 	bl	80056bc <_Balloc>
 8005d12:	4604      	mov	r4, r0
 8005d14:	b930      	cbnz	r0, 8005d24 <__d2b+0x24>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <__d2b+0xb0>)
 8005d1a:	4826      	ldr	r0, [pc, #152]	; (8005db4 <__d2b+0xb4>)
 8005d1c:	f240 310a 	movw	r1, #778	; 0x30a
 8005d20:	f000 f914 	bl	8005f4c <__assert_func>
 8005d24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d2c:	bb35      	cbnz	r5, 8005d7c <__d2b+0x7c>
 8005d2e:	2e00      	cmp	r6, #0
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	d028      	beq.n	8005d86 <__d2b+0x86>
 8005d34:	4668      	mov	r0, sp
 8005d36:	9600      	str	r6, [sp, #0]
 8005d38:	f7ff fd8c 	bl	8005854 <__lo0bits>
 8005d3c:	9900      	ldr	r1, [sp, #0]
 8005d3e:	b300      	cbz	r0, 8005d82 <__d2b+0x82>
 8005d40:	9a01      	ldr	r2, [sp, #4]
 8005d42:	f1c0 0320 	rsb	r3, r0, #32
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	40c2      	lsrs	r2, r0
 8005d4e:	6163      	str	r3, [r4, #20]
 8005d50:	9201      	str	r2, [sp, #4]
 8005d52:	9b01      	ldr	r3, [sp, #4]
 8005d54:	61a3      	str	r3, [r4, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2202      	movne	r2, #2
 8005d5c:	2201      	moveq	r2, #1
 8005d5e:	6122      	str	r2, [r4, #16]
 8005d60:	b1d5      	cbz	r5, 8005d98 <__d2b+0x98>
 8005d62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d66:	4405      	add	r5, r0
 8005d68:	f8c9 5000 	str.w	r5, [r9]
 8005d6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d70:	f8c8 0000 	str.w	r0, [r8]
 8005d74:	4620      	mov	r0, r4
 8005d76:	b003      	add	sp, #12
 8005d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d80:	e7d5      	b.n	8005d2e <__d2b+0x2e>
 8005d82:	6161      	str	r1, [r4, #20]
 8005d84:	e7e5      	b.n	8005d52 <__d2b+0x52>
 8005d86:	a801      	add	r0, sp, #4
 8005d88:	f7ff fd64 	bl	8005854 <__lo0bits>
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	6163      	str	r3, [r4, #20]
 8005d90:	2201      	movs	r2, #1
 8005d92:	6122      	str	r2, [r4, #16]
 8005d94:	3020      	adds	r0, #32
 8005d96:	e7e3      	b.n	8005d60 <__d2b+0x60>
 8005d98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005da0:	f8c9 0000 	str.w	r0, [r9]
 8005da4:	6918      	ldr	r0, [r3, #16]
 8005da6:	f7ff fd35 	bl	8005814 <__hi0bits>
 8005daa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005dae:	e7df      	b.n	8005d70 <__d2b+0x70>
 8005db0:	08006be3 	.word	0x08006be3
 8005db4:	08006bf4 	.word	0x08006bf4

08005db8 <_calloc_r>:
 8005db8:	b513      	push	{r0, r1, r4, lr}
 8005dba:	434a      	muls	r2, r1
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	9201      	str	r2, [sp, #4]
 8005dc0:	f000 f85a 	bl	8005e78 <_malloc_r>
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	b118      	cbz	r0, 8005dd0 <_calloc_r+0x18>
 8005dc8:	9a01      	ldr	r2, [sp, #4]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f7fe f972 	bl	80040b4 <memset>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	b002      	add	sp, #8
 8005dd4:	bd10      	pop	{r4, pc}
	...

08005dd8 <_free_r>:
 8005dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dda:	2900      	cmp	r1, #0
 8005ddc:	d048      	beq.n	8005e70 <_free_r+0x98>
 8005dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de2:	9001      	str	r0, [sp, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f1a1 0404 	sub.w	r4, r1, #4
 8005dea:	bfb8      	it	lt
 8005dec:	18e4      	addlt	r4, r4, r3
 8005dee:	f000 f8ef 	bl	8005fd0 <__malloc_lock>
 8005df2:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <_free_r+0x9c>)
 8005df4:	9801      	ldr	r0, [sp, #4]
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	4615      	mov	r5, r2
 8005dfa:	b933      	cbnz	r3, 8005e0a <_free_r+0x32>
 8005dfc:	6063      	str	r3, [r4, #4]
 8005dfe:	6014      	str	r4, [r2, #0]
 8005e00:	b003      	add	sp, #12
 8005e02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e06:	f000 b8e9 	b.w	8005fdc <__malloc_unlock>
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	d90b      	bls.n	8005e26 <_free_r+0x4e>
 8005e0e:	6821      	ldr	r1, [r4, #0]
 8005e10:	1862      	adds	r2, r4, r1
 8005e12:	4293      	cmp	r3, r2
 8005e14:	bf04      	itt	eq
 8005e16:	681a      	ldreq	r2, [r3, #0]
 8005e18:	685b      	ldreq	r3, [r3, #4]
 8005e1a:	6063      	str	r3, [r4, #4]
 8005e1c:	bf04      	itt	eq
 8005e1e:	1852      	addeq	r2, r2, r1
 8005e20:	6022      	streq	r2, [r4, #0]
 8005e22:	602c      	str	r4, [r5, #0]
 8005e24:	e7ec      	b.n	8005e00 <_free_r+0x28>
 8005e26:	461a      	mov	r2, r3
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	b10b      	cbz	r3, 8005e30 <_free_r+0x58>
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	d9fa      	bls.n	8005e26 <_free_r+0x4e>
 8005e30:	6811      	ldr	r1, [r2, #0]
 8005e32:	1855      	adds	r5, r2, r1
 8005e34:	42a5      	cmp	r5, r4
 8005e36:	d10b      	bne.n	8005e50 <_free_r+0x78>
 8005e38:	6824      	ldr	r4, [r4, #0]
 8005e3a:	4421      	add	r1, r4
 8005e3c:	1854      	adds	r4, r2, r1
 8005e3e:	42a3      	cmp	r3, r4
 8005e40:	6011      	str	r1, [r2, #0]
 8005e42:	d1dd      	bne.n	8005e00 <_free_r+0x28>
 8005e44:	681c      	ldr	r4, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	6053      	str	r3, [r2, #4]
 8005e4a:	4421      	add	r1, r4
 8005e4c:	6011      	str	r1, [r2, #0]
 8005e4e:	e7d7      	b.n	8005e00 <_free_r+0x28>
 8005e50:	d902      	bls.n	8005e58 <_free_r+0x80>
 8005e52:	230c      	movs	r3, #12
 8005e54:	6003      	str	r3, [r0, #0]
 8005e56:	e7d3      	b.n	8005e00 <_free_r+0x28>
 8005e58:	6825      	ldr	r5, [r4, #0]
 8005e5a:	1961      	adds	r1, r4, r5
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	bf04      	itt	eq
 8005e60:	6819      	ldreq	r1, [r3, #0]
 8005e62:	685b      	ldreq	r3, [r3, #4]
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	bf04      	itt	eq
 8005e68:	1949      	addeq	r1, r1, r5
 8005e6a:	6021      	streq	r1, [r4, #0]
 8005e6c:	6054      	str	r4, [r2, #4]
 8005e6e:	e7c7      	b.n	8005e00 <_free_r+0x28>
 8005e70:	b003      	add	sp, #12
 8005e72:	bd30      	pop	{r4, r5, pc}
 8005e74:	20000318 	.word	0x20000318

08005e78 <_malloc_r>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	1ccd      	adds	r5, r1, #3
 8005e7c:	f025 0503 	bic.w	r5, r5, #3
 8005e80:	3508      	adds	r5, #8
 8005e82:	2d0c      	cmp	r5, #12
 8005e84:	bf38      	it	cc
 8005e86:	250c      	movcc	r5, #12
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	db01      	blt.n	8005e92 <_malloc_r+0x1a>
 8005e8e:	42a9      	cmp	r1, r5
 8005e90:	d903      	bls.n	8005e9a <_malloc_r+0x22>
 8005e92:	230c      	movs	r3, #12
 8005e94:	6033      	str	r3, [r6, #0]
 8005e96:	2000      	movs	r0, #0
 8005e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e9a:	f000 f899 	bl	8005fd0 <__malloc_lock>
 8005e9e:	4921      	ldr	r1, [pc, #132]	; (8005f24 <_malloc_r+0xac>)
 8005ea0:	680a      	ldr	r2, [r1, #0]
 8005ea2:	4614      	mov	r4, r2
 8005ea4:	b99c      	cbnz	r4, 8005ece <_malloc_r+0x56>
 8005ea6:	4f20      	ldr	r7, [pc, #128]	; (8005f28 <_malloc_r+0xb0>)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	b923      	cbnz	r3, 8005eb6 <_malloc_r+0x3e>
 8005eac:	4621      	mov	r1, r4
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f000 f83c 	bl	8005f2c <_sbrk_r>
 8005eb4:	6038      	str	r0, [r7, #0]
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 f837 	bl	8005f2c <_sbrk_r>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	d123      	bne.n	8005f0a <_malloc_r+0x92>
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	6033      	str	r3, [r6, #0]
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f000 f888 	bl	8005fdc <__malloc_unlock>
 8005ecc:	e7e3      	b.n	8005e96 <_malloc_r+0x1e>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	1b5b      	subs	r3, r3, r5
 8005ed2:	d417      	bmi.n	8005f04 <_malloc_r+0x8c>
 8005ed4:	2b0b      	cmp	r3, #11
 8005ed6:	d903      	bls.n	8005ee0 <_malloc_r+0x68>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	441c      	add	r4, r3
 8005edc:	6025      	str	r5, [r4, #0]
 8005ede:	e004      	b.n	8005eea <_malloc_r+0x72>
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	42a2      	cmp	r2, r4
 8005ee4:	bf0c      	ite	eq
 8005ee6:	600b      	streq	r3, [r1, #0]
 8005ee8:	6053      	strne	r3, [r2, #4]
 8005eea:	4630      	mov	r0, r6
 8005eec:	f000 f876 	bl	8005fdc <__malloc_unlock>
 8005ef0:	f104 000b 	add.w	r0, r4, #11
 8005ef4:	1d23      	adds	r3, r4, #4
 8005ef6:	f020 0007 	bic.w	r0, r0, #7
 8005efa:	1ac2      	subs	r2, r0, r3
 8005efc:	d0cc      	beq.n	8005e98 <_malloc_r+0x20>
 8005efe:	1a1b      	subs	r3, r3, r0
 8005f00:	50a3      	str	r3, [r4, r2]
 8005f02:	e7c9      	b.n	8005e98 <_malloc_r+0x20>
 8005f04:	4622      	mov	r2, r4
 8005f06:	6864      	ldr	r4, [r4, #4]
 8005f08:	e7cc      	b.n	8005ea4 <_malloc_r+0x2c>
 8005f0a:	1cc4      	adds	r4, r0, #3
 8005f0c:	f024 0403 	bic.w	r4, r4, #3
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	d0e3      	beq.n	8005edc <_malloc_r+0x64>
 8005f14:	1a21      	subs	r1, r4, r0
 8005f16:	4630      	mov	r0, r6
 8005f18:	f000 f808 	bl	8005f2c <_sbrk_r>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d1dd      	bne.n	8005edc <_malloc_r+0x64>
 8005f20:	e7cf      	b.n	8005ec2 <_malloc_r+0x4a>
 8005f22:	bf00      	nop
 8005f24:	20000318 	.word	0x20000318
 8005f28:	2000031c 	.word	0x2000031c

08005f2c <_sbrk_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d06      	ldr	r5, [pc, #24]	; (8005f48 <_sbrk_r+0x1c>)
 8005f30:	2300      	movs	r3, #0
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	f7fc f8da 	bl	80020f0 <_sbrk>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_sbrk_r+0x1a>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_sbrk_r+0x1a>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20000440 	.word	0x20000440

08005f4c <__assert_func>:
 8005f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f4e:	4614      	mov	r4, r2
 8005f50:	461a      	mov	r2, r3
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <__assert_func+0x2c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4605      	mov	r5, r0
 8005f58:	68d8      	ldr	r0, [r3, #12]
 8005f5a:	b14c      	cbz	r4, 8005f70 <__assert_func+0x24>
 8005f5c:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <__assert_func+0x30>)
 8005f5e:	9100      	str	r1, [sp, #0]
 8005f60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f64:	4906      	ldr	r1, [pc, #24]	; (8005f80 <__assert_func+0x34>)
 8005f66:	462b      	mov	r3, r5
 8005f68:	f000 f80e 	bl	8005f88 <fiprintf>
 8005f6c:	f000 fa64 	bl	8006438 <abort>
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <__assert_func+0x38>)
 8005f72:	461c      	mov	r4, r3
 8005f74:	e7f3      	b.n	8005f5e <__assert_func+0x12>
 8005f76:	bf00      	nop
 8005f78:	20000124 	.word	0x20000124
 8005f7c:	08006d54 	.word	0x08006d54
 8005f80:	08006d61 	.word	0x08006d61
 8005f84:	08006d8f 	.word	0x08006d8f

08005f88 <fiprintf>:
 8005f88:	b40e      	push	{r1, r2, r3}
 8005f8a:	b503      	push	{r0, r1, lr}
 8005f8c:	4601      	mov	r1, r0
 8005f8e:	ab03      	add	r3, sp, #12
 8005f90:	4805      	ldr	r0, [pc, #20]	; (8005fa8 <fiprintf+0x20>)
 8005f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f96:	6800      	ldr	r0, [r0, #0]
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	f000 f84f 	bl	800603c <_vfiprintf_r>
 8005f9e:	b002      	add	sp, #8
 8005fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fa4:	b003      	add	sp, #12
 8005fa6:	4770      	bx	lr
 8005fa8:	20000124 	.word	0x20000124

08005fac <__ascii_mbtowc>:
 8005fac:	b082      	sub	sp, #8
 8005fae:	b901      	cbnz	r1, 8005fb2 <__ascii_mbtowc+0x6>
 8005fb0:	a901      	add	r1, sp, #4
 8005fb2:	b142      	cbz	r2, 8005fc6 <__ascii_mbtowc+0x1a>
 8005fb4:	b14b      	cbz	r3, 8005fca <__ascii_mbtowc+0x1e>
 8005fb6:	7813      	ldrb	r3, [r2, #0]
 8005fb8:	600b      	str	r3, [r1, #0]
 8005fba:	7812      	ldrb	r2, [r2, #0]
 8005fbc:	1e10      	subs	r0, r2, #0
 8005fbe:	bf18      	it	ne
 8005fc0:	2001      	movne	r0, #1
 8005fc2:	b002      	add	sp, #8
 8005fc4:	4770      	bx	lr
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	e7fb      	b.n	8005fc2 <__ascii_mbtowc+0x16>
 8005fca:	f06f 0001 	mvn.w	r0, #1
 8005fce:	e7f8      	b.n	8005fc2 <__ascii_mbtowc+0x16>

08005fd0 <__malloc_lock>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	; (8005fd8 <__malloc_lock+0x8>)
 8005fd2:	f000 bbf1 	b.w	80067b8 <__retarget_lock_acquire_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	20000448 	.word	0x20000448

08005fdc <__malloc_unlock>:
 8005fdc:	4801      	ldr	r0, [pc, #4]	; (8005fe4 <__malloc_unlock+0x8>)
 8005fde:	f000 bbec 	b.w	80067ba <__retarget_lock_release_recursive>
 8005fe2:	bf00      	nop
 8005fe4:	20000448 	.word	0x20000448

08005fe8 <__sfputc_r>:
 8005fe8:	6893      	ldr	r3, [r2, #8]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	b410      	push	{r4}
 8005ff0:	6093      	str	r3, [r2, #8]
 8005ff2:	da08      	bge.n	8006006 <__sfputc_r+0x1e>
 8005ff4:	6994      	ldr	r4, [r2, #24]
 8005ff6:	42a3      	cmp	r3, r4
 8005ff8:	db01      	blt.n	8005ffe <__sfputc_r+0x16>
 8005ffa:	290a      	cmp	r1, #10
 8005ffc:	d103      	bne.n	8006006 <__sfputc_r+0x1e>
 8005ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006002:	f000 b94b 	b.w	800629c <__swbuf_r>
 8006006:	6813      	ldr	r3, [r2, #0]
 8006008:	1c58      	adds	r0, r3, #1
 800600a:	6010      	str	r0, [r2, #0]
 800600c:	7019      	strb	r1, [r3, #0]
 800600e:	4608      	mov	r0, r1
 8006010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006014:	4770      	bx	lr

08006016 <__sfputs_r>:
 8006016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006018:	4606      	mov	r6, r0
 800601a:	460f      	mov	r7, r1
 800601c:	4614      	mov	r4, r2
 800601e:	18d5      	adds	r5, r2, r3
 8006020:	42ac      	cmp	r4, r5
 8006022:	d101      	bne.n	8006028 <__sfputs_r+0x12>
 8006024:	2000      	movs	r0, #0
 8006026:	e007      	b.n	8006038 <__sfputs_r+0x22>
 8006028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800602c:	463a      	mov	r2, r7
 800602e:	4630      	mov	r0, r6
 8006030:	f7ff ffda 	bl	8005fe8 <__sfputc_r>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d1f3      	bne.n	8006020 <__sfputs_r+0xa>
 8006038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800603c <_vfiprintf_r>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	460d      	mov	r5, r1
 8006042:	b09d      	sub	sp, #116	; 0x74
 8006044:	4614      	mov	r4, r2
 8006046:	4698      	mov	r8, r3
 8006048:	4606      	mov	r6, r0
 800604a:	b118      	cbz	r0, 8006054 <_vfiprintf_r+0x18>
 800604c:	6983      	ldr	r3, [r0, #24]
 800604e:	b90b      	cbnz	r3, 8006054 <_vfiprintf_r+0x18>
 8006050:	f000 fb14 	bl	800667c <__sinit>
 8006054:	4b89      	ldr	r3, [pc, #548]	; (800627c <_vfiprintf_r+0x240>)
 8006056:	429d      	cmp	r5, r3
 8006058:	d11b      	bne.n	8006092 <_vfiprintf_r+0x56>
 800605a:	6875      	ldr	r5, [r6, #4]
 800605c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800605e:	07d9      	lsls	r1, r3, #31
 8006060:	d405      	bmi.n	800606e <_vfiprintf_r+0x32>
 8006062:	89ab      	ldrh	r3, [r5, #12]
 8006064:	059a      	lsls	r2, r3, #22
 8006066:	d402      	bmi.n	800606e <_vfiprintf_r+0x32>
 8006068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800606a:	f000 fba5 	bl	80067b8 <__retarget_lock_acquire_recursive>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	071b      	lsls	r3, r3, #28
 8006072:	d501      	bpl.n	8006078 <_vfiprintf_r+0x3c>
 8006074:	692b      	ldr	r3, [r5, #16]
 8006076:	b9eb      	cbnz	r3, 80060b4 <_vfiprintf_r+0x78>
 8006078:	4629      	mov	r1, r5
 800607a:	4630      	mov	r0, r6
 800607c:	f000 f96e 	bl	800635c <__swsetup_r>
 8006080:	b1c0      	cbz	r0, 80060b4 <_vfiprintf_r+0x78>
 8006082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006084:	07dc      	lsls	r4, r3, #31
 8006086:	d50e      	bpl.n	80060a6 <_vfiprintf_r+0x6a>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	b01d      	add	sp, #116	; 0x74
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	4b7b      	ldr	r3, [pc, #492]	; (8006280 <_vfiprintf_r+0x244>)
 8006094:	429d      	cmp	r5, r3
 8006096:	d101      	bne.n	800609c <_vfiprintf_r+0x60>
 8006098:	68b5      	ldr	r5, [r6, #8]
 800609a:	e7df      	b.n	800605c <_vfiprintf_r+0x20>
 800609c:	4b79      	ldr	r3, [pc, #484]	; (8006284 <_vfiprintf_r+0x248>)
 800609e:	429d      	cmp	r5, r3
 80060a0:	bf08      	it	eq
 80060a2:	68f5      	ldreq	r5, [r6, #12]
 80060a4:	e7da      	b.n	800605c <_vfiprintf_r+0x20>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	0598      	lsls	r0, r3, #22
 80060aa:	d4ed      	bmi.n	8006088 <_vfiprintf_r+0x4c>
 80060ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ae:	f000 fb84 	bl	80067ba <__retarget_lock_release_recursive>
 80060b2:	e7e9      	b.n	8006088 <_vfiprintf_r+0x4c>
 80060b4:	2300      	movs	r3, #0
 80060b6:	9309      	str	r3, [sp, #36]	; 0x24
 80060b8:	2320      	movs	r3, #32
 80060ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060be:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c2:	2330      	movs	r3, #48	; 0x30
 80060c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006288 <_vfiprintf_r+0x24c>
 80060c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060cc:	f04f 0901 	mov.w	r9, #1
 80060d0:	4623      	mov	r3, r4
 80060d2:	469a      	mov	sl, r3
 80060d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d8:	b10a      	cbz	r2, 80060de <_vfiprintf_r+0xa2>
 80060da:	2a25      	cmp	r2, #37	; 0x25
 80060dc:	d1f9      	bne.n	80060d2 <_vfiprintf_r+0x96>
 80060de:	ebba 0b04 	subs.w	fp, sl, r4
 80060e2:	d00b      	beq.n	80060fc <_vfiprintf_r+0xc0>
 80060e4:	465b      	mov	r3, fp
 80060e6:	4622      	mov	r2, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff ff93 	bl	8006016 <__sfputs_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	f000 80aa 	beq.w	800624a <_vfiprintf_r+0x20e>
 80060f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f8:	445a      	add	r2, fp
 80060fa:	9209      	str	r2, [sp, #36]	; 0x24
 80060fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a2 	beq.w	800624a <_vfiprintf_r+0x20e>
 8006106:	2300      	movs	r3, #0
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006110:	f10a 0a01 	add.w	sl, sl, #1
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611c:	931a      	str	r3, [sp, #104]	; 0x68
 800611e:	4654      	mov	r4, sl
 8006120:	2205      	movs	r2, #5
 8006122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006126:	4858      	ldr	r0, [pc, #352]	; (8006288 <_vfiprintf_r+0x24c>)
 8006128:	f7fa f86a 	bl	8000200 <memchr>
 800612c:	9a04      	ldr	r2, [sp, #16]
 800612e:	b9d8      	cbnz	r0, 8006168 <_vfiprintf_r+0x12c>
 8006130:	06d1      	lsls	r1, r2, #27
 8006132:	bf44      	itt	mi
 8006134:	2320      	movmi	r3, #32
 8006136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800613a:	0713      	lsls	r3, r2, #28
 800613c:	bf44      	itt	mi
 800613e:	232b      	movmi	r3, #43	; 0x2b
 8006140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006144:	f89a 3000 	ldrb.w	r3, [sl]
 8006148:	2b2a      	cmp	r3, #42	; 0x2a
 800614a:	d015      	beq.n	8006178 <_vfiprintf_r+0x13c>
 800614c:	9a07      	ldr	r2, [sp, #28]
 800614e:	4654      	mov	r4, sl
 8006150:	2000      	movs	r0, #0
 8006152:	f04f 0c0a 	mov.w	ip, #10
 8006156:	4621      	mov	r1, r4
 8006158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615c:	3b30      	subs	r3, #48	; 0x30
 800615e:	2b09      	cmp	r3, #9
 8006160:	d94e      	bls.n	8006200 <_vfiprintf_r+0x1c4>
 8006162:	b1b0      	cbz	r0, 8006192 <_vfiprintf_r+0x156>
 8006164:	9207      	str	r2, [sp, #28]
 8006166:	e014      	b.n	8006192 <_vfiprintf_r+0x156>
 8006168:	eba0 0308 	sub.w	r3, r0, r8
 800616c:	fa09 f303 	lsl.w	r3, r9, r3
 8006170:	4313      	orrs	r3, r2
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	46a2      	mov	sl, r4
 8006176:	e7d2      	b.n	800611e <_vfiprintf_r+0xe2>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	1d19      	adds	r1, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	9103      	str	r1, [sp, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	bfbb      	ittet	lt
 8006184:	425b      	neglt	r3, r3
 8006186:	f042 0202 	orrlt.w	r2, r2, #2
 800618a:	9307      	strge	r3, [sp, #28]
 800618c:	9307      	strlt	r3, [sp, #28]
 800618e:	bfb8      	it	lt
 8006190:	9204      	strlt	r2, [sp, #16]
 8006192:	7823      	ldrb	r3, [r4, #0]
 8006194:	2b2e      	cmp	r3, #46	; 0x2e
 8006196:	d10c      	bne.n	80061b2 <_vfiprintf_r+0x176>
 8006198:	7863      	ldrb	r3, [r4, #1]
 800619a:	2b2a      	cmp	r3, #42	; 0x2a
 800619c:	d135      	bne.n	800620a <_vfiprintf_r+0x1ce>
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	1d1a      	adds	r2, r3, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	9203      	str	r2, [sp, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfb8      	it	lt
 80061aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ae:	3402      	adds	r4, #2
 80061b0:	9305      	str	r3, [sp, #20]
 80061b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006298 <_vfiprintf_r+0x25c>
 80061b6:	7821      	ldrb	r1, [r4, #0]
 80061b8:	2203      	movs	r2, #3
 80061ba:	4650      	mov	r0, sl
 80061bc:	f7fa f820 	bl	8000200 <memchr>
 80061c0:	b140      	cbz	r0, 80061d4 <_vfiprintf_r+0x198>
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	eba0 000a 	sub.w	r0, r0, sl
 80061c8:	fa03 f000 	lsl.w	r0, r3, r0
 80061cc:	9b04      	ldr	r3, [sp, #16]
 80061ce:	4303      	orrs	r3, r0
 80061d0:	3401      	adds	r4, #1
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d8:	482c      	ldr	r0, [pc, #176]	; (800628c <_vfiprintf_r+0x250>)
 80061da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061de:	2206      	movs	r2, #6
 80061e0:	f7fa f80e 	bl	8000200 <memchr>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d03f      	beq.n	8006268 <_vfiprintf_r+0x22c>
 80061e8:	4b29      	ldr	r3, [pc, #164]	; (8006290 <_vfiprintf_r+0x254>)
 80061ea:	bb1b      	cbnz	r3, 8006234 <_vfiprintf_r+0x1f8>
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	3307      	adds	r3, #7
 80061f0:	f023 0307 	bic.w	r3, r3, #7
 80061f4:	3308      	adds	r3, #8
 80061f6:	9303      	str	r3, [sp, #12]
 80061f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fa:	443b      	add	r3, r7
 80061fc:	9309      	str	r3, [sp, #36]	; 0x24
 80061fe:	e767      	b.n	80060d0 <_vfiprintf_r+0x94>
 8006200:	fb0c 3202 	mla	r2, ip, r2, r3
 8006204:	460c      	mov	r4, r1
 8006206:	2001      	movs	r0, #1
 8006208:	e7a5      	b.n	8006156 <_vfiprintf_r+0x11a>
 800620a:	2300      	movs	r3, #0
 800620c:	3401      	adds	r4, #1
 800620e:	9305      	str	r3, [sp, #20]
 8006210:	4619      	mov	r1, r3
 8006212:	f04f 0c0a 	mov.w	ip, #10
 8006216:	4620      	mov	r0, r4
 8006218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621c:	3a30      	subs	r2, #48	; 0x30
 800621e:	2a09      	cmp	r2, #9
 8006220:	d903      	bls.n	800622a <_vfiprintf_r+0x1ee>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0c5      	beq.n	80061b2 <_vfiprintf_r+0x176>
 8006226:	9105      	str	r1, [sp, #20]
 8006228:	e7c3      	b.n	80061b2 <_vfiprintf_r+0x176>
 800622a:	fb0c 2101 	mla	r1, ip, r1, r2
 800622e:	4604      	mov	r4, r0
 8006230:	2301      	movs	r3, #1
 8006232:	e7f0      	b.n	8006216 <_vfiprintf_r+0x1da>
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	462a      	mov	r2, r5
 800623a:	4b16      	ldr	r3, [pc, #88]	; (8006294 <_vfiprintf_r+0x258>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4630      	mov	r0, r6
 8006240:	f7fd ffe0 	bl	8004204 <_printf_float>
 8006244:	4607      	mov	r7, r0
 8006246:	1c78      	adds	r0, r7, #1
 8006248:	d1d6      	bne.n	80061f8 <_vfiprintf_r+0x1bc>
 800624a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800624c:	07d9      	lsls	r1, r3, #31
 800624e:	d405      	bmi.n	800625c <_vfiprintf_r+0x220>
 8006250:	89ab      	ldrh	r3, [r5, #12]
 8006252:	059a      	lsls	r2, r3, #22
 8006254:	d402      	bmi.n	800625c <_vfiprintf_r+0x220>
 8006256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006258:	f000 faaf 	bl	80067ba <__retarget_lock_release_recursive>
 800625c:	89ab      	ldrh	r3, [r5, #12]
 800625e:	065b      	lsls	r3, r3, #25
 8006260:	f53f af12 	bmi.w	8006088 <_vfiprintf_r+0x4c>
 8006264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006266:	e711      	b.n	800608c <_vfiprintf_r+0x50>
 8006268:	ab03      	add	r3, sp, #12
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	462a      	mov	r2, r5
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <_vfiprintf_r+0x258>)
 8006270:	a904      	add	r1, sp, #16
 8006272:	4630      	mov	r0, r6
 8006274:	f7fe fa6a 	bl	800474c <_printf_i>
 8006278:	e7e4      	b.n	8006244 <_vfiprintf_r+0x208>
 800627a:	bf00      	nop
 800627c:	08006ecc 	.word	0x08006ecc
 8006280:	08006eec 	.word	0x08006eec
 8006284:	08006eac 	.word	0x08006eac
 8006288:	08006d9a 	.word	0x08006d9a
 800628c:	08006da4 	.word	0x08006da4
 8006290:	08004205 	.word	0x08004205
 8006294:	08006017 	.word	0x08006017
 8006298:	08006da0 	.word	0x08006da0

0800629c <__swbuf_r>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	460e      	mov	r6, r1
 80062a0:	4614      	mov	r4, r2
 80062a2:	4605      	mov	r5, r0
 80062a4:	b118      	cbz	r0, 80062ae <__swbuf_r+0x12>
 80062a6:	6983      	ldr	r3, [r0, #24]
 80062a8:	b90b      	cbnz	r3, 80062ae <__swbuf_r+0x12>
 80062aa:	f000 f9e7 	bl	800667c <__sinit>
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <__swbuf_r+0x98>)
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d12b      	bne.n	800630c <__swbuf_r+0x70>
 80062b4:	686c      	ldr	r4, [r5, #4]
 80062b6:	69a3      	ldr	r3, [r4, #24]
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	071a      	lsls	r2, r3, #28
 80062be:	d52f      	bpl.n	8006320 <__swbuf_r+0x84>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b36b      	cbz	r3, 8006320 <__swbuf_r+0x84>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	1ac0      	subs	r0, r0, r3
 80062ca:	6963      	ldr	r3, [r4, #20]
 80062cc:	b2f6      	uxtb	r6, r6
 80062ce:	4283      	cmp	r3, r0
 80062d0:	4637      	mov	r7, r6
 80062d2:	dc04      	bgt.n	80062de <__swbuf_r+0x42>
 80062d4:	4621      	mov	r1, r4
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 f93c 	bl	8006554 <_fflush_r>
 80062dc:	bb30      	cbnz	r0, 800632c <__swbuf_r+0x90>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	701e      	strb	r6, [r3, #0]
 80062ec:	6963      	ldr	r3, [r4, #20]
 80062ee:	3001      	adds	r0, #1
 80062f0:	4283      	cmp	r3, r0
 80062f2:	d004      	beq.n	80062fe <__swbuf_r+0x62>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	07db      	lsls	r3, r3, #31
 80062f8:	d506      	bpl.n	8006308 <__swbuf_r+0x6c>
 80062fa:	2e0a      	cmp	r6, #10
 80062fc:	d104      	bne.n	8006308 <__swbuf_r+0x6c>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f000 f927 	bl	8006554 <_fflush_r>
 8006306:	b988      	cbnz	r0, 800632c <__swbuf_r+0x90>
 8006308:	4638      	mov	r0, r7
 800630a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <__swbuf_r+0x9c>)
 800630e:	429c      	cmp	r4, r3
 8006310:	d101      	bne.n	8006316 <__swbuf_r+0x7a>
 8006312:	68ac      	ldr	r4, [r5, #8]
 8006314:	e7cf      	b.n	80062b6 <__swbuf_r+0x1a>
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <__swbuf_r+0xa0>)
 8006318:	429c      	cmp	r4, r3
 800631a:	bf08      	it	eq
 800631c:	68ec      	ldreq	r4, [r5, #12]
 800631e:	e7ca      	b.n	80062b6 <__swbuf_r+0x1a>
 8006320:	4621      	mov	r1, r4
 8006322:	4628      	mov	r0, r5
 8006324:	f000 f81a 	bl	800635c <__swsetup_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	d0cb      	beq.n	80062c4 <__swbuf_r+0x28>
 800632c:	f04f 37ff 	mov.w	r7, #4294967295
 8006330:	e7ea      	b.n	8006308 <__swbuf_r+0x6c>
 8006332:	bf00      	nop
 8006334:	08006ecc 	.word	0x08006ecc
 8006338:	08006eec 	.word	0x08006eec
 800633c:	08006eac 	.word	0x08006eac

08006340 <__ascii_wctomb>:
 8006340:	b149      	cbz	r1, 8006356 <__ascii_wctomb+0x16>
 8006342:	2aff      	cmp	r2, #255	; 0xff
 8006344:	bf85      	ittet	hi
 8006346:	238a      	movhi	r3, #138	; 0x8a
 8006348:	6003      	strhi	r3, [r0, #0]
 800634a:	700a      	strbls	r2, [r1, #0]
 800634c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006350:	bf98      	it	ls
 8006352:	2001      	movls	r0, #1
 8006354:	4770      	bx	lr
 8006356:	4608      	mov	r0, r1
 8006358:	4770      	bx	lr
	...

0800635c <__swsetup_r>:
 800635c:	4b32      	ldr	r3, [pc, #200]	; (8006428 <__swsetup_r+0xcc>)
 800635e:	b570      	push	{r4, r5, r6, lr}
 8006360:	681d      	ldr	r5, [r3, #0]
 8006362:	4606      	mov	r6, r0
 8006364:	460c      	mov	r4, r1
 8006366:	b125      	cbz	r5, 8006372 <__swsetup_r+0x16>
 8006368:	69ab      	ldr	r3, [r5, #24]
 800636a:	b913      	cbnz	r3, 8006372 <__swsetup_r+0x16>
 800636c:	4628      	mov	r0, r5
 800636e:	f000 f985 	bl	800667c <__sinit>
 8006372:	4b2e      	ldr	r3, [pc, #184]	; (800642c <__swsetup_r+0xd0>)
 8006374:	429c      	cmp	r4, r3
 8006376:	d10f      	bne.n	8006398 <__swsetup_r+0x3c>
 8006378:	686c      	ldr	r4, [r5, #4]
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006380:	0719      	lsls	r1, r3, #28
 8006382:	d42c      	bmi.n	80063de <__swsetup_r+0x82>
 8006384:	06dd      	lsls	r5, r3, #27
 8006386:	d411      	bmi.n	80063ac <__swsetup_r+0x50>
 8006388:	2309      	movs	r3, #9
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	f04f 30ff 	mov.w	r0, #4294967295
 8006396:	e03e      	b.n	8006416 <__swsetup_r+0xba>
 8006398:	4b25      	ldr	r3, [pc, #148]	; (8006430 <__swsetup_r+0xd4>)
 800639a:	429c      	cmp	r4, r3
 800639c:	d101      	bne.n	80063a2 <__swsetup_r+0x46>
 800639e:	68ac      	ldr	r4, [r5, #8]
 80063a0:	e7eb      	b.n	800637a <__swsetup_r+0x1e>
 80063a2:	4b24      	ldr	r3, [pc, #144]	; (8006434 <__swsetup_r+0xd8>)
 80063a4:	429c      	cmp	r4, r3
 80063a6:	bf08      	it	eq
 80063a8:	68ec      	ldreq	r4, [r5, #12]
 80063aa:	e7e6      	b.n	800637a <__swsetup_r+0x1e>
 80063ac:	0758      	lsls	r0, r3, #29
 80063ae:	d512      	bpl.n	80063d6 <__swsetup_r+0x7a>
 80063b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063b2:	b141      	cbz	r1, 80063c6 <__swsetup_r+0x6a>
 80063b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d002      	beq.n	80063c2 <__swsetup_r+0x66>
 80063bc:	4630      	mov	r0, r6
 80063be:	f7ff fd0b 	bl	8005dd8 <_free_r>
 80063c2:	2300      	movs	r3, #0
 80063c4:	6363      	str	r3, [r4, #52]	; 0x34
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	2300      	movs	r3, #0
 80063d0:	6063      	str	r3, [r4, #4]
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f043 0308 	orr.w	r3, r3, #8
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	b94b      	cbnz	r3, 80063f6 <__swsetup_r+0x9a>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ec:	d003      	beq.n	80063f6 <__swsetup_r+0x9a>
 80063ee:	4621      	mov	r1, r4
 80063f0:	4630      	mov	r0, r6
 80063f2:	f000 fa07 	bl	8006804 <__smakebuf_r>
 80063f6:	89a0      	ldrh	r0, [r4, #12]
 80063f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063fc:	f010 0301 	ands.w	r3, r0, #1
 8006400:	d00a      	beq.n	8006418 <__swsetup_r+0xbc>
 8006402:	2300      	movs	r3, #0
 8006404:	60a3      	str	r3, [r4, #8]
 8006406:	6963      	ldr	r3, [r4, #20]
 8006408:	425b      	negs	r3, r3
 800640a:	61a3      	str	r3, [r4, #24]
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	b943      	cbnz	r3, 8006422 <__swsetup_r+0xc6>
 8006410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006414:	d1ba      	bne.n	800638c <__swsetup_r+0x30>
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	0781      	lsls	r1, r0, #30
 800641a:	bf58      	it	pl
 800641c:	6963      	ldrpl	r3, [r4, #20]
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	e7f4      	b.n	800640c <__swsetup_r+0xb0>
 8006422:	2000      	movs	r0, #0
 8006424:	e7f7      	b.n	8006416 <__swsetup_r+0xba>
 8006426:	bf00      	nop
 8006428:	20000124 	.word	0x20000124
 800642c:	08006ecc 	.word	0x08006ecc
 8006430:	08006eec 	.word	0x08006eec
 8006434:	08006eac 	.word	0x08006eac

08006438 <abort>:
 8006438:	b508      	push	{r3, lr}
 800643a:	2006      	movs	r0, #6
 800643c:	f000 fa4a 	bl	80068d4 <raise>
 8006440:	2001      	movs	r0, #1
 8006442:	f7fb fe25 	bl	8002090 <_exit>
	...

08006448 <__sflush_r>:
 8006448:	898a      	ldrh	r2, [r1, #12]
 800644a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644e:	4605      	mov	r5, r0
 8006450:	0710      	lsls	r0, r2, #28
 8006452:	460c      	mov	r4, r1
 8006454:	d458      	bmi.n	8006508 <__sflush_r+0xc0>
 8006456:	684b      	ldr	r3, [r1, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dc05      	bgt.n	8006468 <__sflush_r+0x20>
 800645c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	dc02      	bgt.n	8006468 <__sflush_r+0x20>
 8006462:	2000      	movs	r0, #0
 8006464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800646a:	2e00      	cmp	r6, #0
 800646c:	d0f9      	beq.n	8006462 <__sflush_r+0x1a>
 800646e:	2300      	movs	r3, #0
 8006470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006474:	682f      	ldr	r7, [r5, #0]
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	d032      	beq.n	80064e0 <__sflush_r+0x98>
 800647a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	075a      	lsls	r2, r3, #29
 8006480:	d505      	bpl.n	800648e <__sflush_r+0x46>
 8006482:	6863      	ldr	r3, [r4, #4]
 8006484:	1ac0      	subs	r0, r0, r3
 8006486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006488:	b10b      	cbz	r3, 800648e <__sflush_r+0x46>
 800648a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800648c:	1ac0      	subs	r0, r0, r3
 800648e:	2300      	movs	r3, #0
 8006490:	4602      	mov	r2, r0
 8006492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006494:	6a21      	ldr	r1, [r4, #32]
 8006496:	4628      	mov	r0, r5
 8006498:	47b0      	blx	r6
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	d106      	bne.n	80064ae <__sflush_r+0x66>
 80064a0:	6829      	ldr	r1, [r5, #0]
 80064a2:	291d      	cmp	r1, #29
 80064a4:	d82c      	bhi.n	8006500 <__sflush_r+0xb8>
 80064a6:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <__sflush_r+0x108>)
 80064a8:	40ca      	lsrs	r2, r1
 80064aa:	07d6      	lsls	r6, r2, #31
 80064ac:	d528      	bpl.n	8006500 <__sflush_r+0xb8>
 80064ae:	2200      	movs	r2, #0
 80064b0:	6062      	str	r2, [r4, #4]
 80064b2:	04d9      	lsls	r1, r3, #19
 80064b4:	6922      	ldr	r2, [r4, #16]
 80064b6:	6022      	str	r2, [r4, #0]
 80064b8:	d504      	bpl.n	80064c4 <__sflush_r+0x7c>
 80064ba:	1c42      	adds	r2, r0, #1
 80064bc:	d101      	bne.n	80064c2 <__sflush_r+0x7a>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	b903      	cbnz	r3, 80064c4 <__sflush_r+0x7c>
 80064c2:	6560      	str	r0, [r4, #84]	; 0x54
 80064c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c6:	602f      	str	r7, [r5, #0]
 80064c8:	2900      	cmp	r1, #0
 80064ca:	d0ca      	beq.n	8006462 <__sflush_r+0x1a>
 80064cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d0:	4299      	cmp	r1, r3
 80064d2:	d002      	beq.n	80064da <__sflush_r+0x92>
 80064d4:	4628      	mov	r0, r5
 80064d6:	f7ff fc7f 	bl	8005dd8 <_free_r>
 80064da:	2000      	movs	r0, #0
 80064dc:	6360      	str	r0, [r4, #52]	; 0x34
 80064de:	e7c1      	b.n	8006464 <__sflush_r+0x1c>
 80064e0:	6a21      	ldr	r1, [r4, #32]
 80064e2:	2301      	movs	r3, #1
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b0      	blx	r6
 80064e8:	1c41      	adds	r1, r0, #1
 80064ea:	d1c7      	bne.n	800647c <__sflush_r+0x34>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0c4      	beq.n	800647c <__sflush_r+0x34>
 80064f2:	2b1d      	cmp	r3, #29
 80064f4:	d001      	beq.n	80064fa <__sflush_r+0xb2>
 80064f6:	2b16      	cmp	r3, #22
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0xb6>
 80064fa:	602f      	str	r7, [r5, #0]
 80064fc:	e7b1      	b.n	8006462 <__sflush_r+0x1a>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	e7ad      	b.n	8006464 <__sflush_r+0x1c>
 8006508:	690f      	ldr	r7, [r1, #16]
 800650a:	2f00      	cmp	r7, #0
 800650c:	d0a9      	beq.n	8006462 <__sflush_r+0x1a>
 800650e:	0793      	lsls	r3, r2, #30
 8006510:	680e      	ldr	r6, [r1, #0]
 8006512:	bf08      	it	eq
 8006514:	694b      	ldreq	r3, [r1, #20]
 8006516:	600f      	str	r7, [r1, #0]
 8006518:	bf18      	it	ne
 800651a:	2300      	movne	r3, #0
 800651c:	eba6 0807 	sub.w	r8, r6, r7
 8006520:	608b      	str	r3, [r1, #8]
 8006522:	f1b8 0f00 	cmp.w	r8, #0
 8006526:	dd9c      	ble.n	8006462 <__sflush_r+0x1a>
 8006528:	6a21      	ldr	r1, [r4, #32]
 800652a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800652c:	4643      	mov	r3, r8
 800652e:	463a      	mov	r2, r7
 8006530:	4628      	mov	r0, r5
 8006532:	47b0      	blx	r6
 8006534:	2800      	cmp	r0, #0
 8006536:	dc06      	bgt.n	8006546 <__sflush_r+0xfe>
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e78e      	b.n	8006464 <__sflush_r+0x1c>
 8006546:	4407      	add	r7, r0
 8006548:	eba8 0800 	sub.w	r8, r8, r0
 800654c:	e7e9      	b.n	8006522 <__sflush_r+0xda>
 800654e:	bf00      	nop
 8006550:	20400001 	.word	0x20400001

08006554 <_fflush_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	690b      	ldr	r3, [r1, #16]
 8006558:	4605      	mov	r5, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b913      	cbnz	r3, 8006564 <_fflush_r+0x10>
 800655e:	2500      	movs	r5, #0
 8006560:	4628      	mov	r0, r5
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	b118      	cbz	r0, 800656e <_fflush_r+0x1a>
 8006566:	6983      	ldr	r3, [r0, #24]
 8006568:	b90b      	cbnz	r3, 800656e <_fflush_r+0x1a>
 800656a:	f000 f887 	bl	800667c <__sinit>
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <_fflush_r+0x6c>)
 8006570:	429c      	cmp	r4, r3
 8006572:	d11b      	bne.n	80065ac <_fflush_r+0x58>
 8006574:	686c      	ldr	r4, [r5, #4]
 8006576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0ef      	beq.n	800655e <_fflush_r+0xa>
 800657e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006580:	07d0      	lsls	r0, r2, #31
 8006582:	d404      	bmi.n	800658e <_fflush_r+0x3a>
 8006584:	0599      	lsls	r1, r3, #22
 8006586:	d402      	bmi.n	800658e <_fflush_r+0x3a>
 8006588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800658a:	f000 f915 	bl	80067b8 <__retarget_lock_acquire_recursive>
 800658e:	4628      	mov	r0, r5
 8006590:	4621      	mov	r1, r4
 8006592:	f7ff ff59 	bl	8006448 <__sflush_r>
 8006596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006598:	07da      	lsls	r2, r3, #31
 800659a:	4605      	mov	r5, r0
 800659c:	d4e0      	bmi.n	8006560 <_fflush_r+0xc>
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	059b      	lsls	r3, r3, #22
 80065a2:	d4dd      	bmi.n	8006560 <_fflush_r+0xc>
 80065a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a6:	f000 f908 	bl	80067ba <__retarget_lock_release_recursive>
 80065aa:	e7d9      	b.n	8006560 <_fflush_r+0xc>
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <_fflush_r+0x70>)
 80065ae:	429c      	cmp	r4, r3
 80065b0:	d101      	bne.n	80065b6 <_fflush_r+0x62>
 80065b2:	68ac      	ldr	r4, [r5, #8]
 80065b4:	e7df      	b.n	8006576 <_fflush_r+0x22>
 80065b6:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <_fflush_r+0x74>)
 80065b8:	429c      	cmp	r4, r3
 80065ba:	bf08      	it	eq
 80065bc:	68ec      	ldreq	r4, [r5, #12]
 80065be:	e7da      	b.n	8006576 <_fflush_r+0x22>
 80065c0:	08006ecc 	.word	0x08006ecc
 80065c4:	08006eec 	.word	0x08006eec
 80065c8:	08006eac 	.word	0x08006eac

080065cc <std>:
 80065cc:	2300      	movs	r3, #0
 80065ce:	b510      	push	{r4, lr}
 80065d0:	4604      	mov	r4, r0
 80065d2:	e9c0 3300 	strd	r3, r3, [r0]
 80065d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065da:	6083      	str	r3, [r0, #8]
 80065dc:	8181      	strh	r1, [r0, #12]
 80065de:	6643      	str	r3, [r0, #100]	; 0x64
 80065e0:	81c2      	strh	r2, [r0, #14]
 80065e2:	6183      	str	r3, [r0, #24]
 80065e4:	4619      	mov	r1, r3
 80065e6:	2208      	movs	r2, #8
 80065e8:	305c      	adds	r0, #92	; 0x5c
 80065ea:	f7fd fd63 	bl	80040b4 <memset>
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <std+0x38>)
 80065f0:	6263      	str	r3, [r4, #36]	; 0x24
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <std+0x3c>)
 80065f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <std+0x40>)
 80065f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065fa:	4b05      	ldr	r3, [pc, #20]	; (8006610 <std+0x44>)
 80065fc:	6224      	str	r4, [r4, #32]
 80065fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	0800690d 	.word	0x0800690d
 8006608:	0800692f 	.word	0x0800692f
 800660c:	08006967 	.word	0x08006967
 8006610:	0800698b 	.word	0x0800698b

08006614 <_cleanup_r>:
 8006614:	4901      	ldr	r1, [pc, #4]	; (800661c <_cleanup_r+0x8>)
 8006616:	f000 b8af 	b.w	8006778 <_fwalk_reent>
 800661a:	bf00      	nop
 800661c:	08006555 	.word	0x08006555

08006620 <__sfmoreglue>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	1e4a      	subs	r2, r1, #1
 8006624:	2568      	movs	r5, #104	; 0x68
 8006626:	4355      	muls	r5, r2
 8006628:	460e      	mov	r6, r1
 800662a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800662e:	f7ff fc23 	bl	8005e78 <_malloc_r>
 8006632:	4604      	mov	r4, r0
 8006634:	b140      	cbz	r0, 8006648 <__sfmoreglue+0x28>
 8006636:	2100      	movs	r1, #0
 8006638:	e9c0 1600 	strd	r1, r6, [r0]
 800663c:	300c      	adds	r0, #12
 800663e:	60a0      	str	r0, [r4, #8]
 8006640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006644:	f7fd fd36 	bl	80040b4 <memset>
 8006648:	4620      	mov	r0, r4
 800664a:	bd70      	pop	{r4, r5, r6, pc}

0800664c <__sfp_lock_acquire>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_acquire+0x8>)
 800664e:	f000 b8b3 	b.w	80067b8 <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	2000044c 	.word	0x2000044c

08006658 <__sfp_lock_release>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_release+0x8>)
 800665a:	f000 b8ae 	b.w	80067ba <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	2000044c 	.word	0x2000044c

08006664 <__sinit_lock_acquire>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__sinit_lock_acquire+0x8>)
 8006666:	f000 b8a7 	b.w	80067b8 <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	20000447 	.word	0x20000447

08006670 <__sinit_lock_release>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__sinit_lock_release+0x8>)
 8006672:	f000 b8a2 	b.w	80067ba <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	20000447 	.word	0x20000447

0800667c <__sinit>:
 800667c:	b510      	push	{r4, lr}
 800667e:	4604      	mov	r4, r0
 8006680:	f7ff fff0 	bl	8006664 <__sinit_lock_acquire>
 8006684:	69a3      	ldr	r3, [r4, #24]
 8006686:	b11b      	cbz	r3, 8006690 <__sinit+0x14>
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f7ff bff0 	b.w	8006670 <__sinit_lock_release>
 8006690:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006694:	6523      	str	r3, [r4, #80]	; 0x50
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <__sinit+0x68>)
 8006698:	4a13      	ldr	r2, [pc, #76]	; (80066e8 <__sinit+0x6c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	62a2      	str	r2, [r4, #40]	; 0x28
 800669e:	42a3      	cmp	r3, r4
 80066a0:	bf04      	itt	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	61a3      	streq	r3, [r4, #24]
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 f820 	bl	80066ec <__sfp>
 80066ac:	6060      	str	r0, [r4, #4]
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f81c 	bl	80066ec <__sfp>
 80066b4:	60a0      	str	r0, [r4, #8]
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 f818 	bl	80066ec <__sfp>
 80066bc:	2200      	movs	r2, #0
 80066be:	60e0      	str	r0, [r4, #12]
 80066c0:	2104      	movs	r1, #4
 80066c2:	6860      	ldr	r0, [r4, #4]
 80066c4:	f7ff ff82 	bl	80065cc <std>
 80066c8:	68a0      	ldr	r0, [r4, #8]
 80066ca:	2201      	movs	r2, #1
 80066cc:	2109      	movs	r1, #9
 80066ce:	f7ff ff7d 	bl	80065cc <std>
 80066d2:	68e0      	ldr	r0, [r4, #12]
 80066d4:	2202      	movs	r2, #2
 80066d6:	2112      	movs	r1, #18
 80066d8:	f7ff ff78 	bl	80065cc <std>
 80066dc:	2301      	movs	r3, #1
 80066de:	61a3      	str	r3, [r4, #24]
 80066e0:	e7d2      	b.n	8006688 <__sinit+0xc>
 80066e2:	bf00      	nop
 80066e4:	08006b28 	.word	0x08006b28
 80066e8:	08006615 	.word	0x08006615

080066ec <__sfp>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	4607      	mov	r7, r0
 80066f0:	f7ff ffac 	bl	800664c <__sfp_lock_acquire>
 80066f4:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <__sfp+0x84>)
 80066f6:	681e      	ldr	r6, [r3, #0]
 80066f8:	69b3      	ldr	r3, [r6, #24]
 80066fa:	b913      	cbnz	r3, 8006702 <__sfp+0x16>
 80066fc:	4630      	mov	r0, r6
 80066fe:	f7ff ffbd 	bl	800667c <__sinit>
 8006702:	3648      	adds	r6, #72	; 0x48
 8006704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006708:	3b01      	subs	r3, #1
 800670a:	d503      	bpl.n	8006714 <__sfp+0x28>
 800670c:	6833      	ldr	r3, [r6, #0]
 800670e:	b30b      	cbz	r3, 8006754 <__sfp+0x68>
 8006710:	6836      	ldr	r6, [r6, #0]
 8006712:	e7f7      	b.n	8006704 <__sfp+0x18>
 8006714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006718:	b9d5      	cbnz	r5, 8006750 <__sfp+0x64>
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <__sfp+0x88>)
 800671c:	60e3      	str	r3, [r4, #12]
 800671e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006722:	6665      	str	r5, [r4, #100]	; 0x64
 8006724:	f000 f847 	bl	80067b6 <__retarget_lock_init_recursive>
 8006728:	f7ff ff96 	bl	8006658 <__sfp_lock_release>
 800672c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006730:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006734:	6025      	str	r5, [r4, #0]
 8006736:	61a5      	str	r5, [r4, #24]
 8006738:	2208      	movs	r2, #8
 800673a:	4629      	mov	r1, r5
 800673c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006740:	f7fd fcb8 	bl	80040b4 <memset>
 8006744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800674c:	4620      	mov	r0, r4
 800674e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006750:	3468      	adds	r4, #104	; 0x68
 8006752:	e7d9      	b.n	8006708 <__sfp+0x1c>
 8006754:	2104      	movs	r1, #4
 8006756:	4638      	mov	r0, r7
 8006758:	f7ff ff62 	bl	8006620 <__sfmoreglue>
 800675c:	4604      	mov	r4, r0
 800675e:	6030      	str	r0, [r6, #0]
 8006760:	2800      	cmp	r0, #0
 8006762:	d1d5      	bne.n	8006710 <__sfp+0x24>
 8006764:	f7ff ff78 	bl	8006658 <__sfp_lock_release>
 8006768:	230c      	movs	r3, #12
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	e7ee      	b.n	800674c <__sfp+0x60>
 800676e:	bf00      	nop
 8006770:	08006b28 	.word	0x08006b28
 8006774:	ffff0001 	.word	0xffff0001

08006778 <_fwalk_reent>:
 8006778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800677c:	4606      	mov	r6, r0
 800677e:	4688      	mov	r8, r1
 8006780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006784:	2700      	movs	r7, #0
 8006786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800678a:	f1b9 0901 	subs.w	r9, r9, #1
 800678e:	d505      	bpl.n	800679c <_fwalk_reent+0x24>
 8006790:	6824      	ldr	r4, [r4, #0]
 8006792:	2c00      	cmp	r4, #0
 8006794:	d1f7      	bne.n	8006786 <_fwalk_reent+0xe>
 8006796:	4638      	mov	r0, r7
 8006798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800679c:	89ab      	ldrh	r3, [r5, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d907      	bls.n	80067b2 <_fwalk_reent+0x3a>
 80067a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067a6:	3301      	adds	r3, #1
 80067a8:	d003      	beq.n	80067b2 <_fwalk_reent+0x3a>
 80067aa:	4629      	mov	r1, r5
 80067ac:	4630      	mov	r0, r6
 80067ae:	47c0      	blx	r8
 80067b0:	4307      	orrs	r7, r0
 80067b2:	3568      	adds	r5, #104	; 0x68
 80067b4:	e7e9      	b.n	800678a <_fwalk_reent+0x12>

080067b6 <__retarget_lock_init_recursive>:
 80067b6:	4770      	bx	lr

080067b8 <__retarget_lock_acquire_recursive>:
 80067b8:	4770      	bx	lr

080067ba <__retarget_lock_release_recursive>:
 80067ba:	4770      	bx	lr

080067bc <__swhatbuf_r>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	460e      	mov	r6, r1
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	2900      	cmp	r1, #0
 80067c6:	b096      	sub	sp, #88	; 0x58
 80067c8:	4614      	mov	r4, r2
 80067ca:	461d      	mov	r5, r3
 80067cc:	da07      	bge.n	80067de <__swhatbuf_r+0x22>
 80067ce:	2300      	movs	r3, #0
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	89b3      	ldrh	r3, [r6, #12]
 80067d4:	061a      	lsls	r2, r3, #24
 80067d6:	d410      	bmi.n	80067fa <__swhatbuf_r+0x3e>
 80067d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067dc:	e00e      	b.n	80067fc <__swhatbuf_r+0x40>
 80067de:	466a      	mov	r2, sp
 80067e0:	f000 f8fa 	bl	80069d8 <_fstat_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	dbf2      	blt.n	80067ce <__swhatbuf_r+0x12>
 80067e8:	9a01      	ldr	r2, [sp, #4]
 80067ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067f2:	425a      	negs	r2, r3
 80067f4:	415a      	adcs	r2, r3
 80067f6:	602a      	str	r2, [r5, #0]
 80067f8:	e7ee      	b.n	80067d8 <__swhatbuf_r+0x1c>
 80067fa:	2340      	movs	r3, #64	; 0x40
 80067fc:	2000      	movs	r0, #0
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	b016      	add	sp, #88	; 0x58
 8006802:	bd70      	pop	{r4, r5, r6, pc}

08006804 <__smakebuf_r>:
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006808:	079d      	lsls	r5, r3, #30
 800680a:	4606      	mov	r6, r0
 800680c:	460c      	mov	r4, r1
 800680e:	d507      	bpl.n	8006820 <__smakebuf_r+0x1c>
 8006810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	6123      	str	r3, [r4, #16]
 8006818:	2301      	movs	r3, #1
 800681a:	6163      	str	r3, [r4, #20]
 800681c:	b002      	add	sp, #8
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	ab01      	add	r3, sp, #4
 8006822:	466a      	mov	r2, sp
 8006824:	f7ff ffca 	bl	80067bc <__swhatbuf_r>
 8006828:	9900      	ldr	r1, [sp, #0]
 800682a:	4605      	mov	r5, r0
 800682c:	4630      	mov	r0, r6
 800682e:	f7ff fb23 	bl	8005e78 <_malloc_r>
 8006832:	b948      	cbnz	r0, 8006848 <__smakebuf_r+0x44>
 8006834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006838:	059a      	lsls	r2, r3, #22
 800683a:	d4ef      	bmi.n	800681c <__smakebuf_r+0x18>
 800683c:	f023 0303 	bic.w	r3, r3, #3
 8006840:	f043 0302 	orr.w	r3, r3, #2
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	e7e3      	b.n	8006810 <__smakebuf_r+0xc>
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <__smakebuf_r+0x7c>)
 800684a:	62b3      	str	r3, [r6, #40]	; 0x28
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	6020      	str	r0, [r4, #0]
 8006850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	6163      	str	r3, [r4, #20]
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	6120      	str	r0, [r4, #16]
 800685e:	b15b      	cbz	r3, 8006878 <__smakebuf_r+0x74>
 8006860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006864:	4630      	mov	r0, r6
 8006866:	f000 f8c9 	bl	80069fc <_isatty_r>
 800686a:	b128      	cbz	r0, 8006878 <__smakebuf_r+0x74>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	89a0      	ldrh	r0, [r4, #12]
 800687a:	4305      	orrs	r5, r0
 800687c:	81a5      	strh	r5, [r4, #12]
 800687e:	e7cd      	b.n	800681c <__smakebuf_r+0x18>
 8006880:	08006615 	.word	0x08006615

08006884 <_raise_r>:
 8006884:	291f      	cmp	r1, #31
 8006886:	b538      	push	{r3, r4, r5, lr}
 8006888:	4604      	mov	r4, r0
 800688a:	460d      	mov	r5, r1
 800688c:	d904      	bls.n	8006898 <_raise_r+0x14>
 800688e:	2316      	movs	r3, #22
 8006890:	6003      	str	r3, [r0, #0]
 8006892:	f04f 30ff 	mov.w	r0, #4294967295
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800689a:	b112      	cbz	r2, 80068a2 <_raise_r+0x1e>
 800689c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068a0:	b94b      	cbnz	r3, 80068b6 <_raise_r+0x32>
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 f830 	bl	8006908 <_getpid_r>
 80068a8:	462a      	mov	r2, r5
 80068aa:	4601      	mov	r1, r0
 80068ac:	4620      	mov	r0, r4
 80068ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b2:	f000 b817 	b.w	80068e4 <_kill_r>
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d00a      	beq.n	80068d0 <_raise_r+0x4c>
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	d103      	bne.n	80068c6 <_raise_r+0x42>
 80068be:	2316      	movs	r3, #22
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	2001      	movs	r0, #1
 80068c4:	e7e7      	b.n	8006896 <_raise_r+0x12>
 80068c6:	2400      	movs	r4, #0
 80068c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068cc:	4628      	mov	r0, r5
 80068ce:	4798      	blx	r3
 80068d0:	2000      	movs	r0, #0
 80068d2:	e7e0      	b.n	8006896 <_raise_r+0x12>

080068d4 <raise>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <raise+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f7ff bfd3 	b.w	8006884 <_raise_r>
 80068de:	bf00      	nop
 80068e0:	20000124 	.word	0x20000124

080068e4 <_kill_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d07      	ldr	r5, [pc, #28]	; (8006904 <_kill_r+0x20>)
 80068e8:	2300      	movs	r3, #0
 80068ea:	4604      	mov	r4, r0
 80068ec:	4608      	mov	r0, r1
 80068ee:	4611      	mov	r1, r2
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	f7fb fbc5 	bl	8002080 <_kill>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d102      	bne.n	8006900 <_kill_r+0x1c>
 80068fa:	682b      	ldr	r3, [r5, #0]
 80068fc:	b103      	cbz	r3, 8006900 <_kill_r+0x1c>
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	20000440 	.word	0x20000440

08006908 <_getpid_r>:
 8006908:	f7fb bbb8 	b.w	800207c <_getpid>

0800690c <__sread>:
 800690c:	b510      	push	{r4, lr}
 800690e:	460c      	mov	r4, r1
 8006910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006914:	f000 f894 	bl	8006a40 <_read_r>
 8006918:	2800      	cmp	r0, #0
 800691a:	bfab      	itete	ge
 800691c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800691e:	89a3      	ldrhlt	r3, [r4, #12]
 8006920:	181b      	addge	r3, r3, r0
 8006922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006926:	bfac      	ite	ge
 8006928:	6563      	strge	r3, [r4, #84]	; 0x54
 800692a:	81a3      	strhlt	r3, [r4, #12]
 800692c:	bd10      	pop	{r4, pc}

0800692e <__swrite>:
 800692e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006932:	461f      	mov	r7, r3
 8006934:	898b      	ldrh	r3, [r1, #12]
 8006936:	05db      	lsls	r3, r3, #23
 8006938:	4605      	mov	r5, r0
 800693a:	460c      	mov	r4, r1
 800693c:	4616      	mov	r6, r2
 800693e:	d505      	bpl.n	800694c <__swrite+0x1e>
 8006940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006944:	2302      	movs	r3, #2
 8006946:	2200      	movs	r2, #0
 8006948:	f000 f868 	bl	8006a1c <_lseek_r>
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006956:	81a3      	strh	r3, [r4, #12]
 8006958:	4632      	mov	r2, r6
 800695a:	463b      	mov	r3, r7
 800695c:	4628      	mov	r0, r5
 800695e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006962:	f000 b817 	b.w	8006994 <_write_r>

08006966 <__sseek>:
 8006966:	b510      	push	{r4, lr}
 8006968:	460c      	mov	r4, r1
 800696a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696e:	f000 f855 	bl	8006a1c <_lseek_r>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	bf15      	itete	ne
 8006978:	6560      	strne	r0, [r4, #84]	; 0x54
 800697a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800697e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006982:	81a3      	strheq	r3, [r4, #12]
 8006984:	bf18      	it	ne
 8006986:	81a3      	strhne	r3, [r4, #12]
 8006988:	bd10      	pop	{r4, pc}

0800698a <__sclose>:
 800698a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698e:	f000 b813 	b.w	80069b8 <_close_r>
	...

08006994 <_write_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4d07      	ldr	r5, [pc, #28]	; (80069b4 <_write_r+0x20>)
 8006998:	4604      	mov	r4, r0
 800699a:	4608      	mov	r0, r1
 800699c:	4611      	mov	r1, r2
 800699e:	2200      	movs	r2, #0
 80069a0:	602a      	str	r2, [r5, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f7fb fb88 	bl	80020b8 <_write>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_write_r+0x1e>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_write_r+0x1e>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	20000440 	.word	0x20000440

080069b8 <_close_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4d06      	ldr	r5, [pc, #24]	; (80069d4 <_close_r+0x1c>)
 80069bc:	2300      	movs	r3, #0
 80069be:	4604      	mov	r4, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	f7fb fb86 	bl	80020d4 <_close>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_close_r+0x1a>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_close_r+0x1a>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	20000440 	.word	0x20000440

080069d8 <_fstat_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d07      	ldr	r5, [pc, #28]	; (80069f8 <_fstat_r+0x20>)
 80069dc:	2300      	movs	r3, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	f7fb fb79 	bl	80020dc <_fstat>
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	d102      	bne.n	80069f4 <_fstat_r+0x1c>
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	b103      	cbz	r3, 80069f4 <_fstat_r+0x1c>
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	bd38      	pop	{r3, r4, r5, pc}
 80069f6:	bf00      	nop
 80069f8:	20000440 	.word	0x20000440

080069fc <_isatty_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4d06      	ldr	r5, [pc, #24]	; (8006a18 <_isatty_r+0x1c>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f7fb fb6e 	bl	80020e8 <_isatty>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_isatty_r+0x1a>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_isatty_r+0x1a>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	20000440 	.word	0x20000440

08006a1c <_lseek_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d07      	ldr	r5, [pc, #28]	; (8006a3c <_lseek_r+0x20>)
 8006a20:	4604      	mov	r4, r0
 8006a22:	4608      	mov	r0, r1
 8006a24:	4611      	mov	r1, r2
 8006a26:	2200      	movs	r2, #0
 8006a28:	602a      	str	r2, [r5, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f7fb fb5e 	bl	80020ec <_lseek>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_lseek_r+0x1e>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_lseek_r+0x1e>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20000440 	.word	0x20000440

08006a40 <_read_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4d07      	ldr	r5, [pc, #28]	; (8006a60 <_read_r+0x20>)
 8006a44:	4604      	mov	r4, r0
 8006a46:	4608      	mov	r0, r1
 8006a48:	4611      	mov	r1, r2
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	602a      	str	r2, [r5, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f7fb fb24 	bl	800209c <_read>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_read_r+0x1e>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_read_r+0x1e>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	20000440 	.word	0x20000440

08006a64 <_init>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	bf00      	nop
 8006a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6a:	bc08      	pop	{r3}
 8006a6c:	469e      	mov	lr, r3
 8006a6e:	4770      	bx	lr

08006a70 <_fini>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr
